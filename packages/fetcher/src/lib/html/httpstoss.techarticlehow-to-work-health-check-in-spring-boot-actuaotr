<!DOCTYPE html><html><head><link rel="stylesheet" href="https://static.toss.im/tds-pc/3.232.0/main.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/rss+xml" href="/rss.xml"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/atom+xml" href="/atom.xml"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/main.css"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/others.css"/><link rel="stylesheet" href="https://static.toss.im/tossface-font/tossface.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/activitystream+json" href="/feed.json"/><meta charSet="UTF-8"/><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover"/><meta name="author" content="Viva Republica"/><link rel="preconnect" href="https://static.toss.im"/><link rel="shortcut icon" href="https://static.toss.im/tds/favicon/favicon.ico"/><link rel="icon" type="image/png" sizes="16x16" href="https://static.toss.im/tds/favicon/favicon-16x16.png"/><link rel="icon" type="image/png" sizes="32x32" href="https://static.toss.im/tds/favicon/favicon-32x32.png"/><link rel="icon" type="image/png" sizes="48x48" href="https://static.toss.im/tds/favicon/favicon-48x48.png"/><link rel="icon" type="image/png" sizes="196x196" href="https://static.toss.im/tds/favicon/favicon-196x196.png"/><link rel="apple-touch-icon" sizes="57x57" href="https://static.toss.im/tds/favicon/apple-touch-icon-57x57.png"/><link rel="apple-touch-icon" sizes="72x72" href="https://static.toss.im/tds/favicon/apple-touch-icon-72x72.png"/><link rel="apple-touch-icon" sizes="114x114" href="https://static.toss.im/tds/favicon/apple-touch-icon-114x114.png"/><link rel="apple-touch-icon" sizes="120x120" href="https://static.toss.im/tds/favicon/apple-touch-icon-120x120.png"/><link rel="apple-touch-icon" sizes="144x144" href="https://static.toss.im/tds/favicon/apple-touch-icon-144x144.png"/><link rel="apple-touch-icon" sizes="152x152" href="https://static.toss.im/tds/favicon/apple-touch-icon-152x152.png"/><meta name="msapplication-TileImage" content="https://static.toss.im/tds/favicon/mstile-144x144.png"/><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-PQ5NV18TH1"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'G-PQ5NV18TH1');</script><script>(function(h,o,t,j,a,r){
    h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
    h._hjSettings={hjid:2399367,hjsv:6};
    a=o.getElementsByTagName('head')[0];
    r=o.createElement('script');r.async=1;
    r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
    a.appendChild(r);
})(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');</script><title>무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사</title><meta name="twitter:creator" content="Viva Republica"/><meta name="twitter:site" content="@Toss_service"/><meta name="twitter:card" content="summary_large_image"/><meta property="og:title" content="무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사"/><meta name="twitter:title" content="무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사"/><meta property="og:description" content="서버의 상태를 알려주는 헬스 체크에 대해 알고 계시나요? 단순히 200 OK만 내려주겠거니 하고 별로 신경을 안 쓰고 계셨나요? 해당 포스트에서는 Spring Boot Actuaor가 제공해주는 헬스 체크는 어떤 식으로 서버의 상태를 점검하는지, 어떤 부분을 주의하며 사용해야하는지 알아봅니다.
"/><meta name="twitter:description" content="서버의 상태를 알려주는 헬스 체크에 대해 알고 계시나요? 단순히 200 OK만 내려주겠거니 하고 별로 신경을 안 쓰고 계셨나요? 해당 포스트에서는 Spring Boot Actuaor가 제공해주는 헬스 체크는 어떤 식으로 서버의 상태를 점검하는지, 어떤 부분을 주의하며 사용해야하는지 알아봅니다.
"/><meta property="og:image" content="https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png?v=2"/><meta name="twitter:image" content="https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png?v=2"/><meta name="next-head-count" content="36"/><meta name="next-font-preconnect"/><link rel="preload" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" as="style"/><link rel="stylesheet" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/polyfills-5cd94c89d3acac5f.js"></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/webpack-a37367524f3d9e47.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/framework-5201cf011975c339.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/main-4ffd67ad72332dfe.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/_app-02461bb4136bedab.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/821-c2f4db054c6f6b42.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/935-149f2da2961c2b08.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/article/%5Bslug%5D-bf5a24035d1301de.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_buildManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_ssgManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_middlewareManifest.js" defer=""></script></head><body><div id="__next"><style data-emotion="css-global ubpbb5">html,body{padding:0;margin:0;font-family:'Toss Product Sans';}button{font-family:'Toss Product Sans';}p{margin:0;}</style><style data-emotion="css kcwxxw">.css-kcwxxw{position:-webkit-sticky;position:sticky;top:0;height:59px;}</style><nav class="p-navbar p-navbar--bottom-border css-kcwxxw"><div class="p-container p-container--default"><div class="p-container__inner p-navbar__inner-container"><div class="p-navbar__logo-container"><a class="p-navbar__logo-icon" href="/tech"><span class="icon p-icon" aria-hidden="true" role="presentation" style="height:auto;width:auto;min-width:24px"></span></a></div><div class="p-navbar__right-on-mobile"></div><div class="p-navbar__content" aria-expanded="false" aria-hidden="true"><ul class="p-navbar__menu"></ul><ul class="p-navbar__menu"><li class="p-navbar__item"><a>디자인</a></li><li class="p-navbar__item"><a>개발</a></li><li class="p-navbar__item p-navbar__button-item"><button class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s p-navbar__button" type="button" aria-disabled="false">채용 바로가기</button></li></ul></div></div></div></nav><style data-emotion="css 1nquki8">.css-1nquki8{max-width:700px;margin-bottom:80px;}.css-1nquki8 .has-extra-large-font-size{font-size:20px;}.css-1nquki8 .has-large-font-size{font-size:18px;}.css-1nquki8 .has-small-font-size{font-size:14px;}.css-1nquki8 .has-extra-small-font-size{font-size:12px;}@media (max-width: 700px){.css-1nquki8{margin-bottom:64px;}}</style><div class="p-container p-container--default css-1nquki8"><div class="p-container__inner"><style data-emotion="css gtmad4">.css-gtmad4>*:not(style)~*:not(style){margin-top:54px;}@media (max-width: 700px){.css-gtmad4>*:not(style)~*:not(style){margin-top:48px;}}</style><article class="css-gtmad4"><style data-emotion="css 1095auh">.css-1095auh>*:not(style)~*:not(style){margin-top:20px;}</style><header class="css-1095auh"><style data-emotion="css iffq4o">.css-iffq4o{width:100%;margin-top:36px;border-radius:12px;}</style><img srcSet="https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w" alt="무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사" class="css-iffq4o e132k2574"/><style data-emotion="css 117sh4z">.css-117sh4z{margin-top:36px;margin-bottom:0;font-size:48px;font-weight:700;line-height:1.25;color:#333d4b;word-break:keep-all;overflow-wrap:break-word;}@media (max-width: 700px){.css-117sh4z{margin-top:28px;font-size:32px;}}</style><h1 class="css-117sh4z e132k2573">무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사</h1><style data-emotion="css s5xdrg">.css-s5xdrg{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}</style><section class="css-s5xdrg e2c667z4"><style data-emotion="css 1hdebld">.css-1hdebld{grid-area:image;width:48px;height:48px;border-radius:156px;margin-right:14px;}</style><img src="https://secure.gravatar.com/avatar/b7c03d670c9c04da8a2374d37ee5dfa7?s=312&amp;d=mm&amp;r=g" alt="" class="css-1hdebld e2c667z3"/><div><style data-emotion="css 14d9k6d">.css-14d9k6d{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;grid-area:outline;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;padding-top:8px;font-size:17px;margin-bottom:2px;}@media (max-width: 700px){.css-14d9k6d>*+*{margin-top:4px;margin-left:0;}}</style><div class="css-14d9k6d e2c667z2"><style data-emotion="css 9krnkp">.css-9krnkp{grid-area:name;margin:0;font-size:17px;font-weight:600;color:#4e5968;white-space:nowrap;}</style><h3 class="css-9krnkp e2c667z1">양권성</h3><h3 class="css-9krnkp e2c667z1">ㆍ<!-- -->Server Developer</h3></div><style data-emotion="css 154r2lc">.css-154r2lc{font-size:14px;line-height:1.5;color:#8b95a1;}</style><div class="css-154r2lc e2c667z0">2023. 4. 1</div></div></section></header><style data-emotion="css 1k1kkv6">.css-1k1kkv6{font-size:18px;line-height:1.7;color:var(--grey700);font-size:18px;word-break:keep-all;overflow-wrap:break-word;counter-reset:p-post-ol 0;}.css-1k1kkv6 h2{margin:2.2em 0 0.6em 0;font-size:25px;font-weight:600;line-height:1.4;color:var(--grey900);}.css-1k1kkv6 h3{margin:2.2em 0 0.6em 0;font-size:22px;font-weight:600;line-height:1.6;color:var(--grey900);}.css-1k1kkv6 h4{margin:2.2em 0 0.3em 0;font-size:19px;font-weight:600;line-height:1.6;color:var(--grey700);}.css-1k1kkv6 p{margin:1em 0;}.css-1k1kkv6 p code,.css-1k1kkv6 li code{font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:3px;}.css-1k1kkv6 a{color:var(--blue700);}.css-1k1kkv6 pre{margin:2em -24px;}@media (max-width: 700px){.css-1k1kkv6 pre{margin:2em 0;}}.css-1k1kkv6 pre code{display:block;padding:16px 24px;overflow-x:auto;font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;line-height:1.5;word-wrap:normal;white-space:pre;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:12px;}.css-1k1kkv6 figure{margin:2em 0;overflow:hidden;border-radius:12px;width:100%;}.css-1k1kkv6 figure.aligncenter{text-align:center;}.css-1k1kkv6 ol,.css-1k1kkv6 ul{margin:0 0 16px;list-style:none;}.css-1k1kkv6 ol li,.css-1k1kkv6 ul li{position:relative;margin-bottom:8px;}.css-1k1kkv6 ol li:before,.css-1k1kkv6 ul li:before{position:absolute;left:0;}.css-1k1kkv6 ol li ol,.css-1k1kkv6 ul li ol{padding-left:0;margin:8px 0 0 -16px;}.css-1k1kkv6 ol li ul,.css-1k1kkv6 ul li ul{padding-left:0;margin-top:8px;}.css-1k1kkv6 ol li p,.css-1k1kkv6 ul li p{margin:0;}.css-1k1kkv6 ol{padding-left:16px;counter-reset:p-post-ol;}.css-1k1kkv6 ol>li{padding-left:32px;counter-increment:p-post-ol;}.css-1k1kkv6 ol>li:before{font-weight:700;font-weight:var(--font-weight-bold);content:counter(p-post-ol) '.';}.css-1k1kkv6 ul{padding-left:16px;}.css-1k1kkv6 ul>li{padding-left:24px;}.css-1k1kkv6 ul>li:before{width:16px;text-align:center;content:'•';}.css-1k1kkv6 figcaption{font-size:0.9em;color:var(--grey600);}.css-1k1kkv6 .wp-block-pullquote{margin:0;}.css-1k1kkv6 blockquote{padding:32px;background:var(--greyOpacity100);border-radius:12px;text-align:left;margin:16px 0 16px 0;}.css-1k1kkv6 blockquote p{color:#333d4b;font-weight:600;margin:0;}.css-1k1kkv6 blockquote cite{font-style:normal;}@media (max-width: 700px){.css-1k1kkv6 blockquote{padding:24px;}}.css-1k1kkv6 .wp-block-embed-youtube iframe{width:100%;border-radius:12px;}.css-1k1kkv6 ol{counter-reset:none;}.css-1k1kkv6 hr{border-top:1px solid #e5e8eb;border-right-style:none;border-left-style:none;border-bottom-style:none;margin:2.5rem 0;}.css-1k1kkv6 figure{display:table;text-align:center;}@media (max-width: 700px){.css-1k1kkv6 figure{width:100%;}}.css-1k1kkv6 figure img,.css-1k1kkv6 figure video{max-width:100%;height:auto;border:1px solid rgba(2,32,71,0.05);border-radius:12px;}.css-1k1kkv6 figure.alignright{float:right;margin:0 0 8px 24px;}@media (max-width: 700px){.css-1k1kkv6 figure.alignright{float:none;margin:0;}}.css-1k1kkv6 figcaption{display:table-caption;text-align:center;white-space:pre-wrap;caption-side:bottom;}.css-1k1kkv6 p:empty::before{content:'';}</style><div class="css-1k1kkv6 e132k2572"><div>
<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="529" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-46-1024x529.png" alt="" class="wp-image-2138" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-46-1024x529.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-300x155.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-768x397.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-1536x794.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-1568x810.png 1568w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46.png 1660w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<p>뭐든 알고 쓰는 게 참 중요한 것 같습니다. 단순히 “<strong>지금은 잘 돌아가니까 문제 없다</strong>”는 접근은 문제가 발생하기 전까지는 문제를 방치하기 마련입니다.</p>



<p>사용하는 기술이나 구조에 대해 끊임없이 질문을 던지고 탐구하는 과정은 <a href="https://blog.toss.im/article/core-values-are-evolving">토스팀 코어밸류 3.0</a> 중 하나인 <strong>Question Every Assumption, 모든 기본 가정에 근원적 물음을 제기한다</strong>에도 부합하는 사례인것 같습니다. 이번 포스트에서는 제가 개발 과정에서 헬스 체크를 별다른 생각 없이 <a href="https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html">Spring Boot Actuator</a>가 제공하는 기능을 사용하면서 겪은 이슈를 간략하게 설명해보겠습니다.</p>



<h2>들어가기에 앞서</h2>



<p>이 포스트는 작성 시점 기준에서 최신 Spring Boot GA(General Availability) 버전인 3.0.5 버전을 기준으로 설명합니다. 해당 버전의 하위/상위 버전에서는 기능이 미묘하게 다르게 동작할 수 있습니다. 2.x 버전에서도 큰 맥락에서는 동일한 동작을 보장하리라 추측되지만 본인이 사용하는 버전에 해당하는 자세한 내용을 찾아보시길 권장합니다.</p>



<h2>헬스 체크란?</h2>



<p>서비스의 고가용성(HA, High Availability), 고성능을 위한 부하 분산 등의 이유로 우리는 서버의 이중화(혹은 그 이상)를 하고, 앞에서 어떤 서버로 요청을 보낼지 라우팅 역할을 하는 로드 밸런서를 둡니다.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="321" height="212" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-47.png" alt="" class="wp-image-2139" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-47.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-47-300x198.png 300w" sizes="(max-width: 321px) 100vw, 321px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>로드 밸런서가 적절히 부하를 분산하여 A/B 서버 중 한 대에게 클라이언트의 요청을 보냅니다.</figcaption></figure></div>



<p>하지만 아래와 같이 서버 한 대가 서비스 불가 상태라면 어떻게 해야할까요? 해당 서버에 요청이 들어가야할까요?</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="321" height="212" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-48.png" alt="" class="wp-image-2140" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-48.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-48-300x198.png 300w" sizes="(max-width: 321px) 100vw, 321px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<p>혹은 대량의 트래픽이 들어올 것을 대비하는 등등의 이유로 서버를 증설해야 하는데 해당 서버가 관련된 소스코드를 로딩하고 있다면 어떻게 해야할까요? 이 때도 마찬가지로 해당 서버에 요청이 들어가야할까요?</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="321" height="342" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-49.png" alt="" class="wp-image-2141" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-49.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-49-282x300.png 282w" sizes="(max-width: 321px) 100vw, 321px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<p><strong>두 케이스 모두 해당 서버로 요청을 보내면 안 됩니다.</strong> 정상적인 서비스가 불가능해서 클라이언트의 요청을 수행할 수 없습니다. 장애를 유발하거나 해당 서버의 부하를 크게 증가시켜 오히려 장애를 더 심각하게 만들 수도 있습니다.</p>



<p>따라서 로드 밸런서에서는 각 서버의 헬스 체크 API를 호출해서 해당 서버가 현재 서비스 가능한 상태인지 아닌지 주기적으로 점검합니다.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="201" height="212" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-50.png" alt="" class="wp-image-2142" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>헬스 체크 API 경로는 커스텀하게 설정 가능합니다.</figcaption></figure></div>



<p>헬스 체크에서 서버에 문제가 발견되면 로드 밸런서는 해당 서버로 요청을 보내지 않게 됩니다.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="321" height="212" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-51.png" alt="" class="wp-image-2143" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-51.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-51-300x198.png 300w" sizes="(max-width: 321px) 100vw, 321px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="321" height="322" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-52.png" alt="" class="wp-image-2144" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-52.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-52-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-52-150x150.png 150w" sizes="(max-width: 321px) 100vw, 321px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<p><strong>헬스 체크는 정상적으로 서비스가 가능한 서버에만 트래픽을 보내서 서비스의 고가용성을 확보</strong>하는 데 도움됩니다.</p>



<h2>Spring Boot Actuator의 헬스 체크</h2>



<p><a href="https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html">Spring Boot Acutator</a>를 의존성으로 추가하면 기본적으로 헬스 체크 엔드포인트가 활성화됩니다.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="189" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-54-1024x189.png" alt="" class="wp-image-2145" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-54-1024x189.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-300x55.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-768x142.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-1536x283.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-2048x378.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-1568x289.png 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<p>Spring Boot 3.x 기준으로 헬스 체크 엔드포인트는 <code>/actuator/health</code>이고, 설정을 바꾸지 않아도 해당 엔드포인트로 접속하면 HTTP 200 상태 코드와 해당 서버의 상태가 Response Body로 응답됩니다.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="217" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-55-1024x217.png" alt="" class="wp-image-2146" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-55-1024x217.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-300x63.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-768x162.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-1536x325.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-1568x332.png 1568w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55.png 2042w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>크롬 개발자 도구로 확인해본 Spring Boot Actuator의 헬스 체크 결과</figcaption></figure></div>



<p>Spring Boot Actuator는 어떠 기준으로 서버의 헬스 체크를 할까요? 확인하려면 <a href="https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health">Health Information 문서</a>를 살펴보면 됩니다. 해당 정보는 보안에 민감한 요소가 들어있을 수 있어서 퍼블릭하게 접근이 가능해서는 안 됩니다. 저는 로컬에서 간단하게 확인만 해보는 목적으로 <code>application.yml(application.properties)</code> 파일에 <code>management.endpoint.health.show-details: always</code>로 설정한 후에 다시 헬스 체크 결과를 확인했습니다.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="859" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-56-1024x859.png" alt="" class="wp-image-2147" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-56-1024x859.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-300x252.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-768x644.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-1536x1289.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-2048x1718.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-1568x1315.png 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<p><a href="https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health.auto-configured-health-indicators">Auto-configured HealthIndicators</a>(<a href="https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web.html#mvc">WebMVC</a> 전용)와 <a href="https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health.auto-configured-reactive-health-indicators">Auto-configured ReactiveHealthIndicators</a>(<a href="https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web-reactive.html#spring-webflux">Webflux</a> 전용)에 나열된 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java">HealthIndicator</a>(혹은 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java">ReactiveHealthIndicator</a>)는 <a href="https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/using.html#using.auto-configuration">Spring Boot Auto Configuration</a>에 의해 자동으로 활성화되는데 관련된 의존성이 존재할 때만 활성화 되는 것들도 있습니다. 예를 들어, <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java">DataSourceHealthIndicator</a>는 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthContributorAutoConfiguration.java">DataSourceHealthContributorAutoConfiguration</a>에 의해 설정되는데 <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/">Spring Data JPA</a> 같이 DataSource를 사용하는 의존성을 추가했을 때 활성화됩니다.</p>



<p>그럼 코드레벨에서 각 (Reactive)<code>HealthIndicator</code>들이 어떻게 사용되는지 보겠습니다.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="580" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-57-1024x580.png" alt="" class="wp-image-2148" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-57-1024x580.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-300x170.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-768x435.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-1536x870.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-2048x1160.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-1568x888.png 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure></div>



<p>먼저 <code>/actuator/health</code>에 접속한 뒤에 브레이크 포인트를 걸고 디버그 모드로 살펴보면 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointSupport.java#L155-L161">HealthEndpointSupport 클래스의 getAggregateContribution 메서드</a>에서 각 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java">HealthContributor</a>(혹은 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthContributor.java">ReactiveHealthContributor</a>)를 순회하면서 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointWebExtension.java#L92-L95">헬스 체크하는 코드</a>를 보실 수 있습니다. (헬스 체크하는 코드에 있는 HealthIndicator 인터페이스는HealthContributor 인터페이스를 상속받았습니다.)</p>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="457" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-58-1024x457.png" alt="" class="wp-image-2149" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-58-1024x457.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-300x134.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-768x343.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-1536x686.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-2048x914.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-1568x700.png 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p><a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointSupport.java#L193-L202">HealthEndpointSupport 클래스의 getCompositeHealth 메서드</a>에서는 각 HealthIndicator로부터 수집한 상태를 바탕으로 현재 서버의 상태를 진단합니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="CSS" data-shcb-language-slug="css"><link rel="stylesheet" id="syntax-highlighting-code-block-css" href="https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1" media="all"/><style>.wp-block-code {
	border: 0;
	padding: 0;
}

.wp-block-code > div {
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}
</style><div><code class="hljs language-css"><span class="hljs-keyword">@Override</span>
public Status getAggregateStatus(Set&lt;Status&gt; statuses) {
    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">statuses</span><span class="hljs-selector-class">.stream</span>()<span class="hljs-selector-class">.filter</span>(<span class="hljs-selector-tag">this</span><span class="hljs-selector-pseudo">::contains).min(this.comparator).orElse(Status.UNKNOWN)</span>;
}</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre>

<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment">/**
 * {<span class="hljs-doctag">@link</span> Comparator} used to order {<span class="hljs-doctag">@link</span> Status}.
 */</span>
<span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StatusComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Status</span>&gt; </span>{

    @Override
    <span class="hljs-keyword">public</span> int compare(Status s1, Status s2) {
        <span class="hljs-keyword">List</span>&lt;String&gt; order = SimpleStatusAggregator.this.order;
        int i1 = order.indexOf(getUniformCode(s1.getCode()));
        int i2 = order.indexOf(getUniformCode(s2.getCode()));
        <span class="hljs-keyword">return</span> (i1 &lt; i2) ? <span class="hljs-number">-1</span> : (i1 != i2) ? <span class="hljs-number">1</span> : s1.getCode().compareTo(s2.getCode());
    }

}</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p><a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L73-L76">SimpleStatusAggregator의 getAggregateStatus 메서드</a>에서는 각 상태를 수집해서 하나의 Status로 반환하고 있는데 이 때 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L100-L113">StatusComparator</a>가 사용됩니다.</p>


<pre class="wp-block-code"><div><code class="hljs">defaultOrder.add(Status.DOWN.getCode());
defaultOrder.add(Status.OUT_OF_SERVICE.getCode());
defaultOrder.add(Status.UP.getCode());
defaultOrder.add(Status.UNKNOWN.getCode());
DEFAULT_ORDER = Collections.unmodifiableList(getUniformCodes(defaultOrder.stream()));</code></div></pre>


<p>이 때 가장 중요한 것은 Status의 순서인데 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L42-L50">SimpleStatusAggragtor의 static 생성자 블럭</a>을 보게되면 위와 같은 순서로 추가하고 있고,</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript">public SimpleStatusAggregator() {
    <span class="hljs-keyword">this</span>.order = DEFAULT_ORDER;
}</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>별도의 순서를 주지 않은 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L56-L58">기본 생성자</a>는 <code>defaultOrder</code>에 추가한 순서를 사용하는 것을 볼 수 있습니다.</p>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="754" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-59-1024x754.png" alt="" class="wp-image-2150" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-59-1024x754.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-300x221.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-768x565.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-1536x1131.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-2048x1507.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-1568x1154.png 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p><code>getAggregateStatus</code>는 <code>Status</code> 중에 가장 순서가 빠른(오름차순) 것 하나를 반환하게 되어있기 때문에 만약에 <code>Down</code>을 반환한 <code>HealthIndicator</code>가 하나라도 존재하면 서비스의 상태를 <code>Down</code>으로 생각해서 <code>503</code>을 반환하게 됩니다.</p>



<h2>헬스 체크에서 조심해야 하는 점</h2>



<p>Spring Boot Actuator 헬스 체크의 동작원리를 잘 모르고 사용하면 일어날 수 있는 문제를 설명하겠습니다.</p>



<h3>1. 의도치 않은 장애 발생</h3>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="556" height="288" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-60.png" alt="" class="wp-image-2151" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-60.png 556w, https://toss.tech/wp-content/uploads/2023/04/Untitled-60-300x155.png 300w" sizes="(max-width: 556px) 100vw, 556px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>각 서버에서는 서비스를 제공하는 서비스 DB와 데이터를 분석하는 로그 DB가 있다고 가정하겠습니다. 그리고 로그 DB에 장애가 나면 로그 DB에 적재하는 작업은 별도의 스레드에서 비동기로 처리하도록 작업을 해놨다고 가정하겠습니다.로그 데이터 저장이 불가능하더라도 실시간 서비스에는 문제가 없도록 하기 위해서죠.</p>



<p>이 때 만약 로그 DB에 작업을 해야해서 순단이 발생하거나 접속에 문제가 생긴다면 어떻게 될까요? 아래 정답을 확인하기 전에 1분 동안 한 번 생각해보시길 바랍니다.</p>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="556" height="288" src="https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-61.png" alt="" class="wp-image-2152" srcSet="https://toss.tech/wp-content/uploads/2023/04/Untitled-61.png 556w, https://toss.tech/wp-content/uploads/2023/04/Untitled-61-300x155.png 300w" sizes="(max-width: 556px) 100vw, 556px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>위에 Spring Boot Actuator의 헬스 체크는 여러 <code>HealthIndicator</code>가 수집한 상태를 토대로 서비스의 상태를 판단한다고 말씀드렸습니다. 그 순서를 차근차근 설명해보겠습니다.</p>



<ol><li><code>RoutingDataSourceHealthContributor</code>에 의해 여러 DataSource의 헬스를 체크합니다.<ol><li><code>DataSourceHealthIndicator</code>에 의해 서비스 DB의 상태를 체크했을 때는 <code>UP</code>이 반환됩니다.</li><li><code>DataSourceHealthIndicator</code>에 의해 로그 DB의 상태를 체크했을 때는 <code>DOWN</code>이 반환됩니다.</li></ol></li><li>수집한 상태들은 <code>SimpleStatusAggregator</code>에 의해 서비스 상태를 판단하게 되는데 아무런 순서 설정을 하지 않았으면 DOWN인 게 하나라도 있다면 <code>DOWN</code>이 반환됩니다.</li><li>서비스의 상태가 <code>DOWN</code>(<code>503</code>)으로 판단됐기 때문에 로드 밸런서에서는 서버로 트래픽을 보내지 않게 됩니다.</li><li>서비스 DB에 문제가 없음에도 불구하고 클라이언트의 요청은 처리되지 않고 장애가 발생합니다.</li></ol>



<p>우리는 분명 최대한 높은 가용성을 보장하기 위해 로그 DB의 장애가 전파되지 않도록 격리했음에도 불구하고 장애가 발생할 수 있습니다. 이를 해결하기 위해서는</p>



<ol><li>Spring Boot Actuator의 헬스 체크가 아닌 직접 헬스 체크 API를 구현할 수도 있습니다.</li><li><code>HealthIndicator</code> 중에 헬스 체크에 영향을 끼치지 않길 희망하는 것들은 비활성화 시킨다거나(DB를 예로 들자면 <code>management.health.db.enabled: false</code>(기본값 <code>true</code>)로 설정한다거나)</li><li>문제가 되는 <code>HealthIndicator</code> 빈을 직접 생성해서 Auto Configuration의 동작을 오버라이딩 하는 방법 등등이 있습니다.</li></ol>



<p>다만 헬스 체크에 이런 저런 로직들이 들어간다는 것은 일반적으로 예측 가능하지 못할 수 있으므로 팀 내에 꼭 공유가 잘 되어야할 것입니다.</p>



<h3>2. 트러블 슈팅의 지연</h3>



<blockquote class="wp-block-quote"><p>비슷한 상황으로, 예전에 API 서버에서 외부 의존성 중에 ES만 죽었는데, API 서버가 죽었다고 판단돼서 DOWN이 된적이 있었어요. 헬스 체크에서 detail 옵션을 키면, 상세하게 쭉 나오더라고요. 당시에 LB 통해서 접근이 안 됐는데, WAS는 개별로 접근했을 때는 문제가 없어 보여서 트러블 슈팅이 늦어졌었습니다.</p></blockquote>



<p>이는 실제 사내에서 비슷한 상황이 발생했을 때 트러블 슈팅이 지연된 사례입니다. Spring Boot Actuator 헬스체크의 동작원리를 정확히 이해했다면 ES(Elasticsearch) 서버가 죽었을 때 해당 서버의 헬스체크도 같이 죽게 된다는 걸 예측할 수 있습니다. (<a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestClientHealthIndicator.java">ElasticsearchRestClientHealthIndicator</a> 혹은 <a href="https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/data/elasticsearch/ElasticsearchReactiveHealthIndicator.java">ElasticsearchReactiveHealthIndicator</a>가 ES 서버의 헬스체크를 해서 헬스체크 API 응답에 전체적으로 영향을 끼치기 때문에)</p>



<p>하지만 헬스체크의 동작원리를 잘 모르면 우리가 장애를 격리했다고 생각한 시스템(위의 상황에서는 ES)에만 문제가 있는데 왜 장애가 발생하는지, 왜 도메인을 통해서 접근하면 접근이 안 되는지 상황 파악이 안 될 수 있습니다. 서버는 정상적으로 살아있고 부하도 없는 상황이라면 헬스 체크 API를 호출할 생각도 못 하고, 로드 밸런서의 버그인지부터 의심을 할 수도 있습니다. 이렇게 엉뚱한 포인트를 의심하게 되면 장애 상황은 계속 되고, 서버를 재시작해도 근본적인 문제를 해결(위 상황에서는 ES 서버의 복구)하기 전까지는 여전히 헬스 체크에 실패할테니 장시간 장애가 지속될 수도 있습니다.</p>



<p>결국 각 서버 인스턴스마다 직접 헬스 체크 API를 호출해서 정상 응답을 받는지 확인해봐야하는데 여기까지 사고의 흐름이 다다르는데 너무 많은 시간 소요와 불필요한 리소스 낭비들을 초래하게 됩니다.</p>



<h2>마치며</h2>



<p>평상시에는 헬스 체크하면 <strong>그냥 <code>200 OK</code>만 응답하는 정말 심플한 API</strong> 수준으로만 생각하고 큰 신경도 쓰지 않았습니다. 근데 사소한 것에 한 번 데인 뒤로부터는 개발자가 왜 호기심이 많아야하는지 한 번 더 깨닫게 되었습니다. 그냥 단순히 돌아만가는 코드가 아닌 이 코드가 왜 그렇게 돌아가는지, 우리가 왜 이 기술을 선택하게 된 것인지, 끊임없이 고민하고 탐구하기 위해서는 강력한 호기심이 동기부여가 되기 때문입니다. 이러한 고민을 미리했다면 장애 상황을 미연에 방지할 수 있고, 장애 발생 이후에라도 이슈 분석을 통해 트러블 슈팅 능력도 크게 향상된다는 것을 다시 한번 깨닫게 되는 소중한 경험이었습니다.</p>



<h2>참고 링크</h2>



<ul><li><a href="https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator">Spring Boot Actuator Docs</a></li><li><a href="http://forward.nhnent.com/hands-on-labs/java.spring-boot-actuator/06-health.html">NHN Forward spring-boot-actuator documentation</a></li></ul>
</div></div><style data-emotion="css auig7l">.css-auig7l{margin-top:96px;}</style><style data-emotion="css x7fajo">.css-x7fajo{margin-top:96px;}.css-x7fajo>*:not(style)~*:not(style){margin-left:24px;}</style><style data-emotion="css 6rfvv8">.css-6rfvv8{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;margin-top:96px;}.css-6rfvv8>*:not(style)~*:not(style){margin-left:24px;}</style><div class="css-6rfvv8"><style data-emotion="css 1u8jkqx">.css-1u8jkqx{display:grid;grid-template-columns:min-content auto;grid-column-gap:8px;}</style><button class="p-button p-button--primary p-button--inline p-button--weak p-button--default p-button--has-icon padding--base css-1u8jkqx" type="button" aria-disabled="false"><span class="icon p-icon icon--colored p-icon--colored" aria-hidden="true" role="presentation" style="height:16px;width:16px;min-width:16px;color:#3182f6"></span>아티클 공유하기</button></div></article><style data-emotion="css 1lsuzal">.css-1lsuzal{margin-top:100px;}.css-1lsuzal::before{content:'';position:absolute;width:100%;height:1px;left:0;border-bottom:1px solid #e5e8eb;}</style><div class="css-1lsuzal e132k2571"><style data-emotion="css 1ympfnp">.css-1ympfnp{display:inline-block;width:100%;font-size:20px;margin:34px 0 40px 0;}</style><span class="typography typography--h3 typography--bold color--grey800 css-1ympfnp e132k2570">이어지는 글</span><style data-emotion="css vivlm7">.css-vivlm7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;margin-bottom:40px;}.css-vivlm7:last-of-type{margin-bottom:0px;}.css-vivlm7:hover .egyklng4{color:#3182f6;}</style><div class="css-vivlm7 egyklng3"><style data-emotion="css bc0lqn">.css-bc0lqn{width:80px;height:80px;margin-right:20px;border-radius:12px;object-fit:cover;}@media (max-width: 700px){.css-bc0lqn{width:64px;height:64px;}}</style><img srcSet="https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w" class="css-bc0lqn egyklng2"/><style data-emotion="css 1fttcpj">.css-1fttcpj{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}</style><div class="css-1fttcpj egyklng1"><style data-emotion="css p4blj2">.css-p4blj2{font-size:24px;margin-bottom:4px;word-break:keep-all;line-height:1.4;overflow-wrap:break-word;-webkit-transition:color 0.3s ease;transition:color 0.3s ease;-webkit-line-clamp:2;display:block;}@media (max-width: 700px){.css-p4blj2{font-size:18px;-webkit-line-clamp:2;}}</style><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">ESLint와 AST로 코드 퀄리티 높이기</span><style data-emotion="css 1jxhn1e">.css-1jxhn1e{color:#8b95a1;}</style><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 03. 31</span></div></div><div class="css-vivlm7 egyklng3"><img srcSet="https://toss.tech/wp-content/uploads/2023/03/00017-3291509353-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/00017-3291509353-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/00017-3291509353-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/00017-3291509353.png 1200w" class="css-bc0lqn egyklng2"/><div class="css-1fttcpj egyklng1"><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">tosspayments-restdocs: 선언형 문서 작성 라이브러리</span><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 03. 22</span></div></div></div></div></div><style data-emotion="css 1d2vuhc">.css-1d2vuhc{padding:60px 24px;word-break:keep-all;overflow-wrap:break-word;background:rgba(2,9,19,0.91);}@media (max-width: 700px){.css-1d2vuhc{padding-top:24px;}}</style><section class="css-1d2vuhc eqrolup4"><style data-emotion="css yf0lpd">.css-yf0lpd{display:grid;grid-template-columns:3fr 7fr;grid-column-gap:20px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;max-width:640px;margin:0 auto;content-visibility:auto;}@media (max-width: 700px){.css-yf0lpd{grid-template-rows:min-content auto;grid-template-columns:1fr;grid-row-gap:24px;}}</style><div class="css-yf0lpd eqrolup2"><style data-emotion="css 1d33yk5">.css-1d33yk5{width:100%;}@media (max-width: 700px){.css-1d33yk5{width:90px;}}</style><img src="https://static.toss.im/3d/website_code_blue_alpha.png" alt="" class="css-1d33yk5 eqrolup3"/><style data-emotion="css 1gb2pj4">.css-1gb2pj4>*:not(style)~*:not(style){margin-top:24px;}</style><style data-emotion="css 7xmgw5">.css-7xmgw5{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-7xmgw5>*:not(style)~*:not(style){margin-top:24px;}</style><div class="css-7xmgw5"><style data-emotion="css 1pbuvpm">.css-1pbuvpm>*:not(style)~*:not(style){margin-top:8px;}</style><style data-emotion="css nbpfuv">.css-nbpfuv{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-nbpfuv>*:not(style)~*:not(style){margin-top:8px;}</style><div class="css-nbpfuv"><style data-emotion="css 19gu4b8">.css-19gu4b8{margin:0;font-size:26px;line-height:1.4;color:#ffffff;}@media (max-width: 700px){.css-19gu4b8{font-size:20px;}}</style><h3 class="css-19gu4b8 eqrolup1">토스팀이 만드는 수많은 혁신의 순간들</h3><style data-emotion="css shfxsq">.css-shfxsq{font-size:17px;line-height:1.5;color:#e5e8eb;}@media (max-width: 700px){.css-shfxsq{font-size:16px;}}</style><div class="css-shfxsq eqrolup0">당신과 함께 만들고 싶습니다.<br/>지금, 토스팀에 합류하세요.</div></div><a class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s" aria-disabled="false" href="https://toss.im/career/jobs?gh_src=38b73b7a3us">채용 중인 공고 보기</a></div></div></section><footer class="p-footer p-footer--light"><div class="p-footer__inner"><div class="p-footer__site-group-list"><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스테크</div></li><li class="p-footer__site-group-item"><a href="mailto:techblog@toss.im">의견 보내기</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스</div></li><li class="p-footer__site-group-item"><a href="https://toss.im">홈페이지</a></li><li class="p-footer__site-group-item"><a href="https://team.toss.im">회사 소개</a></li><li class="p-footer__site-group-item"><a href="https://toss.im/career">채용</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">고객센터</div></li><li class="p-footer__site-group-item"><a href="tel:1599-4905">전화: 1599-4905 (24시간 연중무휴)</a></li><li class="p-footer__site-group-item"><a href="mailto:support.toss.im">이메일: support@toss.im</a></li><li class="p-footer__site-group-item"><a href="https://goto.kakao.com/@toss">카카오톡: @toss</a></li></ul></div><address class="p-footer__address"><strong class="p-footer__address__company-name">㈜비바리퍼블리카</strong>Copyright © Viva Republica, Inc. All Rights Reserved.</address><ul class="p-footer__term-wrapper"></ul><ul class="p-footer__social-list"><li class="p-footer__social-list-item"><a aria-label="Toss Facebook" target="_blank" href="https://www.facebook.com/toss.revolution"><img src="https://static.toss.im/assets/homepage/safety/icn-facebook.svg" alt="Toss Facebook"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss blog" target="_blank" href="https://blog.toss.im"><img src="https://static.toss.im/assets/homepage/safety/icn-blog.svg" alt="Toss blog"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Naver Post" target="_blank" href="https://post.naver.com/tossblog"><img src="https://static.toss.im/assets/homepage/safety/icn-naver.svg" alt="Toss Naver Post"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Twitter" target="_blank" href="https://twitter.com/toss__official"><img src="https://static.toss.im/assets/homepage/safety/icn-twitter.svg" alt="Toss Twitter"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Instagram" target="_blank" href="https://www.instagram.com/toss.im/"><img src="https://static.toss.im/assets/homepage/safety/icn-instagram.svg" alt="Toss Instagram"/></a></li></ul></div></footer><div id="tds-pc__portal-container"></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사","content":"\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"529\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-46-1024x529.png\" alt=\"\" class=\"wp-image-2138\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-46-1024x529.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-300x155.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-768x397.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-1536x794.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46-1568x810.png 1568w, https://toss.tech/wp-content/uploads/2023/04/Untitled-46.png 1660w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e뭐든 알고 쓰는 게 참 중요한 것 같습니다. 단순히 “\u003cstrong\u003e지금은 잘 돌아가니까 문제 없다\u003c/strong\u003e”는 접근은 문제가 발생하기 전까지는 문제를 방치하기 마련입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e사용하는 기술이나 구조에 대해 끊임없이 질문을 던지고 탐구하는 과정은 \u003ca href=\"https://blog.toss.im/article/core-values-are-evolving\"\u003e토스팀 코어밸류 3.0\u003c/a\u003e 중 하나인 \u003cstrong\u003eQuestion Every Assumption, 모든 기본 가정에 근원적 물음을 제기한다\u003c/strong\u003e에도 부합하는 사례인것 같습니다. 이번 포스트에서는 제가 개발 과정에서 헬스 체크를 별다른 생각 없이 \u003ca href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html\"\u003eSpring Boot Actuator\u003c/a\u003e가 제공하는 기능을 사용하면서 겪은 이슈를 간략하게 설명해보겠습니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e들어가기에 앞서\u003c/h2\u003e\n\n\n\n\u003cp\u003e이 포스트는 작성 시점 기준에서 최신 Spring Boot GA(General Availability) 버전인 3.0.5 버전을 기준으로 설명합니다. 해당 버전의 하위/상위 버전에서는 기능이 미묘하게 다르게 동작할 수 있습니다. 2.x 버전에서도 큰 맥락에서는 동일한 동작을 보장하리라 추측되지만 본인이 사용하는 버전에 해당하는 자세한 내용을 찾아보시길 권장합니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e헬스 체크란?\u003c/h2\u003e\n\n\n\n\u003cp\u003e서비스의 고가용성(HA, High Availability), 고성능을 위한 부하 분산 등의 이유로 우리는 서버의 이중화(혹은 그 이상)를 하고, 앞에서 어떤 서버로 요청을 보낼지 라우팅 역할을 하는 로드 밸런서를 둡니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"321\" height=\"212\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-47.png\" alt=\"\" class=\"wp-image-2139\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-47.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-47-300x198.png 300w\" sizes=\"(max-width: 321px) 100vw, 321px\" /\u003e\u003cfigcaption\u003e로드 밸런서가 적절히 부하를 분산하여 A/B 서버 중 한 대에게 클라이언트의 요청을 보냅니다.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e하지만 아래와 같이 서버 한 대가 서비스 불가 상태라면 어떻게 해야할까요? 해당 서버에 요청이 들어가야할까요?\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"321\" height=\"212\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-48.png\" alt=\"\" class=\"wp-image-2140\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-48.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-48-300x198.png 300w\" sizes=\"(max-width: 321px) 100vw, 321px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e혹은 대량의 트래픽이 들어올 것을 대비하는 등등의 이유로 서버를 증설해야 하는데 해당 서버가 관련된 소스코드를 로딩하고 있다면 어떻게 해야할까요? 이 때도 마찬가지로 해당 서버에 요청이 들어가야할까요?\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"321\" height=\"342\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-49.png\" alt=\"\" class=\"wp-image-2141\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-49.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-49-282x300.png 282w\" sizes=\"(max-width: 321px) 100vw, 321px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e두 케이스 모두 해당 서버로 요청을 보내면 안 됩니다.\u003c/strong\u003e 정상적인 서비스가 불가능해서 클라이언트의 요청을 수행할 수 없습니다. 장애를 유발하거나 해당 서버의 부하를 크게 증가시켜 오히려 장애를 더 심각하게 만들 수도 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e따라서 로드 밸런서에서는 각 서버의 헬스 체크 API를 호출해서 해당 서버가 현재 서비스 가능한 상태인지 아닌지 주기적으로 점검합니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"201\" height=\"212\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-50.png\" alt=\"\" class=\"wp-image-2142\"/\u003e\u003cfigcaption\u003e헬스 체크 API 경로는 커스텀하게 설정 가능합니다.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e헬스 체크에서 서버에 문제가 발견되면 로드 밸런서는 해당 서버로 요청을 보내지 않게 됩니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"321\" height=\"212\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-51.png\" alt=\"\" class=\"wp-image-2143\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-51.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-51-300x198.png 300w\" sizes=\"(max-width: 321px) 100vw, 321px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"321\" height=\"322\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-52.png\" alt=\"\" class=\"wp-image-2144\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-52.png 321w, https://toss.tech/wp-content/uploads/2023/04/Untitled-52-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-52-150x150.png 150w\" sizes=\"(max-width: 321px) 100vw, 321px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e헬스 체크는 정상적으로 서비스가 가능한 서버에만 트래픽을 보내서 서비스의 고가용성을 확보\u003c/strong\u003e하는 데 도움됩니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003eSpring Boot Actuator의 헬스 체크\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html\"\u003eSpring Boot Acutator\u003c/a\u003e를 의존성으로 추가하면 기본적으로 헬스 체크 엔드포인트가 활성화됩니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"189\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-54-1024x189.png\" alt=\"\" class=\"wp-image-2145\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-54-1024x189.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-300x55.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-768x142.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-1536x283.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-2048x378.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-54-1568x289.png 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eSpring Boot 3.x 기준으로 헬스 체크 엔드포인트는 \u003ccode\u003e/actuator/health\u003c/code\u003e이고, 설정을 바꾸지 않아도 해당 엔드포인트로 접속하면 HTTP 200 상태 코드와 해당 서버의 상태가 Response Body로 응답됩니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"217\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-55-1024x217.png\" alt=\"\" class=\"wp-image-2146\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-55-1024x217.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-300x63.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-768x162.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-1536x325.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55-1568x332.png 1568w, https://toss.tech/wp-content/uploads/2023/04/Untitled-55.png 2042w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003cfigcaption\u003e크롬 개발자 도구로 확인해본 Spring Boot Actuator의 헬스 체크 결과\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eSpring Boot Actuator는 어떠 기준으로 서버의 헬스 체크를 할까요? 확인하려면 \u003ca href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health\"\u003eHealth Information 문서\u003c/a\u003e를 살펴보면 됩니다. 해당 정보는 보안에 민감한 요소가 들어있을 수 있어서 퍼블릭하게 접근이 가능해서는 안 됩니다. 저는 로컬에서 간단하게 확인만 해보는 목적으로 \u003ccode\u003eapplication.yml(application.properties)\u003c/code\u003e 파일에 \u003ccode\u003emanagement.endpoint.health.show-details: always\u003c/code\u003e로 설정한 후에 다시 헬스 체크 결과를 확인했습니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"859\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-56-1024x859.png\" alt=\"\" class=\"wp-image-2147\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-56-1024x859.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-300x252.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-768x644.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-1536x1289.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-2048x1718.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-56-1568x1315.png 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health.auto-configured-health-indicators\"\u003eAuto-configured HealthIndicators\u003c/a\u003e(\u003ca href=\"https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web.html#mvc\"\u003eWebMVC\u003c/a\u003e 전용)와 \u003ca href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health.auto-configured-reactive-health-indicators\"\u003eAuto-configured ReactiveHealthIndicators\u003c/a\u003e(\u003ca href=\"https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web-reactive.html#spring-webflux\"\u003eWebflux\u003c/a\u003e 전용)에 나열된 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java\"\u003eHealthIndicator\u003c/a\u003e(혹은 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java\"\u003eReactiveHealthIndicator\u003c/a\u003e)는 \u003ca href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/using.html#using.auto-configuration\"\u003eSpring Boot Auto Configuration\u003c/a\u003e에 의해 자동으로 활성화되는데 관련된 의존성이 존재할 때만 활성화 되는 것들도 있습니다. 예를 들어, \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java\"\u003eDataSourceHealthIndicator\u003c/a\u003e는 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthContributorAutoConfiguration.java\"\u003eDataSourceHealthContributorAutoConfiguration\u003c/a\u003e에 의해 설정되는데 \u003ca href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/\"\u003eSpring Data JPA\u003c/a\u003e 같이 DataSource를 사용하는 의존성을 추가했을 때 활성화됩니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e그럼 코드레벨에서 각 (Reactive)\u003ccode\u003eHealthIndicator\u003c/code\u003e들이 어떻게 사용되는지 보겠습니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-image\"\u003e\u003cfigure class=\"aligncenter size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"580\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-57-1024x580.png\" alt=\"\" class=\"wp-image-2148\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-57-1024x580.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-300x170.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-768x435.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-1536x870.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-2048x1160.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-57-1568x888.png 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e먼저 \u003ccode\u003e/actuator/health\u003c/code\u003e에 접속한 뒤에 브레이크 포인트를 걸고 디버그 모드로 살펴보면 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointSupport.java#L155-L161\"\u003eHealthEndpointSupport 클래스의 getAggregateContribution 메서드\u003c/a\u003e에서 각 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java\"\u003eHealthContributor\u003c/a\u003e(혹은 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthContributor.java\"\u003eReactiveHealthContributor\u003c/a\u003e)를 순회하면서 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointWebExtension.java#L92-L95\"\u003e헬스 체크하는 코드\u003c/a\u003e를 보실 수 있습니다. (헬스 체크하는 코드에 있는 HealthIndicator 인터페이스는HealthContributor 인터페이스를 상속받았습니다.)\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"457\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-58-1024x457.png\" alt=\"\" class=\"wp-image-2149\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-58-1024x457.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-300x134.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-768x343.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-1536x686.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-2048x914.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-58-1568x700.png 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointSupport.java#L193-L202\"\u003eHealthEndpointSupport 클래스의 getCompositeHealth 메서드\u003c/a\u003e에서는 각 HealthIndicator로부터 수집한 상태를 바탕으로 현재 서버의 상태를 진단합니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"\u003e\u003clink rel='stylesheet' id='syntax-highlighting-code-block-css'  href='https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1' media='all' /\u003e\u003cstyle\u003e.wp-block-code {\n\tborder: 0;\n\tpadding: 0;\n}\n\n.wp-block-code \u003e div {\n\toverflow: auto;\n}\n\n.shcb-language {\n\tborder: 0;\n\tclip: rect(1px, 1px, 1px, 1px);\n\t-webkit-clip-path: inset(50%);\n\tclip-path: inset(50%);\n\theight: 1px;\n\tmargin: -1px;\n\toverflow: hidden;\n\tpadding: 0;\n\tposition: absolute;\n\twidth: 1px;\n\tword-wrap: normal;\n\tword-break: normal;\n}\n\n.hljs {\n\tbox-sizing: border-box;\n}\n\n.hljs.shcb-code-table {\n\tdisplay: table;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table \u003e .shcb-loc {\n\tcolor: inherit;\n\tdisplay: table-row;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table .shcb-loc \u003e span {\n\tdisplay: table-cell;\n}\n\n.wp-block-code code.hljs:not(.shcb-wrap-lines) {\n\twhite-space: pre;\n}\n\n.wp-block-code code.hljs.shcb-wrap-lines {\n\twhite-space: pre-wrap;\n}\n\n.hljs.shcb-line-numbers {\n\tborder-spacing: 0;\n\tcounter-reset: line;\n}\n\n.hljs.shcb-line-numbers \u003e .shcb-loc {\n\tcounter-increment: line;\n}\n\n.hljs.shcb-line-numbers .shcb-loc \u003e span {\n\tpadding-left: 0.75em;\n}\n\n.hljs.shcb-line-numbers .shcb-loc::before {\n\tborder-right: 1px solid #ddd;\n\tcontent: counter(line);\n\tdisplay: table-cell;\n\tpadding: 0 0.75em;\n\ttext-align: right;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n\twhite-space: nowrap;\n\twidth: 1%;\n}\n\u003c/style\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-css\"\u003e\u003cspan class=\"hljs-keyword\"\u003e@Override\u003c/span\u003e\npublic Status getAggregateStatus(Set\u0026lt;Status\u0026gt; statuses) {\n    \u003cspan class=\"hljs-selector-tag\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-selector-tag\"\u003estatuses\u003c/span\u003e\u003cspan class=\"hljs-selector-class\"\u003e.stream\u003c/span\u003e()\u003cspan class=\"hljs-selector-class\"\u003e.filter\u003c/span\u003e(\u003cspan class=\"hljs-selector-tag\"\u003ethis\u003c/span\u003e\u003cspan class=\"hljs-selector-pseudo\"\u003e::contains).min(this.comparator).orElse(Status.UNKNOWN)\u003c/span\u003e;\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-1\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eCSS\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ecss\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-php\"\u003e\u003cspan class=\"hljs-comment\"\u003e/**\n * {\u003cspan class=\"hljs-doctag\"\u003e@link\u003c/span\u003e Comparator} used to order {\u003cspan class=\"hljs-doctag\"\u003e@link\u003c/span\u003e Status}.\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStatusComparator\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eComparator\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eStatus\u003c/span\u003e\u0026gt; \u003c/span\u003e{\n\n    @Override\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e int compare(Status s1, Status s2) {\n        \u003cspan class=\"hljs-keyword\"\u003eList\u003c/span\u003e\u0026lt;String\u0026gt; order = SimpleStatusAggregator.this.order;\n        int i1 = order.indexOf(getUniformCode(s1.getCode()));\n        int i2 = order.indexOf(getUniformCode(s2.getCode()));\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (i1 \u0026lt; i2) ? \u003cspan class=\"hljs-number\"\u003e-1\u003c/span\u003e : (i1 != i2) ? \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e : s1.getCode().compareTo(s2.getCode());\n    }\n\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-2\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003ePHP\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ephp\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L73-L76\"\u003eSimpleStatusAggregator의 getAggregateStatus 메서드\u003c/a\u003e에서는 각 상태를 수집해서 하나의 Status로 반환하고 있는데 이 때 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L100-L113\"\u003eStatusComparator\u003c/a\u003e가 사용됩니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs\"\u003edefaultOrder.add(Status.DOWN.getCode());\ndefaultOrder.add(Status.OUT_OF_SERVICE.getCode());\ndefaultOrder.add(Status.UP.getCode());\ndefaultOrder.add(Status.UNKNOWN.getCode());\nDEFAULT_ORDER = Collections.unmodifiableList(getUniformCodes(defaultOrder.stream()));\u003c/code\u003e\u003c/div\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e이 때 가장 중요한 것은 Status의 순서인데 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L42-L50\"\u003eSimpleStatusAggragtor의 static 생성자 블럭\u003c/a\u003e을 보게되면 위와 같은 순서로 추가하고 있고,\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-javascript\"\u003epublic SimpleStatusAggregator() {\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.order = DEFAULT_ORDER;\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-3\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eJavaScript\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ejavascript\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e별도의 순서를 주지 않은 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L56-L58\"\u003e기본 생성자\u003c/a\u003e는 \u003ccode\u003edefaultOrder\u003c/code\u003e에 추가한 순서를 사용하는 것을 볼 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"754\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-59-1024x754.png\" alt=\"\" class=\"wp-image-2150\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-59-1024x754.png 1024w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-300x221.png 300w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-768x565.png 768w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-1536x1131.png 1536w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-2048x1507.png 2048w, https://toss.tech/wp-content/uploads/2023/04/Untitled-59-1568x1154.png 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003egetAggregateStatus\u003c/code\u003e는 \u003ccode\u003eStatus\u003c/code\u003e 중에 가장 순서가 빠른(오름차순) 것 하나를 반환하게 되어있기 때문에 만약에 \u003ccode\u003eDown\u003c/code\u003e을 반환한 \u003ccode\u003eHealthIndicator\u003c/code\u003e가 하나라도 존재하면 서비스의 상태를 \u003ccode\u003eDown\u003c/code\u003e으로 생각해서 \u003ccode\u003e503\u003c/code\u003e을 반환하게 됩니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e헬스 체크에서 조심해야 하는 점\u003c/h2\u003e\n\n\n\n\u003cp\u003eSpring Boot Actuator 헬스 체크의 동작원리를 잘 모르고 사용하면 일어날 수 있는 문제를 설명하겠습니다.\u003c/p\u003e\n\n\n\n\u003ch3\u003e1. 의도치 않은 장애 발생\u003c/h3\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"556\" height=\"288\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-60.png\" alt=\"\" class=\"wp-image-2151\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-60.png 556w, https://toss.tech/wp-content/uploads/2023/04/Untitled-60-300x155.png 300w\" sizes=\"(max-width: 556px) 100vw, 556px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e각 서버에서는 서비스를 제공하는 서비스 DB와 데이터를 분석하는 로그 DB가 있다고 가정하겠습니다. 그리고 로그 DB에 장애가 나면 로그 DB에 적재하는 작업은 별도의 스레드에서 비동기로 처리하도록 작업을 해놨다고 가정하겠습니다.로그 데이터 저장이 불가능하더라도 실시간 서비스에는 문제가 없도록 하기 위해서죠.\u003c/p\u003e\n\n\n\n\u003cp\u003e이 때 만약 로그 DB에 작업을 해야해서 순단이 발생하거나 접속에 문제가 생긴다면 어떻게 될까요? 아래 정답을 확인하기 전에 1분 동안 한 번 생각해보시길 바랍니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"556\" height=\"288\" src=\"https://wp.toss.tech/wp-content/uploads/2023/04/Untitled-61.png\" alt=\"\" class=\"wp-image-2152\" srcset=\"https://toss.tech/wp-content/uploads/2023/04/Untitled-61.png 556w, https://toss.tech/wp-content/uploads/2023/04/Untitled-61-300x155.png 300w\" sizes=\"(max-width: 556px) 100vw, 556px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e위에 Spring Boot Actuator의 헬스 체크는 여러 \u003ccode\u003eHealthIndicator\u003c/code\u003e가 수집한 상태를 토대로 서비스의 상태를 판단한다고 말씀드렸습니다. 그 순서를 차근차근 설명해보겠습니다.\u003c/p\u003e\n\n\n\n\u003col\u003e\u003cli\u003e\u003ccode\u003eRoutingDataSourceHealthContributor\u003c/code\u003e에 의해 여러 DataSource의 헬스를 체크합니다.\u003col\u003e\u003cli\u003e\u003ccode\u003eDataSourceHealthIndicator\u003c/code\u003e에 의해 서비스 DB의 상태를 체크했을 때는 \u003ccode\u003eUP\u003c/code\u003e이 반환됩니다.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eDataSourceHealthIndicator\u003c/code\u003e에 의해 로그 DB의 상태를 체크했을 때는 \u003ccode\u003eDOWN\u003c/code\u003e이 반환됩니다.\u003c/li\u003e\u003c/ol\u003e\u003c/li\u003e\u003cli\u003e수집한 상태들은 \u003ccode\u003eSimpleStatusAggregator\u003c/code\u003e에 의해 서비스 상태를 판단하게 되는데 아무런 순서 설정을 하지 않았으면 DOWN인 게 하나라도 있다면 \u003ccode\u003eDOWN\u003c/code\u003e이 반환됩니다.\u003c/li\u003e\u003cli\u003e서비스의 상태가 \u003ccode\u003eDOWN\u003c/code\u003e(\u003ccode\u003e503\u003c/code\u003e)으로 판단됐기 때문에 로드 밸런서에서는 서버로 트래픽을 보내지 않게 됩니다.\u003c/li\u003e\u003cli\u003e서비스 DB에 문제가 없음에도 불구하고 클라이언트의 요청은 처리되지 않고 장애가 발생합니다.\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003cp\u003e우리는 분명 최대한 높은 가용성을 보장하기 위해 로그 DB의 장애가 전파되지 않도록 격리했음에도 불구하고 장애가 발생할 수 있습니다. 이를 해결하기 위해서는\u003c/p\u003e\n\n\n\n\u003col\u003e\u003cli\u003eSpring Boot Actuator의 헬스 체크가 아닌 직접 헬스 체크 API를 구현할 수도 있습니다.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eHealthIndicator\u003c/code\u003e 중에 헬스 체크에 영향을 끼치지 않길 희망하는 것들은 비활성화 시킨다거나(DB를 예로 들자면 \u003ccode\u003emanagement.health.db.enabled: false\u003c/code\u003e(기본값 \u003ccode\u003etrue\u003c/code\u003e)로 설정한다거나)\u003c/li\u003e\u003cli\u003e문제가 되는 \u003ccode\u003eHealthIndicator\u003c/code\u003e 빈을 직접 생성해서 Auto Configuration의 동작을 오버라이딩 하는 방법 등등이 있습니다.\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003cp\u003e다만 헬스 체크에 이런 저런 로직들이 들어간다는 것은 일반적으로 예측 가능하지 못할 수 있으므로 팀 내에 꼭 공유가 잘 되어야할 것입니다.\u003c/p\u003e\n\n\n\n\u003ch3\u003e2. 트러블 슈팅의 지연\u003c/h3\u003e\n\n\n\n\u003cblockquote class=\"wp-block-quote\"\u003e\u003cp\u003e비슷한 상황으로, 예전에 API 서버에서 외부 의존성 중에 ES만 죽었는데, API 서버가 죽었다고 판단돼서 DOWN이 된적이 있었어요. 헬스 체크에서 detail 옵션을 키면, 상세하게 쭉 나오더라고요. 당시에 LB 통해서 접근이 안 됐는데, WAS는 개별로 접근했을 때는 문제가 없어 보여서 트러블 슈팅이 늦어졌었습니다.\u003c/p\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e이는 실제 사내에서 비슷한 상황이 발생했을 때 트러블 슈팅이 지연된 사례입니다. Spring Boot Actuator 헬스체크의 동작원리를 정확히 이해했다면 ES(Elasticsearch) 서버가 죽었을 때 해당 서버의 헬스체크도 같이 죽게 된다는 걸 예측할 수 있습니다. (\u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestClientHealthIndicator.java\"\u003eElasticsearchRestClientHealthIndicator\u003c/a\u003e 혹은 \u003ca href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/data/elasticsearch/ElasticsearchReactiveHealthIndicator.java\"\u003eElasticsearchReactiveHealthIndicator\u003c/a\u003e가 ES 서버의 헬스체크를 해서 헬스체크 API 응답에 전체적으로 영향을 끼치기 때문에)\u003c/p\u003e\n\n\n\n\u003cp\u003e하지만 헬스체크의 동작원리를 잘 모르면 우리가 장애를 격리했다고 생각한 시스템(위의 상황에서는 ES)에만 문제가 있는데 왜 장애가 발생하는지, 왜 도메인을 통해서 접근하면 접근이 안 되는지 상황 파악이 안 될 수 있습니다. 서버는 정상적으로 살아있고 부하도 없는 상황이라면 헬스 체크 API를 호출할 생각도 못 하고, 로드 밸런서의 버그인지부터 의심을 할 수도 있습니다. 이렇게 엉뚱한 포인트를 의심하게 되면 장애 상황은 계속 되고, 서버를 재시작해도 근본적인 문제를 해결(위 상황에서는 ES 서버의 복구)하기 전까지는 여전히 헬스 체크에 실패할테니 장시간 장애가 지속될 수도 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e결국 각 서버 인스턴스마다 직접 헬스 체크 API를 호출해서 정상 응답을 받는지 확인해봐야하는데 여기까지 사고의 흐름이 다다르는데 너무 많은 시간 소요와 불필요한 리소스 낭비들을 초래하게 됩니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e마치며\u003c/h2\u003e\n\n\n\n\u003cp\u003e평상시에는 헬스 체크하면 \u003cstrong\u003e그냥 \u003ccode\u003e200 OK\u003c/code\u003e만 응답하는 정말 심플한 API\u003c/strong\u003e 수준으로만 생각하고 큰 신경도 쓰지 않았습니다. 근데 사소한 것에 한 번 데인 뒤로부터는 개발자가 왜 호기심이 많아야하는지 한 번 더 깨닫게 되었습니다. 그냥 단순히 돌아만가는 코드가 아닌 이 코드가 왜 그렇게 돌아가는지, 우리가 왜 이 기술을 선택하게 된 것인지, 끊임없이 고민하고 탐구하기 위해서는 강력한 호기심이 동기부여가 되기 때문입니다. 이러한 고민을 미리했다면 장애 상황을 미연에 방지할 수 있고, 장애 발생 이후에라도 이슈 분석을 통해 트러블 슈팅 능력도 크게 향상된다는 것을 다시 한번 깨닫게 되는 소중한 경험이었습니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e참고 링크\u003c/h2\u003e\n\n\n\n\u003cul\u003e\u003cli\u003e\u003ca href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator\"\u003eSpring Boot Actuator Docs\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://forward.nhnent.com/hands-on-labs/java.spring-boot-actuator/06-health.html\"\u003eNHN Forward spring-boot-actuator documentation\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n","date":"2023-04-01T15:38:57","excerpt":"\u003cp\u003e서버의 상태를 알려주는 헬스 체크에 대해 알고 계시나요? 단순히 200 OK만 내려주겠거니 하고 별로 신경을 안 쓰고 계셨나요? 해당 포스트에서는 Spring Boot Actuaor가 제공해주는 헬스 체크는 어떤 식으로 서버의 상태를 점검하는지, 어떤 부분을 주의하며 사용해야하는지 알아봅니다.\u003c/p\u003e\n","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w"}},"metadata":{"ogBackground":null,"ogImageTitle":null,"ogGenerateImage":null,"recruitTitle":"재미있게 읽으셨나요?","recruitUrl":null,"form1Url":null,"form2Url":null,"formDescription":"좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.","form1Label":"😍","form2Label":"🤔","recruitDescription":null},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}},{"node":{"id":"dGVybTox","name":"Uncategorized"}}]},"author":{"node":{"id":"dXNlcjoxNA==","firstName":"권성","lastName":"양","description":"개발과 조카를 사랑하는 토스페이먼츠 서버개발자 양권성입니다.","avatar":{"url":"https://secure.gravatar.com/avatar/b7c03d670c9c04da8a2374d37ee5dfa7?s=312\u0026d=mm\u0026r=g"},"role":{"role":"Server Developer"}}}},"relatedArticles":[{"title":"ESLint와 AST로 코드 퀄리티 높이기","slug":"improving-code-quality-via-eslint-and-ast","date":"2023-03-31T15:47:53","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}}]}},{"title":"tosspayments-restdocs: 선언형 문서 작성 라이브러리","slug":"tosspayments-restdocs","date":"2023-03-22T14:29:51","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/03/00017-3291509353-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/00017-3291509353-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/00017-3291509353-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/00017-3291509353.png 1200w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}}]}}]},"__N_SSP":true},"page":"/article/[slug]","query":{"slug":"how-to-work-health-check-in-spring-boot-actuaotr"},"buildId":"QqBxegmptuUDYc8oCREsD","assetPrefix":"https://static.toss.im/frontend/toss-tech","runtimeConfig":{"ENV":"live","NODE_ENV":"production","PORT":"3000","ASSET_PREFIX":"https://static.toss.im/frontend/toss-tech","SERVICE":"toss-tech","SENTRY":{"DSN":"https://5eff657ed6ef486fb8af2dc5f9508abd@sentry.io/1242586","PUBLIC_KEY":"5eff657ed6ef486fb8af2dc5f9508abd","RELEASE":"toss-tech_1.0.103","SERVICE":"toss-tech","SERVICE_VERSION":"1.0.103"},"RENDER_TYPE":"ssr"},"isFallback":false,"gssp":true,"customServer":true,"scriptLoader":[]}</script></body></html>