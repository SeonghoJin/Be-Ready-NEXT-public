<!DOCTYPE html><html><head><link rel="stylesheet" href="https://static.toss.im/tds-pc/3.232.0/main.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/rss+xml" href="/rss.xml"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/atom+xml" href="/atom.xml"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/main.css"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/others.css"/><link rel="stylesheet" href="https://static.toss.im/tossface-font/tossface.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/activitystream+json" href="/feed.json"/><meta charSet="UTF-8"/><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover"/><meta name="author" content="Viva Republica"/><link rel="preconnect" href="https://static.toss.im"/><link rel="shortcut icon" href="https://static.toss.im/tds/favicon/favicon.ico"/><link rel="icon" type="image/png" sizes="16x16" href="https://static.toss.im/tds/favicon/favicon-16x16.png"/><link rel="icon" type="image/png" sizes="32x32" href="https://static.toss.im/tds/favicon/favicon-32x32.png"/><link rel="icon" type="image/png" sizes="48x48" href="https://static.toss.im/tds/favicon/favicon-48x48.png"/><link rel="icon" type="image/png" sizes="196x196" href="https://static.toss.im/tds/favicon/favicon-196x196.png"/><link rel="apple-touch-icon" sizes="57x57" href="https://static.toss.im/tds/favicon/apple-touch-icon-57x57.png"/><link rel="apple-touch-icon" sizes="72x72" href="https://static.toss.im/tds/favicon/apple-touch-icon-72x72.png"/><link rel="apple-touch-icon" sizes="114x114" href="https://static.toss.im/tds/favicon/apple-touch-icon-114x114.png"/><link rel="apple-touch-icon" sizes="120x120" href="https://static.toss.im/tds/favicon/apple-touch-icon-120x120.png"/><link rel="apple-touch-icon" sizes="144x144" href="https://static.toss.im/tds/favicon/apple-touch-icon-144x144.png"/><link rel="apple-touch-icon" sizes="152x152" href="https://static.toss.im/tds/favicon/apple-touch-icon-152x152.png"/><meta name="msapplication-TileImage" content="https://static.toss.im/tds/favicon/mstile-144x144.png"/><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-PQ5NV18TH1"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'G-PQ5NV18TH1');</script><script>(function(h,o,t,j,a,r){
    h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
    h._hjSettings={hjid:2399367,hjsv:6};
    a=o.getElementsByTagName('head')[0];
    r=o.createElement('script');r.async=1;
    r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
    a.appendChild(r);
})(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');</script><title>테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기</title><meta name="twitter:creator" content="Viva Republica"/><meta name="twitter:site" content="@Toss_service"/><meta name="twitter:card" content="summary_large_image"/><meta property="og:title" content="테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기"/><meta name="twitter:title" content="테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기"/><meta property="og:description" content="혹시 테스트 코드에서도 의존성을 관리해본 적이 있으실까요? 해당 포스트에서는 Gradle의 java-test-fixtures 플러그인을 사용하여 테스트 의존성 관리를 통해 높은 품질의 테스트 코드를 유지하는 방법을 알아봅니다.
"/><meta name="twitter:description" content="혹시 테스트 코드에서도 의존성을 관리해본 적이 있으실까요? 해당 포스트에서는 Gradle의 java-test-fixtures 플러그인을 사용하여 테스트 의존성 관리를 통해 높은 품질의 테스트 코드를 유지하는 방법을 알아봅니다.
"/><meta property="og:image" content="https://static.toss.im/assets/tech-blog/og-image:/techblog-10-test-code-og.png?v=2"/><meta name="twitter:image" content="https://static.toss.im/assets/tech-blog/og-image:/techblog-10-test-code-og.png?v=2"/><meta name="next-head-count" content="36"/><meta name="next-font-preconnect"/><link rel="preload" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" as="style"/><link rel="stylesheet" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/polyfills-5cd94c89d3acac5f.js"></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/webpack-a37367524f3d9e47.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/framework-5201cf011975c339.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/main-4ffd67ad72332dfe.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/_app-02461bb4136bedab.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/821-c2f4db054c6f6b42.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/935-149f2da2961c2b08.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/article/%5Bslug%5D-bf5a24035d1301de.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_buildManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_ssgManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_middlewareManifest.js" defer=""></script></head><body><div id="__next"><style data-emotion="css-global ubpbb5">html,body{padding:0;margin:0;font-family:'Toss Product Sans';}button{font-family:'Toss Product Sans';}p{margin:0;}</style><style data-emotion="css kcwxxw">.css-kcwxxw{position:-webkit-sticky;position:sticky;top:0;height:59px;}</style><nav class="p-navbar p-navbar--bottom-border css-kcwxxw"><div class="p-container p-container--default"><div class="p-container__inner p-navbar__inner-container"><div class="p-navbar__logo-container"><a class="p-navbar__logo-icon" href="/tech"><span class="icon p-icon" aria-hidden="true" role="presentation" style="height:auto;width:auto;min-width:24px"></span></a></div><div class="p-navbar__right-on-mobile"></div><div class="p-navbar__content" aria-expanded="false" aria-hidden="true"><ul class="p-navbar__menu"></ul><ul class="p-navbar__menu"><li class="p-navbar__item"><a>디자인</a></li><li class="p-navbar__item"><a>개발</a></li><li class="p-navbar__item p-navbar__button-item"><button class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s p-navbar__button" type="button" aria-disabled="false">채용 바로가기</button></li></ul></div></div></div></nav><style data-emotion="css 1nquki8">.css-1nquki8{max-width:700px;margin-bottom:80px;}.css-1nquki8 .has-extra-large-font-size{font-size:20px;}.css-1nquki8 .has-large-font-size{font-size:18px;}.css-1nquki8 .has-small-font-size{font-size:14px;}.css-1nquki8 .has-extra-small-font-size{font-size:12px;}@media (max-width: 700px){.css-1nquki8{margin-bottom:64px;}}</style><div class="p-container p-container--default css-1nquki8"><div class="p-container__inner"><style data-emotion="css gtmad4">.css-gtmad4>*:not(style)~*:not(style){margin-top:54px;}@media (max-width: 700px){.css-gtmad4>*:not(style)~*:not(style){margin-top:48px;}}</style><article class="css-gtmad4"><style data-emotion="css 1095auh">.css-1095auh>*:not(style)~*:not(style){margin-top:20px;}</style><header class="css-1095auh"><style data-emotion="css iffq4o">.css-iffq4o{width:100%;margin-top:36px;border-radius:12px;}</style><img srcSet="https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code-300x150.png 300w, https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code-768x384.png 768w, https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code.png 1200w" alt="테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기" class="css-iffq4o e132k2574"/><style data-emotion="css 117sh4z">.css-117sh4z{margin-top:36px;margin-bottom:0;font-size:48px;font-weight:700;line-height:1.25;color:#333d4b;word-break:keep-all;overflow-wrap:break-word;}@media (max-width: 700px){.css-117sh4z{margin-top:28px;font-size:32px;}}</style><h1 class="css-117sh4z e132k2573">테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기</h1><style data-emotion="css s5xdrg">.css-s5xdrg{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}</style><section class="css-s5xdrg e2c667z4"><style data-emotion="css 1hdebld">.css-1hdebld{grid-area:image;width:48px;height:48px;border-radius:156px;margin-right:14px;}</style><img src="https://secure.gravatar.com/avatar/b7c03d670c9c04da8a2374d37ee5dfa7?s=312&amp;d=mm&amp;r=g" alt="" class="css-1hdebld e2c667z3"/><div><style data-emotion="css 14d9k6d">.css-14d9k6d{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;grid-area:outline;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;padding-top:8px;font-size:17px;margin-bottom:2px;}@media (max-width: 700px){.css-14d9k6d>*+*{margin-top:4px;margin-left:0;}}</style><div class="css-14d9k6d e2c667z2"><style data-emotion="css 9krnkp">.css-9krnkp{grid-area:name;margin:0;font-size:17px;font-weight:600;color:#4e5968;white-space:nowrap;}</style><h3 class="css-9krnkp e2c667z1">양권성</h3><h3 class="css-9krnkp e2c667z1">ㆍ<!-- -->Server Developer</h3></div><style data-emotion="css 154r2lc">.css-154r2lc{font-size:14px;line-height:1.5;color:#8b95a1;}</style><div class="css-154r2lc e2c667z0">2022. 6. 9</div></div></section></header><style data-emotion="css 1k1kkv6">.css-1k1kkv6{font-size:18px;line-height:1.7;color:var(--grey700);font-size:18px;word-break:keep-all;overflow-wrap:break-word;counter-reset:p-post-ol 0;}.css-1k1kkv6 h2{margin:2.2em 0 0.6em 0;font-size:25px;font-weight:600;line-height:1.4;color:var(--grey900);}.css-1k1kkv6 h3{margin:2.2em 0 0.6em 0;font-size:22px;font-weight:600;line-height:1.6;color:var(--grey900);}.css-1k1kkv6 h4{margin:2.2em 0 0.3em 0;font-size:19px;font-weight:600;line-height:1.6;color:var(--grey700);}.css-1k1kkv6 p{margin:1em 0;}.css-1k1kkv6 p code,.css-1k1kkv6 li code{font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:3px;}.css-1k1kkv6 a{color:var(--blue700);}.css-1k1kkv6 pre{margin:2em -24px;}@media (max-width: 700px){.css-1k1kkv6 pre{margin:2em 0;}}.css-1k1kkv6 pre code{display:block;padding:16px 24px;overflow-x:auto;font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;line-height:1.5;word-wrap:normal;white-space:pre;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:12px;}.css-1k1kkv6 figure{margin:2em 0;overflow:hidden;border-radius:12px;width:100%;}.css-1k1kkv6 figure.aligncenter{text-align:center;}.css-1k1kkv6 ol,.css-1k1kkv6 ul{margin:0 0 16px;list-style:none;}.css-1k1kkv6 ol li,.css-1k1kkv6 ul li{position:relative;margin-bottom:8px;}.css-1k1kkv6 ol li:before,.css-1k1kkv6 ul li:before{position:absolute;left:0;}.css-1k1kkv6 ol li ol,.css-1k1kkv6 ul li ol{padding-left:0;margin:8px 0 0 -16px;}.css-1k1kkv6 ol li ul,.css-1k1kkv6 ul li ul{padding-left:0;margin-top:8px;}.css-1k1kkv6 ol li p,.css-1k1kkv6 ul li p{margin:0;}.css-1k1kkv6 ol{padding-left:16px;counter-reset:p-post-ol;}.css-1k1kkv6 ol>li{padding-left:32px;counter-increment:p-post-ol;}.css-1k1kkv6 ol>li:before{font-weight:700;font-weight:var(--font-weight-bold);content:counter(p-post-ol) '.';}.css-1k1kkv6 ul{padding-left:16px;}.css-1k1kkv6 ul>li{padding-left:24px;}.css-1k1kkv6 ul>li:before{width:16px;text-align:center;content:'•';}.css-1k1kkv6 figcaption{font-size:0.9em;color:var(--grey600);}.css-1k1kkv6 .wp-block-pullquote{margin:0;}.css-1k1kkv6 blockquote{padding:32px;background:var(--greyOpacity100);border-radius:12px;text-align:left;margin:16px 0 16px 0;}.css-1k1kkv6 blockquote p{color:#333d4b;font-weight:600;margin:0;}.css-1k1kkv6 blockquote cite{font-style:normal;}@media (max-width: 700px){.css-1k1kkv6 blockquote{padding:24px;}}.css-1k1kkv6 .wp-block-embed-youtube iframe{width:100%;border-radius:12px;}.css-1k1kkv6 ol{counter-reset:none;}.css-1k1kkv6 hr{border-top:1px solid #e5e8eb;border-right-style:none;border-left-style:none;border-bottom-style:none;margin:2.5rem 0;}.css-1k1kkv6 figure{display:table;text-align:center;}@media (max-width: 700px){.css-1k1kkv6 figure{width:100%;}}.css-1k1kkv6 figure img,.css-1k1kkv6 figure video{max-width:100%;height:auto;border:1px solid rgba(2,32,71,0.05);border-radius:12px;}.css-1k1kkv6 figure.alignright{float:right;margin:0 0 8px 24px;}@media (max-width: 700px){.css-1k1kkv6 figure.alignright{float:none;margin:0;}}.css-1k1kkv6 figcaption{display:table-caption;text-align:center;white-space:pre-wrap;caption-side:bottom;}.css-1k1kkv6 p:empty::before{content:'';}</style><div class="css-1k1kkv6 e132k2572"><div>
<p>테스트 코드는 애플리케이션 코드 못지 않게 높은 품질을 유지해야 합니다.</p>



<p>낮은 품질(이해하기 어려운 코드, 여기저기 깨져있는 테스트)의 테스트는 유지보수가 어렵고 기술부채에 못지 않은 부채로 다가옵니다.</p>



<p>그래서 테스트 코드의 높은 품질을 유지하기 위해 다양한 Builder, Helper 클래스들이 나오게 되고, 테스트 전용으로 의존성을 추가하기도 합니다. 하지만 이 또한 관리의 대상이며 제대로 관리하지 않으면 중복 코드와 얼기설기 얽힌 의존성 지옥을 맛보게 됩니다.</p>



<p>이 포스트에서는 <a href="https://docs.gradle.org/">Gradle</a>의 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures">java-test-fixtures 플러그인</a>을 사용하여 위 문제를 해결하는 방법에 대해 설명합니다.</p>



<h2>TL;DR</h2>



<ol><li>Gradle의 java-test-fixtures 플러그인을 사용하면 테스트용으로 작성한 Builder, Helper 클래스 등등을 다른 모듈과 공유할 수 있습니다.</li><li>추가적으로 해당 모듈의 테스트 전용 의존성까지 전파시킬 수 있어 각 모듈마다 불필요한 테스트 전용 의존성들을 일일이 추가할 필요가 사라집니다.</li></ol>



<h2>프로젝트 구조</h2>



<p>예제를 이해하기 쉽게 하기 위해 프로젝트 구조(멀티 모듈)를 가정하고 이야기를 진행하겠습니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.24.49-AM.png" alt="" class="wp-image-342" width="276" height="300" srcSet="https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.24.49-AM.png 576w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.24.49-AM-276x300.png 276w" sizes="(max-width: 276px) 100vw, 276px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<ul><li>domain 모듈: 핵심 비즈니스 로직에만 관심이 있는 모듈, 외부(써드파티 라이브러리, DB, HTTP 등등)에 의존하지 않고 온전히 비즈니스 로직에만 관심을 갖고 있는 모듈로써 어떠한 의존성도 가지지 않습니다.</li><li>db 모듈: 데이터의 CRUD(저장, 조회, 수정, 삭제)에만 관심이 있는 모듈, 클라이언트의 요구사항을 처리하기 위해 domain 모듈에 의존(<a rel="noreferrer noopener" href="https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations" target="_blank">implementation</a>)하고 있습니다.</li></ul>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="319" src="https://wp.toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1024x319.jpeg" alt="" class="wp-image-345" srcSet="https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1024x319.jpeg 1024w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-300x93.jpeg 300w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-768x239.jpeg 768w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1536x478.jpeg 1536w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-2048x638.jpeg 2048w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1568x488.jpeg 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>이미지 출처: <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management">Gradle Docs</a></figcaption></figure>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><link rel="stylesheet" id="syntax-highlighting-code-block-css" href="https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1" media="all"/><style>.wp-block-code {
	border: 0;
	padding: 0;
}

.wp-block-code > div {
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}
</style><div><code class="hljs language-gradle"><span class="hljs-comment">// db 모듈의 build.gradle.kts</span>
<span class="hljs-keyword">dependencies</span> {
    implementation(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:domain&quot;</span>))
    <span class="hljs-comment">// 기타 디펜던시들...</span>
}</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<ul><li>application 모듈: 클라이언트의 요청을 받아 처리하는 모듈, 클라이언트의 요구사항을 처리하기 위해 domain 모듈에 의존(implementation)하고 있으며, application 모듈에 main 함수가 존재하기 때문에 데이터 조작(저장, 조회 등등)을 위해 db 모듈에도 의존(<a rel="noreferrer noopener" href="https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations" target="_blank">runtimeOnly</a>)하고 있습니다.</li></ul>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="323" src="https://wp.toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1024x323.jpeg" alt="" class="wp-image-348" srcSet="https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1024x323.jpeg 1024w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-300x95.jpeg 300w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-768x242.jpeg 768w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1536x484.jpeg 1536w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-2048x646.jpeg 2048w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1568x494.jpeg 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>이미지 출처: <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management">Gradle Docs</a></figcaption></figure>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-comment">// application 모듈의 build.gradle.kts</span>
dependencies {
    implementation(project(<span class="hljs-string">&quot;:domain&quot;</span>))
    runtimeOnly(project(<span class="hljs-string">&quot;:db&quot;</span>))
    <span class="hljs-comment">// 기타 디펜던시들...</span>
}</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<h2>테스트 전용으로 작성한 클래스를 다른 모듈에게 노출시키기</h2>



<p>domain 모듈에 아래와 같은 객체가 있다고 가정해보겠습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span></span>(
    <span class="hljs-keyword">val</span> id: String,
    <span class="hljs-keyword">val</span> description: String,
    <span class="hljs-keyword">val</span> amount: <span class="hljs-built_in">Long</span>
)</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>테스트에서 위 클래스를 사용해야할 때 객체를 생성하려고 생각하면 매우 번거로워집니다. (공감이 되지 않는다면 파라미터가 10개 정도 된다고 생각해보면 됩니다.) </p>



<p>이 때 모든 파라미터에 기본값을 넣는 절충안도 존재하는데, 객체의 필수값이 기본값으로 채워진 채 객체가 생성되면 불안정하게 동작할 수 있습니다. 누군가의 실수로 프로덕션에서 객체의 필수값 중 일부가 기본값으로 생성된다면 의도치 않은 동작을 하게 될 수도 있기 때문입니다.</p>



<p>따라서 테스트에서 사용할 목적으로 디폴트 값이 들어간 빌더 객체를 만들게 됩니다. </p>



<p>* 참고로 <a rel="noreferrer noopener" href="https://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a>에서 코틀린 클래스의 빌더를 만들어주는 플러그인은 <a rel="noreferrer noopener" href="https://plugins.jetbrains.com/plugin/14835-kotlin-builder-generator" target="_blank">kotlin-builder-generator</a>를 사용하면 손 쉽게 만들 수 있습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderBuilder</span></span>(
    <span class="hljs-keyword">val</span> id: String = <span class="hljs-string">&quot;&quot;</span>,
    <span class="hljs-keyword">val</span> description: String = <span class="hljs-string">&quot;&quot;</span>,
    <span class="hljs-keyword">val</span> amount: <span class="hljs-built_in">Long</span> = <span class="hljs-number">0L</span>
) {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>: Order {
        <span class="hljs-keyword">return</span> Order(
            id = id,
            description = description,
            amount = amount
        )
    }
}</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>하지만 빌더는 테스트에서만 사용해야하기 때문에 domain/src/test 디렉토리 밑에 생성해야합니다. test가 아닌 main 디렉토리 밑에 존재하게 되면 프로덕션 코드에서 누가 해당 빌더로 온전치 않은 상태의 객체를 생성하고 사용하는 실수를 할 수 있기 때문입니다.</p>



<p>이런 Builder나 Helper 같이 테스트 전용으로 만든 클래스들을 해당 클래스가 존재하는 모듈(domain 모듈)이 아닌 해당 모듈을 의존하고 있는 다른 모듈(domain 모듈에 의존하고 있는 application, db 모듈)의 테스트에서 사용하고 싶다는 니즈가 생겼다고 가정해보겠습니다.</p>



<p>하지만 application과 db 모듈에서 domain 모듈에 의존하고 있다고 할지라도 각 모듈의 테스트에서는 OrderBuilder를 import 할 수 없습니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-28.png" alt="" class="wp-image-354" width="306" height="249" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-28.png 644w, https://toss.tech/wp-content/uploads/2022/06/Untitled-28-300x244.png 300w" sizes="(max-width: 306px) 100vw, 306px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>build된 jar 파일의 압축을 해제했을 때 나오는 결과물을 보면 main 디렉토리 밑에 있는 Order 클래스는 포함하고 있지만, test 디렉토리 밑에 있는 OrderBuilder 클래스는 포함하고 있지 않기 때문입니다.</figcaption></figure>



<p>어떻게 생각해보면 당연한 결과입니다.</p>



<p>domain 모듈을 테스트하는데 필요한 정보들은 프로덕션 코드에서는 필요가 없고, 그렇기 때문에 굳이 불필요하게 테스트 전용 클래스들까지 포함시킬 필요는 없기 때문입니다.</p>



<p>이제 문제를 해결하기 위한 간단한 방법 두 가지를 떠올리게 됩니다.</p>



<div class="wp-block-group"><div class="wp-block-group__inner-container">
<div class="wp-block-group"><div class="wp-block-group__inner-container">
<ol><li>각 모듈의 test 디렉토리에 빌더를 복사/붙여넣기 합니다. 하지만 이는 코드의 중복을 유발하며 Order 클래스의 변경사항이 생겼을 때 각 모듈에 존재하는 OrderBuilder 클래스를 각각 수정해야한다는 번거로움이 존재합니다.</li><li>Builder/Helper를 모아놓은 별도의 test-data 같은 테스트 전용 모듈을 만들고, 각 모듈에서 test-data 클래스에 의존(testImplementation)하게 만듭니다.</li></ol>



<p></p>
</div></div>
</div></div>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><div><code class="hljs language-gradle"><span class="hljs-comment">// application/db 모듈의 build.gradle.kts</span>
<span class="hljs-keyword">dependencies</span> {
    <span class="hljs-comment">// 기타 디펜던시들...</span>
    testImplementation(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:test-data&quot;</span>))
}</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<p>하지만 이는 실제 소스코드(Order는 domain 모듈에 존재)와 거리가 멀어지게 만들어(OrderBuilder는 test-data 모듈에 존재) 응집도가 떨어지는 모듈이 나오게 됩니다.</p>



<p>또한 테스트 전용임에도 불구하고 test-data 모듈의 클래스들을 외부에 노출시켜야하기 때문에 test 디렉토리가 아닌 main 디렉토리에 둬야 하는 점도 약간의 혼란(’main 디렉토리에 있으니까 프로덕션 레벨에서 사용하는 건가…?’ 하는 정도의)을 유발할 수 있습니다.</p>



<p>둘 다 좋은 방법은 아니라는 생각이 듭니다. 이 문제를 해결하기 위한 빛과 소금과 같은 존재가 있습니다.</p>



<h3>구세주: java-test-fixtures 플러그인</h3>



<p><a href="https://docs.gradle.org/">Gradle</a>에는 이런 문제를 해결하고자 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures">java-test-fixtures 플러그인</a>이 존재합니다.</p>



<p>우선 외부에 노출시키고자 하는 Builder나 Helper 클래스가 존재하는 domain 모듈의 build.gradle.kts 파일에 플러그인을 추가해주고 프로젝트를 reload 하면 됩니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><div><code class="hljs language-gradle"><span class="hljs-comment">// domain 모듈의 build.gradle.kts</span>
plugins {
    <span class="hljs-comment">// 기타 플러그인들...</span>
    `java-test-fixtures`
}</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-29.png" alt="" class="wp-image-355" width="338" height="229" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-29.png 700w, https://toss.tech/wp-content/uploads/2022/06/Untitled-29-300x204.png 300w" sizes="(max-width: 338px) 100vw, 338px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>java-test-fixtures 플러그인이 적용된 모듈에서 디렉토리를 생성하려고 하면 IntelliJ IDEA에서는 testFixtures 디렉토리가 자동완성 됩니다.</figcaption></figure>



<p>그럼 아까 생성했던 OrderBuilder 클래스는 test가 아닌 testFixtures 디렉토리로 이동시켜준 후 build를 했을 때 수행되는 Gradle Task들을 보게 되면 testFixture 관련된 task가 추가된 걸 알 수 있습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="Shell Session" data-shcb-language-slug="shell"><div><code class="hljs language-shell">./gradlew :domain:build

...
<span class="hljs-meta">&gt;</span><span class="bash"> Task :domain:compileTestFixturesKotlin</span>
<span class="hljs-meta">&gt;</span><span class="bash"> Task :domain:compileTestFixturesJava NO-SOURCE</span>
<span class="hljs-meta">&gt;</span><span class="bash"> Task :domain:processTestFixturesResources NO-SOURCE</span>
<span class="hljs-meta">&gt;</span><span class="bash"> Task :domain:testFixturesClasses UP-TO-DATE</span>
<span class="hljs-meta">&gt;</span><span class="bash"> Task :domain:testFixturesJar</span>
...</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Shell Session</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">shell</span><span class="shcb-language__paren">)</span></small></pre>


<p>그리고 빌드된 결과물을 보면 test-fixtures.jar가 추가된 걸 볼 수 있습니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-30-1.png" alt="" class="wp-image-374" width="327" height="430" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-30-1.png 704w, https://toss.tech/wp-content/uploads/2022/06/Untitled-30-1-228x300.png 228w" sizes="(max-width: 327px) 100vw, 327px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>plain.jar는 plain에, test-fixtures.jar는 test에 각각 풀었는데 OrderBuilder는 test에 존재하는 걸 보니 test-fixtures.jar에 존재한다는 걸 알 수 있습니다.</figcaption></figure>



<p>여기서 또 java-test-fixtures 플러그인의 장점이 나오게 되는데 다른 모듈에서 불필요하게 여기는 클래스들(test 디렉토리에 있는 <code>@Test</code> 어노테이션이 붙은 테스트 코드들 등등)은 노출되지 않고, 필요한 클래스들(testFixtures 디렉토리에 있는 Helper나 Builder 클래스 등등)만 노출된다는 점입니다.</p>



<p>하지만 이렇게 했다고 해서 아직 application이나 db 모듈에서 OrderBuilder를 import 할 수 있는 건 아닙니다. application과 db 모듈에서는 plain.jar에 의존하고 있는 것이지, test-fixtures.jar에 의존하고 있는 건 아니기 때문입니다.</p>



<p>따라서 application과 db 모듈에서 test-fixtures.jar에 의존하도록 각 모듈의 build.gradle.kts에 추가해줘야합니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><div><code class="hljs language-gradle"><span class="hljs-comment">// application/db 모듈의 build.gradle.kts</span>
<span class="hljs-keyword">dependencies</span> {
    implementation(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:domain&quot;</span>))
    testImplementation(testFixtures(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:domain&quot;</span>)))
    <span class="hljs-comment">// 기타 디펜던시들...</span>
}</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<p>위와 같이 의존성을 추가해줘야 비로소 application과 db 모듈의 테스트 코드에서도 domain 모듈의 testFixtures에 존재하는 OrderBuilder를 사용할 수 있게 됩니다.</p>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="425" src="https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-1024x425.png" alt="" class="wp-image-357" srcSet="https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-1024x425.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-300x124.png 300w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-768x318.png 768w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM.png 1360w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>이해하기 쉽게 모듈 간의 디렉토리 관계를 좀 더 세분화해서 표현해보았습니다.</figcaption></figure>



<h2>테스트 전용으로 추가한 의존성을 다른 모듈에게 노출시키기</h2>



<p>db 모듈의 통합테스트를 위해 인메모리 DB인 <a rel="noreferrer noopener" href="https://www.h2database.com/" target="_blank">H2</a>를 테스트 전용으로 의존성을 추가했다고 가정해보겠습니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-31-1024x685.png" alt="" class="wp-image-358" width="368" height="246" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-31-1024x685.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Untitled-31-300x201.png 300w, https://toss.tech/wp-content/uploads/2022/06/Untitled-31-768x514.png 768w, https://toss.tech/wp-content/uploads/2022/06/Untitled-31.png 1136w" sizes="(max-width: 368px) 100vw, 368px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>이미지 출처: <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management">Gradle Docs</a></figcaption></figure>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><div><code class="hljs language-gradle"><span class="hljs-comment">// db 모듈의 build.gradle.kts</span>
<span class="hljs-keyword">dependencies</span> {
    <span class="hljs-comment">// 기타 디펜던시들...</span>
    testRuntimeOnly(<span class="hljs-string">&quot;com.h2database:h2&quot;</span>)
}</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<p>이 상태에서 db 모듈의 통합테스트를 돌리게 되면 H2 DB를 사용하여 실제 DB와 격리된 환경에서 테스트가 돌아가는 것을 볼 수 있습니다.</p>



<p>그리고 application 모듈은 아래와 같이 db 모듈에 의존하고 있기 때문에 통합테스트를 작성할 때도 인메모리 DB를 쓸 것이라 희망하게 되는데 실제로 테스트를 짜고 돌려보면 그렇지 않습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><div><code class="hljs language-gradle"><span class="hljs-comment">// application 모듈의 build.gradle.kts</span>
<span class="hljs-keyword">dependencies</span> {
    <span class="hljs-comment">// 기타 디펜던시들...</span>
    runtimeOnly(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:db&quot;</span>))
}</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-32.png" alt="" class="wp-image-359" width="328" height="335" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-32.png 832w, https://toss.tech/wp-content/uploads/2022/06/Untitled-32-293x300.png 293w, https://toss.tech/wp-content/uploads/2022/06/Untitled-32-768x786.png 768w" sizes="(max-width: 328px) 100vw, 328px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>gradle 모듈의 디펜던시를 보게 되면 db 모듈의 testRuntimeClasspath에는 H2가 존재하지만, application 모듈의 testRuntimeClasspath에 존재하는 db 모듈에는 H2가 존재하지 않기 때문입니다.</figcaption></figure>



<p>이 때도 application 모듈의 build.gradle.kts에 H2를 의존성으로 추가하는 방법이 있겠지만 관심사 문제가 있습니다. application 모듈의 관심사는 ‘어떻게 클라이언트와 커뮤니케이션해서 요구사항을 만족시킬 것인가?’이지 세부적인 내용(’저장소는 무엇을 쓸까? 데이터는 어디서 저장하고 어떻게 불러올까?’ 같은)은 관심사가 아닙니다. 따라서 H2를 직접적으로 의존성을 추가하는 순간 관심사 분리가 제대로 되지 않게 됩니다.</p>



<p>이 문제를 해결하기 위해 또 우리의 구세주 java-test-fixtures 플러그인이 필요합니다.</p>



<h3>testFixturesComplieClasspath와 testFixturesRuntimeClasspath</h3>



<p>우선 외부에 테스트 전용 의존성(H2)을 노출시키고 싶은 db 모듈에 java-test-fixtures 플러그인을 추가하고, <code>testRuntimeOnly</code>로 추가했던 H2 의존성을 <code>testFixturesRuntimeOnly</code>로 변경해줘야 합니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// db 모듈의 build.gradle.kts</span>
plugins {
    <span class="hljs-comment">// 기타 플러그인들...</span>
    <span class="hljs-string">`java-test-fixtures`</span>
}

dependencies {
    <span class="hljs-comment">// 기타 디펜던시들...</span>
    testFixturesRuntimeOnly(<span class="hljs-string">&quot;com.h2database:h2&quot;</span>)
}</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>그리고 나서 다시 db 모듈의 디펜더시를 보면 기존에 보지 못했던 <code>testFixturesCompileClasspath</code>와 <code>testFixturesRuntimeClasspath</code>가 추가된 게 보입니다.</p>



<p>사실 두 가지 클래스패스는 java-test-fixtures 플러그인을 추가하기만 해도 추가되는 클래스패스입니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-33.png" alt="" class="wp-image-360" width="323" height="409" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-33.png 762w, https://toss.tech/wp-content/uploads/2022/06/Untitled-33-237x300.png 237w" sizes="(max-width: 323px) 100vw, 323px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>여기서 눈여겨봐야할 것은 기존에는 testRuntimeClasspath에만 존재하던 H2 의존성이 testFixturesRuntimeClasspath에도 추가된 점입니다.</figcaption></figure>



<p>이에 대한 해답은 <a rel="noreferrer noopener" href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank">java-test-fixtures 플러그인</a> 문서를 보다보면 아래와 같은 내용에 나오게 됩니다.</p>



<blockquote class="wp-block-quote"><p>Test fixtures are configured so that: <br/>• they can see the <em><strong>main</strong></em> source set classes <br/><em>• <strong>test sources</strong></em> can see the <em><strong>test fixtures</strong></em> classes</p></blockquote>



<p>두 번째로 나와있는 테스트 소스(test 디렉토리에 있는 내용들)에서 test fixture(testFixtures 디렉토리에 있는 내용들)에 있는 내용을 참조(can see)할 수 있도록 구성된다는 내용이 핵심입니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.52.05-AM.png" alt="" class="wp-image-361" width="348" height="288" srcSet="https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.52.05-AM.png 744w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.52.05-AM-300x249.png 300w" sizes="(max-width: 348px) 100vw, 348px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>따라서 <code>testFixturesRuntimeOnly</code>로만 추가(<code>testFixturesRuntimeClassPath</code>)했지만 <code>testRuntimeOnly</code>로도 추가된 것과 동일한 효과(<code>testRuntimeClasspath</code>에 추가된 효과)를 같이 보게 됩니다. 따라서 db 모듈의 통합테스트를 돌렸을 때는 여전히 H2 DB를 사용하게 됩니다.</p>



<p>하지만 H2를 db 모듈에 <code>testFixturesRuntimeClasspath</code>에 추가했지만, 여전히 application 모듈의 <code>testRuntimeClasspath</code>를 보면 아직도 db 모듈에는 H2 의존성이 추가되지 않은 모습을 볼 수 있습니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-34.png" alt="" class="wp-image-362" width="317" height="355" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-34.png 784w, https://toss.tech/wp-content/uploads/2022/06/Untitled-34-267x300.png 267w, https://toss.tech/wp-content/uploads/2022/06/Untitled-34-768x862.png 768w" sizes="(max-width: 317px) 100vw, 317px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>그 이유는 application 모듈의 build.gradle.kts를 보면 알 수 있습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><div><code class="hljs language-gradle"><span class="hljs-comment">// application 모듈의 build.gradle.kts</span>
<span class="hljs-keyword">dependencies</span> {
    <span class="hljs-comment">// 기타 디펜던시들...</span>
    runtimeOnly(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:db&quot;</span>))
}</code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-35-1024x687.png" alt="" class="wp-image-363" width="343" height="230" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-35-1024x687.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Untitled-35-300x201.png 300w, https://toss.tech/wp-content/uploads/2022/06/Untitled-35-768x515.png 768w, https://toss.tech/wp-content/uploads/2022/06/Untitled-35.png 1142w" sizes="(max-width: 343px) 100vw, 343px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>이미지 출처: <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management">Gradle Docs</a></figcaption></figure>



<p>바로 정답은 <code>runtimeOnly</code> 키워드에 있습니다.<br/><code>runtimeOnly</code>로 추가한 디펜던시는 <code>testRuntimeClasspath</code>에도 추가됩니다. (물론 <code>runtimeClasspath</code>에도 추가됩니다.)<br/>하지만 <code>testRuntimeClasspath</code>에 추가된 의존성은 외부 모듈에 노출되지 않는다는 특성이 있습니다.</p>



<p>따라서 우리는 db 모듈의 <code>testRuntimeClasspath</code>가 아닌 <code>testFixturesRuntimeClasspath</code>에 추가된 의존성들에 주목해야하며 해당 의존성들이 추가되도록 application 모듈의 build.gradle.kts를 수정해야 합니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="Gradle" data-shcb-language-slug="gradle"><div><code class="hljs language-gradle"><span class="hljs-comment">// application 모듈의 build.gradle.kts</span>
<span class="hljs-keyword">dependencies</span> {
    <span class="hljs-comment">// 기타 디펜던시들...</span>
    runtimeOnly(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:db&quot;</span>))
    testRuntimeOnly(testFixtures(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:db&quot;</span>)))
}</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Gradle</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">gradle</span><span class="shcb-language__paren">)</span></small></pre>


<p>마지막 부분이 db 모듈의 <code>testFixturesRuntimeClasspath</code>에 있는 의존성을 <code>testRuntimeOnly</code>로 추가(<code>testRuntimeClasspath</code>에 추가)하는 내용입니다.</p>



<figure class="wp-block-image size-large is-resized"><div data-rmiz-wrap="visible"><img loading="lazy" src="https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-36.png" alt="" class="wp-image-364" width="378" height="465" srcSet="https://toss.tech/wp-content/uploads/2022/06/Untitled-36.png 802w, https://toss.tech/wp-content/uploads/2022/06/Untitled-36-244x300.png 244w, https://toss.tech/wp-content/uploads/2022/06/Untitled-36-768x946.png 768w" sizes="(max-width: 378px) 100vw, 378px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div><figcaption>이제 application 모듈의 testRuntimeClasspath에도 db 모듈의 testFixutresRuntimeClasspath에 있는 H2 의존성이 추가된 걸 볼 수 있습니다.</figcaption></figure>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="388" src="https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-1024x388.png" alt="" class="wp-image-412" srcSet="https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-1024x388.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-300x114.png 300w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-768x291.png 768w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM.png 1362w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>이 상태에서 application 모듈의 통합테스트를 돌리더라도 H2 DB를 사용하는 걸 볼 수 있습니다.</p>



<h2>결론</h2>



<p>테스트 코드는 실제 프로덕션에 영향을 미치지 않으므로 신경을 덜 쓰기 마련입니다. 그러다보면 중복이 난무하고 관심사 분리도 제대로 되지 않고 의존성 지옥에 빠지기 십상입니다. 하지만 테스트 코드는 우리의 소프트웨어를 좀 더 나은 설계로 유도하며 안정감도 주기 때문에 품질을 관리해야하는 소프트웨어임에는 분명합니다.</p>



<p>혹시 해당 포스트를 보고 ‘어, 그거 그렇게 하는 거 아닌데…’라는 생각이 들었다면 <a href="https://toss.im/career/jobs?company=%ED%86%A0%EC%8A%A4%ED%8E%98%EC%9D%B4%EB%A8%BC%EC%B8%A0">토스페이먼츠</a>에 와서 신나게 토론할 준비가 되어있으니 언제든 환영합니다!</p>
</div></div><style data-emotion="css auig7l">.css-auig7l{margin-top:96px;}</style><style data-emotion="css x7fajo">.css-x7fajo{margin-top:96px;}.css-x7fajo>*:not(style)~*:not(style){margin-left:24px;}</style><style data-emotion="css 6rfvv8">.css-6rfvv8{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;margin-top:96px;}.css-6rfvv8>*:not(style)~*:not(style){margin-left:24px;}</style><div class="css-6rfvv8"><style data-emotion="css 1n0u3h">.css-1n0u3h{background-color:#f9fafb;width:100%;height:auto;border-radius:12px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:48px;}@media (max-width: 700px){.css-1n0u3h{padding:32px;}}</style><div class="css-1n0u3h e1t1xt3a7"><style data-emotion="css 6cc9f0">.css-6cc9f0{font-size:24px;font-weight:700;margin-bottom:16px;color:#4e5968;}</style><h2 class="css-6cc9f0 e1t1xt3a6">재미있게 읽으셨나요?</h2><style data-emotion="css 1wmgpcn">.css-1wmgpcn{font-size:16px;line-height:1.5;font-weight:600;color:#6b7684;margin-bottom:4px;}</style><p class="css-1wmgpcn e1t1xt3a5">좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><style data-emotion="css 4qu8li">.css-4qu8li{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-top:16px;}</style><div class="css-4qu8li e1t1xt3a3"><style data-emotion="css 1fmr5ax">.css-1fmr5ax{display:block;font-family:'tossface';font-size:40px;cursor:pointer;margin:0 12px;-webkit-transition:0.15s ease-in-out all;transition:0.15s ease-in-out all;}.css-1fmr5ax a{-webkit-text-decoration:none;text-decoration:none;}.css-1fmr5ax:hover{-webkit-transform:scale(1.2);-moz-transform:scale(1.2);-ms-transform:scale(1.2);transform:scale(1.2);}</style><div class="css-1fmr5ax e1t1xt3a1">😍</div><div class="css-1fmr5ax e1t1xt3a1">🤔</div></div><style data-emotion="css 1p3zmjw">.css-1p3zmjw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;margin-top:16px;}.css-1p3zmjw button,.css-1p3zmjw a{margin:0 12px;}@media (max-width: 700px){.css-1p3zmjw{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;}.css-1p3zmjw button,.css-1p3zmjw a{width:100%;margin:8px 0;}}</style><div class="css-1p3zmjw e1t1xt3a0"><style data-emotion="css 1u8jkqx">.css-1u8jkqx{display:grid;grid-template-columns:min-content auto;grid-column-gap:8px;}</style><button class="p-button p-button--primary p-button--inline p-button--weak p-button--default p-button--has-icon padding--base css-1u8jkqx" type="button" aria-disabled="false"><span class="icon p-icon icon--colored p-icon--colored" aria-hidden="true" role="presentation" style="height:16px;width:16px;min-width:16px;color:#3182f6"></span>아티클 공유하기</button></div></div></div></article><style data-emotion="css 1lsuzal">.css-1lsuzal{margin-top:100px;}.css-1lsuzal::before{content:'';position:absolute;width:100%;height:1px;left:0;border-bottom:1px solid #e5e8eb;}</style><div class="css-1lsuzal e132k2571"><style data-emotion="css 1ympfnp">.css-1ympfnp{display:inline-block;width:100%;font-size:20px;margin:34px 0 40px 0;}</style><span class="typography typography--h3 typography--bold color--grey800 css-1ympfnp e132k2570">이어지는 글</span><style data-emotion="css vivlm7">.css-vivlm7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;margin-bottom:40px;}.css-vivlm7:last-of-type{margin-bottom:0px;}.css-vivlm7:hover .egyklng4{color:#3182f6;}</style><div class="css-vivlm7 egyklng3"><style data-emotion="css bc0lqn">.css-bc0lqn{width:80px;height:80px;margin-right:20px;border-radius:12px;object-fit:cover;}@media (max-width: 700px){.css-bc0lqn{width:64px;height:64px;}}</style><img srcSet="https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w" class="css-bc0lqn egyklng2"/><style data-emotion="css 1fttcpj">.css-1fttcpj{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}</style><div class="css-1fttcpj egyklng1"><style data-emotion="css p4blj2">.css-p4blj2{font-size:24px;margin-bottom:4px;word-break:keep-all;line-height:1.4;overflow-wrap:break-word;-webkit-transition:color 0.3s ease;transition:color 0.3s ease;-webkit-line-clamp:2;display:block;}@media (max-width: 700px){.css-p4blj2{font-size:18px;-webkit-line-clamp:2;}}</style><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사</span><style data-emotion="css 1jxhn1e">.css-1jxhn1e{color:#8b95a1;}</style><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 04. 01</span></div></div><div class="css-vivlm7 egyklng3"><img srcSet="https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w" class="css-bc0lqn egyklng2"/><div class="css-1fttcpj egyklng1"><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">ESLint와 AST로 코드 퀄리티 높이기</span><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 03. 31</span></div></div></div></div></div><style data-emotion="css 1d2vuhc">.css-1d2vuhc{padding:60px 24px;word-break:keep-all;overflow-wrap:break-word;background:rgba(2,9,19,0.91);}@media (max-width: 700px){.css-1d2vuhc{padding-top:24px;}}</style><section class="css-1d2vuhc eqrolup4"><style data-emotion="css yf0lpd">.css-yf0lpd{display:grid;grid-template-columns:3fr 7fr;grid-column-gap:20px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;max-width:640px;margin:0 auto;content-visibility:auto;}@media (max-width: 700px){.css-yf0lpd{grid-template-rows:min-content auto;grid-template-columns:1fr;grid-row-gap:24px;}}</style><div class="css-yf0lpd eqrolup2"><style data-emotion="css 1d33yk5">.css-1d33yk5{width:100%;}@media (max-width: 700px){.css-1d33yk5{width:90px;}}</style><img src="https://static.toss.im/3d/website_code_blue_alpha.png" alt="" class="css-1d33yk5 eqrolup3"/><style data-emotion="css 1gb2pj4">.css-1gb2pj4>*:not(style)~*:not(style){margin-top:24px;}</style><style data-emotion="css 7xmgw5">.css-7xmgw5{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-7xmgw5>*:not(style)~*:not(style){margin-top:24px;}</style><div class="css-7xmgw5"><style data-emotion="css 1pbuvpm">.css-1pbuvpm>*:not(style)~*:not(style){margin-top:8px;}</style><style data-emotion="css nbpfuv">.css-nbpfuv{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-nbpfuv>*:not(style)~*:not(style){margin-top:8px;}</style><div class="css-nbpfuv"><style data-emotion="css 19gu4b8">.css-19gu4b8{margin:0;font-size:26px;line-height:1.4;color:#ffffff;}@media (max-width: 700px){.css-19gu4b8{font-size:20px;}}</style><h3 class="css-19gu4b8 eqrolup1">토스팀이 만드는 수많은 혁신의 순간들</h3><style data-emotion="css shfxsq">.css-shfxsq{font-size:17px;line-height:1.5;color:#e5e8eb;}@media (max-width: 700px){.css-shfxsq{font-size:16px;}}</style><div class="css-shfxsq eqrolup0">당신과 함께 만들고 싶습니다.<br/>지금, 토스팀에 합류하세요.</div></div><a class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s" aria-disabled="false" href="https://toss.im/career/jobs?gh_src=38b73b7a3us">채용 중인 공고 보기</a></div></div></section><footer class="p-footer p-footer--light"><div class="p-footer__inner"><div class="p-footer__site-group-list"><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스테크</div></li><li class="p-footer__site-group-item"><a href="mailto:techblog@toss.im">의견 보내기</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스</div></li><li class="p-footer__site-group-item"><a href="https://toss.im">홈페이지</a></li><li class="p-footer__site-group-item"><a href="https://team.toss.im">회사 소개</a></li><li class="p-footer__site-group-item"><a href="https://toss.im/career">채용</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">고객센터</div></li><li class="p-footer__site-group-item"><a href="tel:1599-4905">전화: 1599-4905 (24시간 연중무휴)</a></li><li class="p-footer__site-group-item"><a href="mailto:support.toss.im">이메일: support@toss.im</a></li><li class="p-footer__site-group-item"><a href="https://goto.kakao.com/@toss">카카오톡: @toss</a></li></ul></div><address class="p-footer__address"><strong class="p-footer__address__company-name">㈜비바리퍼블리카</strong>Copyright © Viva Republica, Inc. All Rights Reserved.</address><ul class="p-footer__term-wrapper"></ul><ul class="p-footer__social-list"><li class="p-footer__social-list-item"><a aria-label="Toss Facebook" target="_blank" href="https://www.facebook.com/toss.revolution"><img src="https://static.toss.im/assets/homepage/safety/icn-facebook.svg" alt="Toss Facebook"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss blog" target="_blank" href="https://blog.toss.im"><img src="https://static.toss.im/assets/homepage/safety/icn-blog.svg" alt="Toss blog"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Naver Post" target="_blank" href="https://post.naver.com/tossblog"><img src="https://static.toss.im/assets/homepage/safety/icn-naver.svg" alt="Toss Naver Post"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Twitter" target="_blank" href="https://twitter.com/toss__official"><img src="https://static.toss.im/assets/homepage/safety/icn-twitter.svg" alt="Toss Twitter"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Instagram" target="_blank" href="https://www.instagram.com/toss.im/"><img src="https://static.toss.im/assets/homepage/safety/icn-instagram.svg" alt="Toss Instagram"/></a></li></ul></div></footer><div id="tds-pc__portal-container"></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기","content":"\n\u003cp\u003e테스트 코드는 애플리케이션 코드 못지 않게 높은 품질을 유지해야 합니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e낮은 품질(이해하기 어려운 코드, 여기저기 깨져있는 테스트)의 테스트는 유지보수가 어렵고 기술부채에 못지 않은 부채로 다가옵니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e그래서 테스트 코드의 높은 품질을 유지하기 위해 다양한 Builder, Helper 클래스들이 나오게 되고, 테스트 전용으로 의존성을 추가하기도 합니다. 하지만 이 또한 관리의 대상이며 제대로 관리하지 않으면 중복 코드와 얼기설기 얽힌 의존성 지옥을 맛보게 됩니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e이 포스트에서는 \u003ca href=\"https://docs.gradle.org/\"\u003eGradle\u003c/a\u003e의 \u003ca href=\"https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures\"\u003ejava-test-fixtures 플러그인\u003c/a\u003e을 사용하여 위 문제를 해결하는 방법에 대해 설명합니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003eTL;DR\u003c/h2\u003e\n\n\n\n\u003col\u003e\u003cli\u003eGradle의 java-test-fixtures 플러그인을 사용하면 테스트용으로 작성한 Builder, Helper 클래스 등등을 다른 모듈과 공유할 수 있습니다.\u003c/li\u003e\u003cli\u003e추가적으로 해당 모듈의 테스트 전용 의존성까지 전파시킬 수 있어 각 모듈마다 불필요한 테스트 전용 의존성들을 일일이 추가할 필요가 사라집니다.\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003ch2\u003e프로젝트 구조\u003c/h2\u003e\n\n\n\n\u003cp\u003e예제를 이해하기 쉽게 하기 위해 프로젝트 구조(멀티 모듈)를 가정하고 이야기를 진행하겠습니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.24.49-AM.png\" alt=\"\" class=\"wp-image-342\" width=\"276\" height=\"300\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.24.49-AM.png 576w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.24.49-AM-276x300.png 276w\" sizes=\"(max-width: 276px) 100vw, 276px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\u003cli\u003edomain 모듈: 핵심 비즈니스 로직에만 관심이 있는 모듈, 외부(써드파티 라이브러리, DB, HTTP 등등)에 의존하지 않고 온전히 비즈니스 로직에만 관심을 갖고 있는 모듈로써 어떠한 의존성도 가지지 않습니다.\u003c/li\u003e\u003cli\u003edb 모듈: 데이터의 CRUD(저장, 조회, 수정, 삭제)에만 관심이 있는 모듈, 클라이언트의 요구사항을 처리하기 위해 domain 모듈에 의존(\u003ca rel=\"noreferrer noopener\" href=\"https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations\" target=\"_blank\"\u003eimplementation\u003c/a\u003e)하고 있습니다.\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"319\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1024x319.jpeg\" alt=\"\" class=\"wp-image-345\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1024x319.jpeg 1024w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-300x93.jpeg 300w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-768x239.jpeg 768w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1536x478.jpeg 1536w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-2048x638.jpeg 2048w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-0JmosH7z6B5Lzl-1568x488.jpeg 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003cfigcaption\u003e이미지 출처: \u003ca href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\"\u003eGradle Docs\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003clink rel='stylesheet' id='syntax-highlighting-code-block-css'  href='https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1' media='all' /\u003e\u003cstyle\u003e.wp-block-code {\n\tborder: 0;\n\tpadding: 0;\n}\n\n.wp-block-code \u003e div {\n\toverflow: auto;\n}\n\n.shcb-language {\n\tborder: 0;\n\tclip: rect(1px, 1px, 1px, 1px);\n\t-webkit-clip-path: inset(50%);\n\tclip-path: inset(50%);\n\theight: 1px;\n\tmargin: -1px;\n\toverflow: hidden;\n\tpadding: 0;\n\tposition: absolute;\n\twidth: 1px;\n\tword-wrap: normal;\n\tword-break: normal;\n}\n\n.hljs {\n\tbox-sizing: border-box;\n}\n\n.hljs.shcb-code-table {\n\tdisplay: table;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table \u003e .shcb-loc {\n\tcolor: inherit;\n\tdisplay: table-row;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table .shcb-loc \u003e span {\n\tdisplay: table-cell;\n}\n\n.wp-block-code code.hljs:not(.shcb-wrap-lines) {\n\twhite-space: pre;\n}\n\n.wp-block-code code.hljs.shcb-wrap-lines {\n\twhite-space: pre-wrap;\n}\n\n.hljs.shcb-line-numbers {\n\tborder-spacing: 0;\n\tcounter-reset: line;\n}\n\n.hljs.shcb-line-numbers \u003e .shcb-loc {\n\tcounter-increment: line;\n}\n\n.hljs.shcb-line-numbers .shcb-loc \u003e span {\n\tpadding-left: 0.75em;\n}\n\n.hljs.shcb-line-numbers .shcb-loc::before {\n\tborder-right: 1px solid #ddd;\n\tcontent: counter(line);\n\tdisplay: table-cell;\n\tpadding: 0 0.75em;\n\ttext-align: right;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n\twhite-space: nowrap;\n\twidth: 1%;\n}\n\u003c/style\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// db 모듈의 build.gradle.kts\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003edependencies\u003c/span\u003e {\n    implementation(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":domain\"\u003c/span\u003e))\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-1\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cul\u003e\u003cli\u003eapplication 모듈: 클라이언트의 요청을 받아 처리하는 모듈, 클라이언트의 요구사항을 처리하기 위해 domain 모듈에 의존(implementation)하고 있으며, application 모듈에 main 함수가 존재하기 때문에 데이터 조작(저장, 조회 등등)을 위해 db 모듈에도 의존(\u003ca rel=\"noreferrer noopener\" href=\"https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations\" target=\"_blank\"\u003eruntimeOnly\u003c/a\u003e)하고 있습니다.\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"323\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1024x323.jpeg\" alt=\"\" class=\"wp-image-348\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1024x323.jpeg 1024w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-300x95.jpeg 300w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-768x242.jpeg 768w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1536x484.jpeg 1536w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-2048x646.jpeg 2048w, https://toss.tech/wp-content/uploads/2022/06/imgonline-com-ua-twotoone-jKbVPdsS06o-1568x494.jpeg 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003cfigcaption\u003e이미지 출처: \u003ca href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\"\u003eGradle Docs\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-comment\"\u003e// application 모듈의 build.gradle.kts\u003c/span\u003e\ndependencies {\n    implementation(project(\u003cspan class=\"hljs-string\"\u003e\":domain\"\u003c/span\u003e))\n    runtimeOnly(project(\u003cspan class=\"hljs-string\"\u003e\":db\"\u003c/span\u003e))\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-2\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch2\u003e테스트 전용으로 작성한 클래스를 다른 모듈에게 노출시키기\u003c/h2\u003e\n\n\n\n\u003cp\u003edomain 모듈에 아래와 같은 객체가 있다고 가정해보겠습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOrder\u003c/span\u003e\u003c/span\u003e(\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e id: String,\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e description: String,\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e amount: \u003cspan class=\"hljs-built_in\"\u003eLong\u003c/span\u003e\n)\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-3\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e테스트에서 위 클래스를 사용해야할 때 객체를 생성하려고 생각하면 매우 번거로워집니다. (공감이 되지 않는다면 파라미터가 10개 정도 된다고 생각해보면 됩니다.) \u003c/p\u003e\n\n\n\n\u003cp\u003e이 때 모든 파라미터에 기본값을 넣는 절충안도 존재하는데, 객체의 필수값이 기본값으로 채워진 채 객체가 생성되면 불안정하게 동작할 수 있습니다. 누군가의 실수로 프로덕션에서 객체의 필수값 중 일부가 기본값으로 생성된다면 의도치 않은 동작을 하게 될 수도 있기 때문입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e따라서 테스트에서 사용할 목적으로 디폴트 값이 들어간 빌더 객체를 만들게 됩니다. \u003c/p\u003e\n\n\n\n\u003cp\u003e* 참고로 \u003ca rel=\"noreferrer noopener\" href=\"https://www.jetbrains.com/idea/\" target=\"_blank\"\u003eIntelliJ IDEA\u003c/a\u003e에서 코틀린 클래스의 빌더를 만들어주는 플러그인은 \u003ca rel=\"noreferrer noopener\" href=\"https://plugins.jetbrains.com/plugin/14835-kotlin-builder-generator\" target=\"_blank\"\u003ekotlin-builder-generator\u003c/a\u003e를 사용하면 손 쉽게 만들 수 있습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003edata\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOrderBuilder\u003c/span\u003e\u003c/span\u003e(\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e id: String = \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e description: String = \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e amount: \u003cspan class=\"hljs-built_in\"\u003eLong\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0L\u003c/span\u003e\n) {\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebuild\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e: Order {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e Order(\n            id = id,\n            description = description,\n            amount = amount\n        )\n    }\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-4\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e하지만 빌더는 테스트에서만 사용해야하기 때문에 domain/src/test 디렉토리 밑에 생성해야합니다. test가 아닌 main 디렉토리 밑에 존재하게 되면 프로덕션 코드에서 누가 해당 빌더로 온전치 않은 상태의 객체를 생성하고 사용하는 실수를 할 수 있기 때문입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e이런 Builder나 Helper 같이 테스트 전용으로 만든 클래스들을 해당 클래스가 존재하는 모듈(domain 모듈)이 아닌 해당 모듈을 의존하고 있는 다른 모듈(domain 모듈에 의존하고 있는 application, db 모듈)의 테스트에서 사용하고 싶다는 니즈가 생겼다고 가정해보겠습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e하지만 application과 db 모듈에서 domain 모듈에 의존하고 있다고 할지라도 각 모듈의 테스트에서는 OrderBuilder를 import 할 수 없습니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-28.png\" alt=\"\" class=\"wp-image-354\" width=\"306\" height=\"249\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-28.png 644w, https://toss.tech/wp-content/uploads/2022/06/Untitled-28-300x244.png 300w\" sizes=\"(max-width: 306px) 100vw, 306px\" /\u003e\u003cfigcaption\u003ebuild된 jar 파일의 압축을 해제했을 때 나오는 결과물을 보면 main 디렉토리 밑에 있는 Order 클래스는 포함하고 있지만, test 디렉토리 밑에 있는 OrderBuilder 클래스는 포함하고 있지 않기 때문입니다.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e어떻게 생각해보면 당연한 결과입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003edomain 모듈을 테스트하는데 필요한 정보들은 프로덕션 코드에서는 필요가 없고, 그렇기 때문에 굳이 불필요하게 테스트 전용 클래스들까지 포함시킬 필요는 없기 때문입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e이제 문제를 해결하기 위한 간단한 방법 두 가지를 떠올리게 됩니다.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"wp-block-group\"\u003e\u003cdiv class=\"wp-block-group__inner-container\"\u003e\n\u003cdiv class=\"wp-block-group\"\u003e\u003cdiv class=\"wp-block-group__inner-container\"\u003e\n\u003col\u003e\u003cli\u003e각 모듈의 test 디렉토리에 빌더를 복사/붙여넣기 합니다. 하지만 이는 코드의 중복을 유발하며 Order 클래스의 변경사항이 생겼을 때 각 모듈에 존재하는 OrderBuilder 클래스를 각각 수정해야한다는 번거로움이 존재합니다.\u003c/li\u003e\u003cli\u003eBuilder/Helper를 모아놓은 별도의 test-data 같은 테스트 전용 모듈을 만들고, 각 모듈에서 test-data 클래스에 의존(testImplementation)하게 만듭니다.\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003cp\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// application/db 모듈의 build.gradle.kts\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003edependencies\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n    testImplementation(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":test-data\"\u003c/span\u003e))\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-5\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e하지만 이는 실제 소스코드(Order는 domain 모듈에 존재)와 거리가 멀어지게 만들어(OrderBuilder는 test-data 모듈에 존재) 응집도가 떨어지는 모듈이 나오게 됩니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e또한 테스트 전용임에도 불구하고 test-data 모듈의 클래스들을 외부에 노출시켜야하기 때문에 test 디렉토리가 아닌 main 디렉토리에 둬야 하는 점도 약간의 혼란(’main 디렉토리에 있으니까 프로덕션 레벨에서 사용하는 건가…?’ 하는 정도의)을 유발할 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e둘 다 좋은 방법은 아니라는 생각이 듭니다. 이 문제를 해결하기 위한 빛과 소금과 같은 존재가 있습니다.\u003c/p\u003e\n\n\n\n\u003ch3\u003e구세주: java-test-fixtures 플러그인\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://docs.gradle.org/\"\u003eGradle\u003c/a\u003e에는 이런 문제를 해결하고자 \u003ca href=\"https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures\"\u003ejava-test-fixtures 플러그인\u003c/a\u003e이 존재합니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e우선 외부에 노출시키고자 하는 Builder나 Helper 클래스가 존재하는 domain 모듈의 build.gradle.kts 파일에 플러그인을 추가해주고 프로젝트를 reload 하면 됩니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// domain 모듈의 build.gradle.kts\u003c/span\u003e\nplugins {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 플러그인들...\u003c/span\u003e\n    `java-test-fixtures`\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-6\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-29.png\" alt=\"\" class=\"wp-image-355\" width=\"338\" height=\"229\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-29.png 700w, https://toss.tech/wp-content/uploads/2022/06/Untitled-29-300x204.png 300w\" sizes=\"(max-width: 338px) 100vw, 338px\" /\u003e\u003cfigcaption\u003ejava-test-fixtures 플러그인이 적용된 모듈에서 디렉토리를 생성하려고 하면 IntelliJ IDEA에서는 testFixtures 디렉토리가 자동완성 됩니다.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e그럼 아까 생성했던 OrderBuilder 클래스는 test가 아닌 testFixtures 디렉토리로 이동시켜준 후 build를 했을 때 수행되는 Gradle Task들을 보게 되면 testFixture 관련된 task가 추가된 걸 알 수 있습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-shell\"\u003e./gradlew :domain:build\n\n...\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"bash\"\u003e Task :domain:compileTestFixturesKotlin\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"bash\"\u003e Task :domain:compileTestFixturesJava NO-SOURCE\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"bash\"\u003e Task :domain:processTestFixturesResources NO-SOURCE\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"bash\"\u003e Task :domain:testFixturesClasses UP-TO-DATE\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"bash\"\u003e Task :domain:testFixturesJar\u003c/span\u003e\n...\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-7\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eShell Session\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003eshell\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e그리고 빌드된 결과물을 보면 test-fixtures.jar가 추가된 걸 볼 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-30-1.png\" alt=\"\" class=\"wp-image-374\" width=\"327\" height=\"430\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-30-1.png 704w, https://toss.tech/wp-content/uploads/2022/06/Untitled-30-1-228x300.png 228w\" sizes=\"(max-width: 327px) 100vw, 327px\" /\u003e\u003cfigcaption\u003eplain.jar는 plain에, test-fixtures.jar는 test에 각각 풀었는데 OrderBuilder는 test에 존재하는 걸 보니 test-fixtures.jar에 존재한다는 걸 알 수 있습니다.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e여기서 또 java-test-fixtures 플러그인의 장점이 나오게 되는데 다른 모듈에서 불필요하게 여기는 클래스들(test 디렉토리에 있는 \u003ccode\u003e@Test\u003c/code\u003e 어노테이션이 붙은 테스트 코드들 등등)은 노출되지 않고, 필요한 클래스들(testFixtures 디렉토리에 있는 Helper나 Builder 클래스 등등)만 노출된다는 점입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e하지만 이렇게 했다고 해서 아직 application이나 db 모듈에서 OrderBuilder를 import 할 수 있는 건 아닙니다. application과 db 모듈에서는 plain.jar에 의존하고 있는 것이지, test-fixtures.jar에 의존하고 있는 건 아니기 때문입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e따라서 application과 db 모듈에서 test-fixtures.jar에 의존하도록 각 모듈의 build.gradle.kts에 추가해줘야합니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// application/db 모듈의 build.gradle.kts\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003edependencies\u003c/span\u003e {\n    implementation(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":domain\"\u003c/span\u003e))\n    testImplementation(testFixtures(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":domain\"\u003c/span\u003e)))\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-8\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e위와 같이 의존성을 추가해줘야 비로소 application과 db 모듈의 테스트 코드에서도 domain 모듈의 testFixtures에 존재하는 OrderBuilder를 사용할 수 있게 됩니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"425\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-1024x425.png\" alt=\"\" class=\"wp-image-357\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-1024x425.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-300x124.png 300w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM-768x318.png 768w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.47.39-AM.png 1360w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003cfigcaption\u003e이해하기 쉽게 모듈 간의 디렉토리 관계를 좀 더 세분화해서 표현해보았습니다.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e테스트 전용으로 추가한 의존성을 다른 모듈에게 노출시키기\u003c/h2\u003e\n\n\n\n\u003cp\u003edb 모듈의 통합테스트를 위해 인메모리 DB인 \u003ca rel=\"noreferrer noopener\" href=\"https://www.h2database.com/\" target=\"_blank\"\u003eH2\u003c/a\u003e를 테스트 전용으로 의존성을 추가했다고 가정해보겠습니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-31-1024x685.png\" alt=\"\" class=\"wp-image-358\" width=\"368\" height=\"246\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-31-1024x685.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Untitled-31-300x201.png 300w, https://toss.tech/wp-content/uploads/2022/06/Untitled-31-768x514.png 768w, https://toss.tech/wp-content/uploads/2022/06/Untitled-31.png 1136w\" sizes=\"(max-width: 368px) 100vw, 368px\" /\u003e\u003cfigcaption\u003e이미지 출처: \u003ca href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\"\u003eGradle Docs\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// db 모듈의 build.gradle.kts\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003edependencies\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n    testRuntimeOnly(\u003cspan class=\"hljs-string\"\u003e\"com.h2database:h2\"\u003c/span\u003e)\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-9\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e이 상태에서 db 모듈의 통합테스트를 돌리게 되면 H2 DB를 사용하여 실제 DB와 격리된 환경에서 테스트가 돌아가는 것을 볼 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e그리고 application 모듈은 아래와 같이 db 모듈에 의존하고 있기 때문에 통합테스트를 작성할 때도 인메모리 DB를 쓸 것이라 희망하게 되는데 실제로 테스트를 짜고 돌려보면 그렇지 않습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// application 모듈의 build.gradle.kts\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003edependencies\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n    runtimeOnly(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":db\"\u003c/span\u003e))\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-10\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-32.png\" alt=\"\" class=\"wp-image-359\" width=\"328\" height=\"335\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-32.png 832w, https://toss.tech/wp-content/uploads/2022/06/Untitled-32-293x300.png 293w, https://toss.tech/wp-content/uploads/2022/06/Untitled-32-768x786.png 768w\" sizes=\"(max-width: 328px) 100vw, 328px\" /\u003e\u003cfigcaption\u003egradle 모듈의 디펜던시를 보게 되면 db 모듈의 testRuntimeClasspath에는 H2가 존재하지만, application 모듈의 testRuntimeClasspath에 존재하는 db 모듈에는 H2가 존재하지 않기 때문입니다.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e이 때도 application 모듈의 build.gradle.kts에 H2를 의존성으로 추가하는 방법이 있겠지만 관심사 문제가 있습니다. application 모듈의 관심사는 ‘어떻게 클라이언트와 커뮤니케이션해서 요구사항을 만족시킬 것인가?’이지 세부적인 내용(’저장소는 무엇을 쓸까? 데이터는 어디서 저장하고 어떻게 불러올까?’ 같은)은 관심사가 아닙니다. 따라서 H2를 직접적으로 의존성을 추가하는 순간 관심사 분리가 제대로 되지 않게 됩니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e이 문제를 해결하기 위해 또 우리의 구세주 java-test-fixtures 플러그인이 필요합니다.\u003c/p\u003e\n\n\n\n\u003ch3\u003etestFixturesComplieClasspath와 testFixturesRuntimeClasspath\u003c/h3\u003e\n\n\n\n\u003cp\u003e우선 외부에 테스트 전용 의존성(H2)을 노출시키고 싶은 db 모듈에 java-test-fixtures 플러그인을 추가하고, \u003ccode\u003etestRuntimeOnly\u003c/code\u003e로 추가했던 H2 의존성을 \u003ccode\u003etestFixturesRuntimeOnly\u003c/code\u003e로 변경해줘야 합니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e// db 모듈의 build.gradle.kts\u003c/span\u003e\nplugins {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 플러그인들...\u003c/span\u003e\n    \u003cspan class=\"hljs-string\"\u003e`java-test-fixtures`\u003c/span\u003e\n}\n\ndependencies {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n    testFixturesRuntimeOnly(\u003cspan class=\"hljs-string\"\u003e\"com.h2database:h2\"\u003c/span\u003e)\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-11\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eJavaScript\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ejavascript\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e그리고 나서 다시 db 모듈의 디펜더시를 보면 기존에 보지 못했던 \u003ccode\u003etestFixturesCompileClasspath\u003c/code\u003e와 \u003ccode\u003etestFixturesRuntimeClasspath\u003c/code\u003e가 추가된 게 보입니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e사실 두 가지 클래스패스는 java-test-fixtures 플러그인을 추가하기만 해도 추가되는 클래스패스입니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-33.png\" alt=\"\" class=\"wp-image-360\" width=\"323\" height=\"409\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-33.png 762w, https://toss.tech/wp-content/uploads/2022/06/Untitled-33-237x300.png 237w\" sizes=\"(max-width: 323px) 100vw, 323px\" /\u003e\u003cfigcaption\u003e여기서 눈여겨봐야할 것은 기존에는 testRuntimeClasspath에만 존재하던 H2 의존성이 testFixturesRuntimeClasspath에도 추가된 점입니다.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e이에 대한 해답은 \u003ca rel=\"noreferrer noopener\" href=\"https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures\" target=\"_blank\"\u003ejava-test-fixtures 플러그인\u003c/a\u003e 문서를 보다보면 아래와 같은 내용에 나오게 됩니다.\u003c/p\u003e\n\n\n\n\u003cblockquote class=\"wp-block-quote\"\u003e\u003cp\u003eTest fixtures are configured so that: \u003cbr\u003e• they can see the\u0026nbsp;\u003cem\u003e\u003cstrong\u003emain\u003c/strong\u003e\u003c/em\u003e\u0026nbsp;source set classes \u003cbr\u003e\u003cem\u003e• \u003cstrong\u003etest sources\u003c/strong\u003e\u003c/em\u003e can see the \u003cem\u003e\u003cstrong\u003etest fixtures\u003c/strong\u003e\u003c/em\u003e classes\u003c/p\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e두 번째로 나와있는 테스트 소스(test 디렉토리에 있는 내용들)에서 test fixture(testFixtures 디렉토리에 있는 내용들)에 있는 내용을 참조(can see)할 수 있도록 구성된다는 내용이 핵심입니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.52.05-AM.png\" alt=\"\" class=\"wp-image-361\" width=\"348\" height=\"288\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.52.05-AM.png 744w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-12.52.05-AM-300x249.png 300w\" sizes=\"(max-width: 348px) 100vw, 348px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e따라서 \u003ccode\u003etestFixturesRuntimeOnly\u003c/code\u003e로만 추가(\u003ccode\u003etestFixturesRuntimeClassPath\u003c/code\u003e)했지만 \u003ccode\u003etestRuntimeOnly\u003c/code\u003e로도 추가된 것과 동일한 효과(\u003ccode\u003etestRuntimeClasspath\u003c/code\u003e에 추가된 효과)를 같이 보게 됩니다. 따라서 db 모듈의 통합테스트를 돌렸을 때는 여전히 H2 DB를 사용하게 됩니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e하지만 H2를 db 모듈에 \u003ccode\u003etestFixturesRuntimeClasspath\u003c/code\u003e에 추가했지만, 여전히 application 모듈의 \u003ccode\u003etestRuntimeClasspath\u003c/code\u003e를 보면 아직도 db 모듈에는 H2 의존성이 추가되지 않은 모습을 볼 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-34.png\" alt=\"\" class=\"wp-image-362\" width=\"317\" height=\"355\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-34.png 784w, https://toss.tech/wp-content/uploads/2022/06/Untitled-34-267x300.png 267w, https://toss.tech/wp-content/uploads/2022/06/Untitled-34-768x862.png 768w\" sizes=\"(max-width: 317px) 100vw, 317px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e그 이유는 application 모듈의 build.gradle.kts를 보면 알 수 있습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// application 모듈의 build.gradle.kts\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003edependencies\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n    runtimeOnly(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":db\"\u003c/span\u003e))\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-12\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-35-1024x687.png\" alt=\"\" class=\"wp-image-363\" width=\"343\" height=\"230\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-35-1024x687.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Untitled-35-300x201.png 300w, https://toss.tech/wp-content/uploads/2022/06/Untitled-35-768x515.png 768w, https://toss.tech/wp-content/uploads/2022/06/Untitled-35.png 1142w\" sizes=\"(max-width: 343px) 100vw, 343px\" /\u003e\u003cfigcaption\u003e이미지 출처: \u003ca href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\"\u003eGradle Docs\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e바로 정답은 \u003ccode\u003eruntimeOnly\u003c/code\u003e 키워드에 있습니다.\u003cbr\u003e\u003ccode\u003eruntimeOnly\u003c/code\u003e로 추가한 디펜던시는 \u003ccode\u003etestRuntimeClasspath\u003c/code\u003e에도 추가됩니다. (물론 \u003ccode\u003eruntimeClasspath\u003c/code\u003e에도 추가됩니다.)\u003cbr\u003e하지만 \u003ccode\u003etestRuntimeClasspath\u003c/code\u003e에 추가된 의존성은 외부 모듈에 노출되지 않는다는 특성이 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e따라서 우리는 db 모듈의 \u003ccode\u003etestRuntimeClasspath\u003c/code\u003e가 아닌 \u003ccode\u003etestFixturesRuntimeClasspath\u003c/code\u003e에 추가된 의존성들에 주목해야하며 해당 의존성들이 추가되도록 application 모듈의 build.gradle.kts를 수정해야 합니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Gradle\" data-shcb-language-slug=\"gradle\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-gradle\"\u003e\u003cspan class=\"hljs-comment\"\u003e// application 모듈의 build.gradle.kts\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003edependencies\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e// 기타 디펜던시들...\u003c/span\u003e\n    runtimeOnly(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":db\"\u003c/span\u003e))\n    testRuntimeOnly(testFixtures(\u003cspan class=\"hljs-keyword\"\u003eproject\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\":db\"\u003c/span\u003e)))\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-13\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eGradle\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003egradle\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e마지막 부분이 db 모듈의 \u003ccode\u003etestFixturesRuntimeClasspath\u003c/code\u003e에 있는 의존성을 \u003ccode\u003etestRuntimeOnly\u003c/code\u003e로 추가(\u003ccode\u003etestRuntimeClasspath\u003c/code\u003e에 추가)하는 내용입니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large is-resized\"\u003e\u003cimg loading=\"lazy\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Untitled-36.png\" alt=\"\" class=\"wp-image-364\" width=\"378\" height=\"465\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Untitled-36.png 802w, https://toss.tech/wp-content/uploads/2022/06/Untitled-36-244x300.png 244w, https://toss.tech/wp-content/uploads/2022/06/Untitled-36-768x946.png 768w\" sizes=\"(max-width: 378px) 100vw, 378px\" /\u003e\u003cfigcaption\u003e이제 application 모듈의 testRuntimeClasspath에도 db 모듈의 testFixutresRuntimeClasspath에 있는 H2 의존성이 추가된 걸 볼 수 있습니다.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"388\" src=\"https://wp.toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-1024x388.png\" alt=\"\" class=\"wp-image-412\" srcset=\"https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-1024x388.png 1024w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-300x114.png 300w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM-768x291.png 768w, https://toss.tech/wp-content/uploads/2022/06/Screen-Shot-2022-06-09-at-3.42.29-PM.png 1362w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e이 상태에서 application 모듈의 통합테스트를 돌리더라도 H2 DB를 사용하는 걸 볼 수 있습니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e결론\u003c/h2\u003e\n\n\n\n\u003cp\u003e테스트 코드는 실제 프로덕션에 영향을 미치지 않으므로 신경을 덜 쓰기 마련입니다. 그러다보면 중복이 난무하고 관심사 분리도 제대로 되지 않고 의존성 지옥에 빠지기 십상입니다. 하지만 테스트 코드는 우리의 소프트웨어를 좀 더 나은 설계로 유도하며 안정감도 주기 때문에 품질을 관리해야하는 소프트웨어임에는 분명합니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e혹시 해당 포스트를 보고 ‘어, 그거 그렇게 하는 거 아닌데…’라는 생각이 들었다면 \u003ca href=\"https://toss.im/career/jobs?company=%ED%86%A0%EC%8A%A4%ED%8E%98%EC%9D%B4%EB%A8%BC%EC%B8%A0\"\u003e토스페이먼츠\u003c/a\u003e에 와서 신나게 토론할 준비가 되어있으니 언제든 환영합니다!\u003c/p\u003e\n","date":"2022-06-09T00:17:10","excerpt":"\u003cp\u003e혹시 테스트 코드에서도 의존성을 관리해본 적이 있으실까요? 해당 포스트에서는 Gradle의 java-test-fixtures 플러그인을 사용하여 테스트 의존성 관리를 통해 높은 품질의 테스트 코드를 유지하는 방법을 알아봅니다.\u003c/p\u003e\n","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code-300x150.png 300w, https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code-768x384.png 768w, https://toss.tech/wp-content/uploads/2022/06/techblog-10-test-code.png 1200w"}},"metadata":{"ogBackground":"https://static.toss.im/assets/tech-blog/og-image:/techblog-10-test-code-og.png","ogImageTitle":"테스트 의존성 관리로\r\n높은 품질의\r\n테스트 코드 유지하기","ogGenerateImage":null,"recruitTitle":"재미있게 읽으셨나요?","recruitUrl":null,"form1Url":"https://8cv5m2yf13x.typeform.com/to/OtpZIYiQ#no=334\u0026title=테스트_의존성_관리로_높은_품질의_테스트_코드_유지하기\u0026reaction=good","form2Url":"https://8cv5m2yf13x.typeform.com/to/OtpZIYiQ#no=334\u0026title=테스트_의존성_관리로_높은_품질의_테스트_코드_유지하기\u0026reaction=bad","formDescription":"좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.","form1Label":"😍","form2Label":"🤔","recruitDescription":null},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}},{"node":{"id":"dGVybTox","name":"Uncategorized"}}]},"author":{"node":{"id":"dXNlcjoxNA==","firstName":"권성","lastName":"양","description":"개발과 조카를 사랑하는 토스페이먼츠 서버개발자 양권성입니다.","avatar":{"url":"https://secure.gravatar.com/avatar/b7c03d670c9c04da8a2374d37ee5dfa7?s=312\u0026d=mm\u0026r=g"},"role":{"role":"Server Developer"}}}},"relatedArticles":[{"title":"무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사","slug":"how-to-work-health-check-in-spring-boot-actuaotr","date":"2023-04-01T15:38:57","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}},{"node":{"id":"dGVybTox","name":"Uncategorized"}}]}},{"title":"ESLint와 AST로 코드 퀄리티 높이기","slug":"improving-code-quality-via-eslint-and-ast","date":"2023-03-31T15:47:53","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}}]}}]},"__N_SSP":true},"page":"/article/[slug]","query":{"slug":"how-to-manage-test-dependency-in-gradle"},"buildId":"QqBxegmptuUDYc8oCREsD","assetPrefix":"https://static.toss.im/frontend/toss-tech","runtimeConfig":{"ENV":"live","NODE_ENV":"production","PORT":"3000","ASSET_PREFIX":"https://static.toss.im/frontend/toss-tech","SERVICE":"toss-tech","SENTRY":{"DSN":"https://5eff657ed6ef486fb8af2dc5f9508abd@sentry.io/1242586","PUBLIC_KEY":"5eff657ed6ef486fb8af2dc5f9508abd","RELEASE":"toss-tech_1.0.103","SERVICE":"toss-tech","SERVICE_VERSION":"1.0.103"},"RENDER_TYPE":"ssr"},"isFallback":false,"gssp":true,"customServer":true,"scriptLoader":[]}</script></body></html>