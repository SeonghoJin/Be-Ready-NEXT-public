<!DOCTYPE html><html><head><link rel="stylesheet" href="https://static.toss.im/tds-pc/3.232.0/main.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/rss+xml" href="/rss.xml"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/atom+xml" href="/atom.xml"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/main.css"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/others.css"/><link rel="stylesheet" href="https://static.toss.im/tossface-font/tossface.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/activitystream+json" href="/feed.json"/><meta charSet="UTF-8"/><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover"/><meta name="author" content="Viva Republica"/><link rel="preconnect" href="https://static.toss.im"/><link rel="shortcut icon" href="https://static.toss.im/tds/favicon/favicon.ico"/><link rel="icon" type="image/png" sizes="16x16" href="https://static.toss.im/tds/favicon/favicon-16x16.png"/><link rel="icon" type="image/png" sizes="32x32" href="https://static.toss.im/tds/favicon/favicon-32x32.png"/><link rel="icon" type="image/png" sizes="48x48" href="https://static.toss.im/tds/favicon/favicon-48x48.png"/><link rel="icon" type="image/png" sizes="196x196" href="https://static.toss.im/tds/favicon/favicon-196x196.png"/><link rel="apple-touch-icon" sizes="57x57" href="https://static.toss.im/tds/favicon/apple-touch-icon-57x57.png"/><link rel="apple-touch-icon" sizes="72x72" href="https://static.toss.im/tds/favicon/apple-touch-icon-72x72.png"/><link rel="apple-touch-icon" sizes="114x114" href="https://static.toss.im/tds/favicon/apple-touch-icon-114x114.png"/><link rel="apple-touch-icon" sizes="120x120" href="https://static.toss.im/tds/favicon/apple-touch-icon-120x120.png"/><link rel="apple-touch-icon" sizes="144x144" href="https://static.toss.im/tds/favicon/apple-touch-icon-144x144.png"/><link rel="apple-touch-icon" sizes="152x152" href="https://static.toss.im/tds/favicon/apple-touch-icon-152x152.png"/><meta name="msapplication-TileImage" content="https://static.toss.im/tds/favicon/mstile-144x144.png"/><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-PQ5NV18TH1"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'G-PQ5NV18TH1');</script><script>(function(h,o,t,j,a,r){
    h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
    h._hjSettings={hjid:2399367,hjsv:6};
    a=o.getElementsByTagName('head')[0];
    r=o.createElement('script');r.async=1;
    r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
    a.appendChild(r);
})(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');</script><title>Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기</title><meta name="twitter:creator" content="Viva Republica"/><meta name="twitter:site" content="@Toss_service"/><meta name="twitter:card" content="summary_large_image"/><meta property="og:title" content="Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기"/><meta name="twitter:title" content="Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기"/><meta property="og:description" content="토스페이먼츠에서는 API docs를 REST Docs를 사용해서 작성할 수 있도록 권장하고 있습니다. 이 글에서는 DSL을 통해서 반복적인 REST Docs 테스트 코드 작성을 줄일 수 있는 방법을 알아봅니다.
"/><meta name="twitter:description" content="토스페이먼츠에서는 API docs를 REST Docs를 사용해서 작성할 수 있도록 권장하고 있습니다. 이 글에서는 DSL을 통해서 반복적인 REST Docs 테스트 코드 작성을 줄일 수 있는 방법을 알아봅니다.
"/><meta property="og:image" content="https://static.toss.im/assets/tech-blog/og-image:/techblog-08-rest-docs-og.png?v=2"/><meta name="twitter:image" content="https://static.toss.im/assets/tech-blog/og-image:/techblog-08-rest-docs-og.png?v=2"/><meta name="next-head-count" content="36"/><meta name="next-font-preconnect"/><link rel="preload" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" as="style"/><link rel="stylesheet" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/polyfills-5cd94c89d3acac5f.js"></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/webpack-a37367524f3d9e47.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/framework-5201cf011975c339.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/main-4ffd67ad72332dfe.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/_app-02461bb4136bedab.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/821-c2f4db054c6f6b42.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/935-149f2da2961c2b08.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/article/%5Bslug%5D-bf5a24035d1301de.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_buildManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_ssgManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_middlewareManifest.js" defer=""></script></head><body><div id="__next"><style data-emotion="css-global ubpbb5">html,body{padding:0;margin:0;font-family:'Toss Product Sans';}button{font-family:'Toss Product Sans';}p{margin:0;}</style><style data-emotion="css kcwxxw">.css-kcwxxw{position:-webkit-sticky;position:sticky;top:0;height:59px;}</style><nav class="p-navbar p-navbar--bottom-border css-kcwxxw"><div class="p-container p-container--default"><div class="p-container__inner p-navbar__inner-container"><div class="p-navbar__logo-container"><a class="p-navbar__logo-icon" href="/tech"><span class="icon p-icon" aria-hidden="true" role="presentation" style="height:auto;width:auto;min-width:24px"></span></a></div><div class="p-navbar__right-on-mobile"></div><div class="p-navbar__content" aria-expanded="false" aria-hidden="true"><ul class="p-navbar__menu"></ul><ul class="p-navbar__menu"><li class="p-navbar__item"><a>디자인</a></li><li class="p-navbar__item"><a>개발</a></li><li class="p-navbar__item p-navbar__button-item"><button class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s p-navbar__button" type="button" aria-disabled="false">채용 바로가기</button></li></ul></div></div></div></nav><style data-emotion="css 1nquki8">.css-1nquki8{max-width:700px;margin-bottom:80px;}.css-1nquki8 .has-extra-large-font-size{font-size:20px;}.css-1nquki8 .has-large-font-size{font-size:18px;}.css-1nquki8 .has-small-font-size{font-size:14px;}.css-1nquki8 .has-extra-small-font-size{font-size:12px;}@media (max-width: 700px){.css-1nquki8{margin-bottom:64px;}}</style><div class="p-container p-container--default css-1nquki8"><div class="p-container__inner"><style data-emotion="css gtmad4">.css-gtmad4>*:not(style)~*:not(style){margin-top:54px;}@media (max-width: 700px){.css-gtmad4>*:not(style)~*:not(style){margin-top:48px;}}</style><article class="css-gtmad4"><style data-emotion="css 1095auh">.css-1095auh>*:not(style)~*:not(style){margin-top:20px;}</style><header class="css-1095auh"><style data-emotion="css iffq4o">.css-iffq4o{width:100%;margin-top:36px;border-radius:12px;}</style><img srcSet="https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs-300x150.png 300w, https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs-768x384.png 768w, https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs.png 1200w" alt="Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기" class="css-iffq4o e132k2574"/><style data-emotion="css 117sh4z">.css-117sh4z{margin-top:36px;margin-bottom:0;font-size:48px;font-weight:700;line-height:1.25;color:#333d4b;word-break:keep-all;overflow-wrap:break-word;}@media (max-width: 700px){.css-117sh4z{margin-top:28px;font-size:32px;}}</style><h1 class="css-117sh4z e132k2573">Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기</h1><style data-emotion="css s5xdrg">.css-s5xdrg{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}</style><section class="css-s5xdrg e2c667z4"><style data-emotion="css 1hdebld">.css-1hdebld{grid-area:image;width:48px;height:48px;border-radius:156px;margin-right:14px;}</style><img src="https://toss.tech/wp-content/uploads/2022/04/E01JAGTHP8R-U01JGK1JWJX-867cb0c757f7-512-312x312.png" alt="" class="css-1hdebld e2c667z3"/><div><style data-emotion="css 14d9k6d">.css-14d9k6d{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;grid-area:outline;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;padding-top:8px;font-size:17px;margin-bottom:2px;}@media (max-width: 700px){.css-14d9k6d>*+*{margin-top:4px;margin-left:0;}}</style><div class="css-14d9k6d e2c667z2"><style data-emotion="css 9krnkp">.css-9krnkp{grid-area:name;margin:0;font-size:17px;font-weight:600;color:#4e5968;white-space:nowrap;}</style><h3 class="css-9krnkp e2c667z1">한규주</h3><h3 class="css-9krnkp e2c667z1">ㆍ<!-- -->Server Developer</h3></div><style data-emotion="css 154r2lc">.css-154r2lc{font-size:14px;line-height:1.5;color:#8b95a1;}</style><div class="css-154r2lc e2c667z0">2022. 4. 11</div></div></section></header><style data-emotion="css 1k1kkv6">.css-1k1kkv6{font-size:18px;line-height:1.7;color:var(--grey700);font-size:18px;word-break:keep-all;overflow-wrap:break-word;counter-reset:p-post-ol 0;}.css-1k1kkv6 h2{margin:2.2em 0 0.6em 0;font-size:25px;font-weight:600;line-height:1.4;color:var(--grey900);}.css-1k1kkv6 h3{margin:2.2em 0 0.6em 0;font-size:22px;font-weight:600;line-height:1.6;color:var(--grey900);}.css-1k1kkv6 h4{margin:2.2em 0 0.3em 0;font-size:19px;font-weight:600;line-height:1.6;color:var(--grey700);}.css-1k1kkv6 p{margin:1em 0;}.css-1k1kkv6 p code,.css-1k1kkv6 li code{font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:3px;}.css-1k1kkv6 a{color:var(--blue700);}.css-1k1kkv6 pre{margin:2em -24px;}@media (max-width: 700px){.css-1k1kkv6 pre{margin:2em 0;}}.css-1k1kkv6 pre code{display:block;padding:16px 24px;overflow-x:auto;font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;line-height:1.5;word-wrap:normal;white-space:pre;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:12px;}.css-1k1kkv6 figure{margin:2em 0;overflow:hidden;border-radius:12px;width:100%;}.css-1k1kkv6 figure.aligncenter{text-align:center;}.css-1k1kkv6 ol,.css-1k1kkv6 ul{margin:0 0 16px;list-style:none;}.css-1k1kkv6 ol li,.css-1k1kkv6 ul li{position:relative;margin-bottom:8px;}.css-1k1kkv6 ol li:before,.css-1k1kkv6 ul li:before{position:absolute;left:0;}.css-1k1kkv6 ol li ol,.css-1k1kkv6 ul li ol{padding-left:0;margin:8px 0 0 -16px;}.css-1k1kkv6 ol li ul,.css-1k1kkv6 ul li ul{padding-left:0;margin-top:8px;}.css-1k1kkv6 ol li p,.css-1k1kkv6 ul li p{margin:0;}.css-1k1kkv6 ol{padding-left:16px;counter-reset:p-post-ol;}.css-1k1kkv6 ol>li{padding-left:32px;counter-increment:p-post-ol;}.css-1k1kkv6 ol>li:before{font-weight:700;font-weight:var(--font-weight-bold);content:counter(p-post-ol) '.';}.css-1k1kkv6 ul{padding-left:16px;}.css-1k1kkv6 ul>li{padding-left:24px;}.css-1k1kkv6 ul>li:before{width:16px;text-align:center;content:'•';}.css-1k1kkv6 figcaption{font-size:0.9em;color:var(--grey600);}.css-1k1kkv6 .wp-block-pullquote{margin:0;}.css-1k1kkv6 blockquote{padding:32px;background:var(--greyOpacity100);border-radius:12px;text-align:left;margin:16px 0 16px 0;}.css-1k1kkv6 blockquote p{color:#333d4b;font-weight:600;margin:0;}.css-1k1kkv6 blockquote cite{font-style:normal;}@media (max-width: 700px){.css-1k1kkv6 blockquote{padding:24px;}}.css-1k1kkv6 .wp-block-embed-youtube iframe{width:100%;border-radius:12px;}.css-1k1kkv6 ol{counter-reset:none;}.css-1k1kkv6 hr{border-top:1px solid #e5e8eb;border-right-style:none;border-left-style:none;border-bottom-style:none;margin:2.5rem 0;}.css-1k1kkv6 figure{display:table;text-align:center;}@media (max-width: 700px){.css-1k1kkv6 figure{width:100%;}}.css-1k1kkv6 figure img,.css-1k1kkv6 figure video{max-width:100%;height:auto;border:1px solid rgba(2,32,71,0.05);border-radius:12px;}.css-1k1kkv6 figure.alignright{float:right;margin:0 0 8px 24px;}@media (max-width: 700px){.css-1k1kkv6 figure.alignright{float:none;margin:0;}}.css-1k1kkv6 figcaption{display:table-caption;text-align:center;white-space:pre-wrap;caption-side:bottom;}.css-1k1kkv6 p:empty::before{content:'';}</style><div class="css-1k1kkv6 e132k2572"><div>
<p><strong>REST Docs 테스트 코드량을 70% 줄여주는 DSL 개발기</strong><br/><em>읽는 데 걸리는 시간: 6분</em></p>



<p></p>



<h2>DSL</h2>



<p>Domain Specific Languages(DSL)은 코드의 내부 로직을 숨기고 재사용성을 올려줍니다. 어떤 경우는 비 개발자가 사용하도록 고안되는 경우도 있어서, 일반적인 프로그래밍 언어보다 훨씬 쉬운 사용성을 가집니다. 핵심은 해당 도메인을 아는 사람이면 누구나 쉽게 해당 도메인을 제어할 수 있도록 DSL을 제공하는것이 목적이며, 그렇기 때문에 프로그래밍 언어가 아닌 일반적인 언어에 가깝도록 호출 방식을 설계합니다. 때문에 DSL 호출 내부에서 어떤 로직이 작동하는지는 사용자가 알도록 할 필요가 없으며 훨씬 더 간결하고 빠르게 코드를 작성할 수 있습니다.</p>



<h4>Spring REST Docs, 더 쉽고 간결하게 쓸 수 없을까</h4>



<p>토스페이먼츠에서는 API docs를 REST Docs를 사용해서 작성할 수 있도록 권장하고 있습니다. docs를 작성하는 행위 자체에서부터 API를 통합테스트할 수 있다는 점이 매력적이며, 인터페이스의 의도치 않은 변경을 감지할 수 있다는 장점이 있습니다. 문제는 독스를 작성할 때마다 테스트 코드를 작성해줘야 하기 때문에 Swagger 보다 더 번거롭게 작업하게 된다는 문제가 있습니다.</p>



<p>이 글에서는 DSL을 통해서 API 인터페이스의 안정성과 개발자의 생산성을 모두 가져갈 수 있는 방법을 소개합니다.</p>



<h2>REST Docs DSL</h2>



<p>먼저 기존의 작성법(AS-IS)과 DSL을 이용한 작성법(TO-BE)을 비교해보겠습니다.</p>



<h4>AS-IS.</h4>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="886" src="https://wp.toss.tech/wp-content/uploads/2022/04/Untitled-1024x886.png" alt="" class="wp-image-220" srcSet="https://toss.tech/wp-content/uploads/2022/04/Untitled-1024x886.png 1024w, https://toss.tech/wp-content/uploads/2022/04/Untitled-300x260.png 300w, https://toss.tech/wp-content/uploads/2022/04/Untitled-768x665.png 768w, https://toss.tech/wp-content/uploads/2022/04/Untitled-1536x1329.png 1536w, https://toss.tech/wp-content/uploads/2022/04/Untitled-2048x1772.png 2048w, https://toss.tech/wp-content/uploads/2022/04/Untitled-1568x1357.png 1568w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<h4>TO-BE.</h4>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="446" src="https://wp.toss.tech/wp-content/uploads/2022/04/Untitled2-1024x446.png" alt="" class="wp-image-221" srcSet="https://toss.tech/wp-content/uploads/2022/04/Untitled2-1024x446.png 1024w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-300x131.png 300w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-768x334.png 768w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-1536x669.png 1536w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-1568x683.png 1568w, https://toss.tech/wp-content/uploads/2022/04/Untitled2.png 1984w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>한 눈에 봐도 간결해보이지 않나요? AS-IS에서 볼 수 있듯, 기존의 작성법은 여러 문제가 있습니다.</p>



<ol><li><strong>반복적인 코드 호출이 많음.</strong> <br/>기존 작성법으로 작성할 때마다 생산성 저하를 느꼈습니다. API를 만드는 시간만큼이나 docs를 생성하는 시간이 걸린다니, 이것 참 비효율이지 않나요?<br/></li><li><strong>코드가 장황하여 읽히지 않음.</strong> <br/>인터페이스에 변화가 생기면 REST Docs 테스트 코드를 수정해야 하는데, 어떤 코드를 수정해야 하는지 빠르게 찾기가 어려웠습니다. 즉 해당 코드가 무엇을 수행하는지 한번에 읽기가 힘들고, 이 코드 수행 결과가 어떤 docs를 만들어낼지 단번에 떠올리기 어렵다는 단점이 있었습니다.</li></ol>



<p>첫 번째 단점은 기존의 다른 코드로부터 복붙으로 시간을 좀 줄여낼 수는 있었지만, 두 번째 단점은 참 신경 쓰였습니다. 저는 JSON과 같은 간결한 구조로부터 docs를 테스트하는 코드가 만들어지길 원했습니다.</p>



<h2>Kotlin으로 DSL 만들기</h2>



<p>다행히도 Kotlin은 여러 함수 선언 방식이 존재하여서, 이런 문제를 풀기에 매우 좋습니다. Kotlin의 테스트 코드 라이브러리인 Kotest와 MockK이 대표적인 사례라고 생각합니다.</p>



<h3>infix 함수</h3>



<p><a href="https://kotlinlang.org/docs/functions.html#infix-notation">Infix Notation (kotlinlang.org)</a></p>



<p>잘 만들어진 DSL은 인간의 자연어를 사용하듯이 자연스럽게 쓰고 읽힐 수 있어야 한다고 생각합니다. Kotlin의 infix notation은 이 목표를 달성하기에 최적의 도구입니다.</p>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="936" height="206" src="https://wp.toss.tech/wp-content/uploads/2022/04/3.png" alt="" class="wp-image-222" srcSet="https://toss.tech/wp-content/uploads/2022/04/3.png 936w, https://toss.tech/wp-content/uploads/2022/04/3-300x66.png 300w, https://toss.tech/wp-content/uploads/2022/04/3-768x169.png 768w" sizes="(max-width: 936px) 100vw, 936px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p><code>&quot;data.businessId&quot; type NUMBER</code>는 <code>&quot;data.businessId&quot;.type(NUMBER)</code>와 동일한 효과를 낳습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><link rel="stylesheet" id="syntax-highlighting-code-block-css" href="https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1" media="all"/><style>.wp-block-code {
	border: 0;
	padding: 0;
}

.wp-block-code > div {
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}
</style><div><code class="hljs language-kotlin"><span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">type</span><span class="hljs-params">(                    <span class="hljs-comment">// (1)</span>
    docsFieldType: <span class="hljs-type">DocsFieldType</span>
)</span></span>: Field {                                <span class="hljs-comment">// (2)</span>
    ...                                   <span class="hljs-comment">// (3)</span>
}</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<ul><li><strong>(1):</strong><ul><li>infix notation으로 해당 함수를 선언해줍니다.</li><li>type이라는 함수는 String을 receiver로 받는 함수입니다.</li><li>파라미터는 docsFieldType 하나만 받습니다 (<code>DocsFieldType</code>는 아래에서 서술합니다.)</li></ul></li><li><strong>(2):</strong> 원래 restdocs가 제공하던 FieldDescriptor를 유연하게 다루기 위해 Field라는 Wrapper 클래스를 정의합니다.</li><li><strong>(3):</strong> 원래의 RestDocs를 만들던 동작을 수행합니다</li></ul>



<p>infix 함수를 사용할때는 제한사항이 있습니다.</p>



<ul><li>호출할때는 receiver와 parameter가 명시적으로 있어야 함 (this로 암시적인 전달 불가능)</li><li>parameter는 하나여야 함 (default value도 지정할 수 없음)</li></ul>



<p>그래야만 “data” type OBJECT 처럼 간결한 구조를 만들어 낼 수 있기 때문입니다.</p>



<h4>DocsFieldType</h4>



<p>REST Docs에서는 응답, 요청 필드의 type을 JsonFieldType으로서 구분합니다.</p>



<p>여기에 저는 자주 사용하는 format인 Date, DateTime을 쉽게 정의할 방법을 찾고 싶었고, enum class도 간단히 전달하여 어떤 필드가 사용될 수 있는지 docs에 쉽게 표기하고 싶었습니다. date, datetime, enum은 모두 JsonFieldType.STRING이지만 format과 sample이 다르게 표시될 필요가 있는 특이 케이스이기 때문입니다.</p>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="446" src="https://wp.toss.tech/wp-content/uploads/2022/04/4-1024x446.png" alt="" class="wp-image-223" srcSet="https://toss.tech/wp-content/uploads/2022/04/4-1024x446.png 1024w, https://toss.tech/wp-content/uploads/2022/04/4-300x131.png 300w, https://toss.tech/wp-content/uploads/2022/04/4-768x334.png 768w, https://toss.tech/wp-content/uploads/2022/04/4-1536x668.png 1536w, https://toss.tech/wp-content/uploads/2022/04/4.png 1540w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>이런 식으로 정의한다면 아래 예시와 같이 간단하게 <code>Field</code>를 생성해내면서 <code>DocsFieldType</code>을 정의해낼 수 있습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-string">&quot;data&quot;</span> type OBJECT
<span class="hljs-string">&quot;id&quot;</span> type NUMBER
<span class="hljs-string">&quot;createdAt&quot;</span> type DATETIME</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<h4>DocsFieldType – enum</h4>



<p>다만 enum을 정의하고 싶을때는 조금 디테일이 필요합니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-string">&quot;companyType&quot;</span> type STRING example CompanyType::<span class="hljs-class"><span class="hljs-keyword">class</span></span></code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>로도 선언할 수는 있지만 매번 example을 호출해주는 건 조금 귀찮습니다. 어차피 enum이 string이라는건 누구나 다 아는 사실인데 두 함수 호출을 나눠야 할까요?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-string">&quot;companyType&quot;</span> type ENUM(CompanyType::<span class="hljs-class"><span class="hljs-keyword">class</span>)</span></code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>훨씬 간결해졌습니다.</p>



<p>다음과 같이 DocsFieldType을 확장한 sealedSubclass를 만든다면 위와 같은 dsl 작성이 가능합니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ENUM</span>&lt;<span class="hljs-type">T : Enum&lt;T</span>&gt;&gt;</span>(<span class="hljs-keyword">val</span> enums: Collection&lt;T&gt;) : DocsFieldType(JsonFieldType.STRING) {
  <span class="hljs-keyword">constructor</span>(clazz: KClass&lt;T&gt;) : <span class="hljs-keyword">this</span>(clazz.java.enumConstants.asList())   <span class="hljs-comment">// (1)</span>
}</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<ul><li>(1): secondary constructor 덕분에 모든 enum값이 아니라 특정 조건에 맞는 enum 값을 collection으로 넘길수도 있습니다.<ul><li>ex) 개인사업자에 해당하는 companyType만 해당 필드에 존재할 수 있을 때 <br/><code>&quot;individualCompanyType&quot; type ENUM(CompanyType.values().filter { it.isIndividual() })</code></li></ul></li></ul>



<p>이로써 type infix 함수는 아래와 같이 완성할 수 있습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">type</span><span class="hljs-params">(docsFieldType: <span class="hljs-type">DocsFieldType</span>)</span></span>: Field {
    <span class="hljs-keyword">val</span> field = createField(<span class="hljs-keyword">this</span>, docsFieldType.type)
    <span class="hljs-keyword">when</span> (docsFieldType) {
        <span class="hljs-keyword">is</span> DATE -&gt; field formattedAs RestDocsUtils.DATE_FORMAT
        <span class="hljs-keyword">is</span> DATETIME -&gt; field formattedAs RestDocsUtils.DATETIME_FORMAT
        <span class="hljs-keyword">else</span> -&gt; {}
    }
    <span class="hljs-keyword">return</span> field
}

<span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T : Enum&lt;T&gt;</span>&gt; String.<span class="hljs-title">type</span><span class="hljs-params">(enumFieldType: <span class="hljs-type">ENUM</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: Field {
    <span class="hljs-keyword">val</span> field = createField(<span class="hljs-keyword">this</span>, JsonFieldType.STRING, <span class="hljs-literal">false</span>)
    field.format = EnumFormattingUtils.enumFormat(enumFieldType.enums)
    <span class="hljs-keyword">return</span> field
}

<span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createField</span><span class="hljs-params">(value: <span class="hljs-type">String</span>, type: <span class="hljs-type">JsonFieldType</span>, optional: <span class="hljs-type">Boolean</span>)</span></span>: Field {
    <span class="hljs-keyword">val</span> descriptor = PayloadDocumentation.fieldWithPath(value)
        .type(type)
        .attributes(RestDocsUtils.emptySample(), RestDocsUtils.emptyFormat(), RestDocsUtils.emptyDefaultValue())
        .description(<span class="hljs-string">&quot;&quot;</span>)

    <span class="hljs-keyword">if</span> (optional) descriptor.optional()

    <span class="hljs-keyword">return</span> Field(descriptor)
}
</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<h3>Field 클래스에서 DSL 확장하기</h3>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="1024" height="109" src="https://wp.toss.tech/wp-content/uploads/2022/04/5-1024x109.png" alt="" class="wp-image-224" srcSet="https://toss.tech/wp-content/uploads/2022/04/5-1024x109.png 1024w, https://toss.tech/wp-content/uploads/2022/04/5-300x32.png 300w, https://toss.tech/wp-content/uploads/2022/04/5-768x82.png 768w, https://toss.tech/wp-content/uploads/2022/04/5-1536x164.png 1536w, https://toss.tech/wp-content/uploads/2022/04/5-1568x168.png 1568w, https://toss.tech/wp-content/uploads/2022/04/5.png 1778w" sizes="(max-width: 1024px) 100vw, 1024px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>이제 좀 더 욕심을 내봅시다. 위 예시처럼 얼마든지 함수 호출을 chaining할 수 있습니다.</p>



<p>어떤가요? 괄호로 계속 호출하는 것보다 좀 더 직관적이지 않나요?</p>



<p>type이라는 infix function이 <code>Field</code>를 반환할 수 있도록 했으니, <code>Field</code>에서 더 많은 DSL을 호출하도록 확장할 수 있게 되었습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Field</span></span>(
    <span class="hljs-keyword">val</span> descriptor: FieldDescriptor,
) {
    <span class="hljs-keyword">val</span> isIgnored: <span class="hljs-built_in">Boolean</span> = descriptor.isIgnored
    <span class="hljs-keyword">val</span> isOptional: <span class="hljs-built_in">Boolean</span> = descriptor.isOptional

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">open</span> <span class="hljs-keyword">var</span> <span class="hljs-keyword">default</span>: String
        <span class="hljs-keyword">get</span>() = descriptor.attributes.getOrDefault(RestDocsAttributeKeys.KEY_DEFAULT_VALUE, <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">as</span> String
        <span class="hljs-keyword">set</span>(value) {
            descriptor.attributes(RestDocsUtils.defaultValue(value))
        }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">open</span> <span class="hljs-keyword">var</span> format: String
        <span class="hljs-keyword">get</span>() = descriptor.attributes.getOrDefault(RestDocsAttributeKeys.KEY_FORMAT, <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">as</span> String
        <span class="hljs-keyword">set</span>(value) {
            descriptor.attributes(RestDocsUtils.customFormat(value))
        }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">open</span> <span class="hljs-keyword">var</span> sample: String
        <span class="hljs-keyword">get</span>() = descriptor.attributes.getOrDefault(RestDocsAttributeKeys.KEY_SAMPLE, <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">as</span> String
        <span class="hljs-keyword">set</span>(value) {
            descriptor.attributes(RestDocsUtils.customSample(value))
        }

  	<span class="hljs-keyword">open</span> <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">means</span><span class="hljs-params">(value: <span class="hljs-type">String</span>)</span></span>: Field {
        <span class="hljs-keyword">return</span> description(value)
    }

    <span class="hljs-keyword">open</span> <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">attributes</span><span class="hljs-params">(block: <span class="hljs-type">Field</span>.() -&gt; <span class="hljs-type">Unit</span>)</span></span>: Field {
        block()
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }

    <span class="hljs-keyword">open</span> <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">withDefaultValue</span><span class="hljs-params">(value: <span class="hljs-type">String</span>)</span></span>: Field {
        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">default</span> = value
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }

    <span class="hljs-keyword">open</span> <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">formattedAs</span><span class="hljs-params">(value: <span class="hljs-type">String</span>)</span></span>: Field {
        <span class="hljs-keyword">this</span>.format = value
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }

    <span class="hljs-keyword">open</span> <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">example</span><span class="hljs-params">(value: <span class="hljs-type">String</span>)</span></span>: Field {
        <span class="hljs-keyword">this</span>.sample = value
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }

    <span class="hljs-keyword">open</span> <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isOptional</span><span class="hljs-params">(value: <span class="hljs-type">Boolean</span>)</span></span>: Field {
        <span class="hljs-keyword">if</span> (value) descriptor.optional()
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }

    <span class="hljs-keyword">open</span> <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isIgnored</span><span class="hljs-params">(value: <span class="hljs-type">Boolean</span>)</span></span>: Field {
        <span class="hljs-keyword">if</span> (value) descriptor.ignored()
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }
}
</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>이렇게 얼마든지 코드를 확장해나갈 수 있을뿐더러, 해당 프로젝트에서 사용하는 REST Docs snippet의 attribute를 코드 상으로 좀 더 명확하게 정의할 수 있게 되었습니다.</p>



<h2>마무리</h2>



<p>이 글은 REST Docs의 반복적인 코드를 제거하고, docs의 생성이라는 본래의 목적을 달성하고자 기존 MockMvc 테스트코드 작성법에서 벗어나, REST Docs DSL을 만드는 방식으로 문제를 해결하고자 했습니다.</p>



<p>우리가 흔히 쓰는 gradle configuration 작성 방식인 build.gradle.kts 또한 org.gradle.kotlin.dsl에서 그 선언 방식을 찾아볼 수 있고, MockK이나 Kotest에서도 다양한 방식으로 Kotlin의 장점을 최대한 끌어낸 모습을 확인할 수 있습니다.</p>



<ul><li>build.gradle.kts (<a href="https://github.com/gradle/kotlin-dsl-samples">https://github.com/gradle/kotlin-dsl-samples</a>)</li><li>MockK의 every(<a href="https://mockk.io/#dsl-examples">https://mockk.io/#dsl-examples</a>),</li><li>Kotest의 여러 Testing Styles(<a href="https://kotest.io/docs/framework/testing-styles.html">https://kotest.io/docs/framework/testing-styles.html</a>)</li></ul>



<p>혹시나 여러분도 반복적인 작업을 일일히 복붙으로 하고 있다면 여러분의 팀만을 위한 DSL을 만들어보는 건 어떨까요?</p>



<p style="line-height:4"></p>



<p>이 REST Docs DSL은 토스페이먼츠 *<em>엔지니어링 데이</em>에 장태영(Server Developer, taeyoung.jang@tosspayments.com)님과 함께 만들었습니다.</p>



<p>*토스페이먼츠에서는 매주 목요일에 엔지니어링 데이를 진행하고 있어요. 이 시간에는 평소 업무에 병목이 되는 문제들을 해결하거나, 인프라를 개선하는 등의 작업을 진행합니다.</p>
</div></div><style data-emotion="css auig7l">.css-auig7l{margin-top:96px;}</style><style data-emotion="css x7fajo">.css-x7fajo{margin-top:96px;}.css-x7fajo>*:not(style)~*:not(style){margin-left:24px;}</style><style data-emotion="css 6rfvv8">.css-6rfvv8{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;margin-top:96px;}.css-6rfvv8>*:not(style)~*:not(style){margin-left:24px;}</style><div class="css-6rfvv8"><style data-emotion="css 1n0u3h">.css-1n0u3h{background-color:#f9fafb;width:100%;height:auto;border-radius:12px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:48px;}@media (max-width: 700px){.css-1n0u3h{padding:32px;}}</style><div class="css-1n0u3h e1t1xt3a7"><style data-emotion="css 6cc9f0">.css-6cc9f0{font-size:24px;font-weight:700;margin-bottom:16px;color:#4e5968;}</style><h2 class="css-6cc9f0 e1t1xt3a6">재미있게 읽으셨나요?</h2><style data-emotion="css 1wmgpcn">.css-1wmgpcn{font-size:16px;line-height:1.5;font-weight:600;color:#6b7684;margin-bottom:4px;}</style><p class="css-1wmgpcn e1t1xt3a5">좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><style data-emotion="css 4qu8li">.css-4qu8li{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-top:16px;}</style><div class="css-4qu8li e1t1xt3a3"><style data-emotion="css 1fmr5ax">.css-1fmr5ax{display:block;font-family:'tossface';font-size:40px;cursor:pointer;margin:0 12px;-webkit-transition:0.15s ease-in-out all;transition:0.15s ease-in-out all;}.css-1fmr5ax a{-webkit-text-decoration:none;text-decoration:none;}.css-1fmr5ax:hover{-webkit-transform:scale(1.2);-moz-transform:scale(1.2);-ms-transform:scale(1.2);transform:scale(1.2);}</style><div class="css-1fmr5ax e1t1xt3a1">😍</div><div class="css-1fmr5ax e1t1xt3a1">🤔</div></div><style data-emotion="css 1p3zmjw">.css-1p3zmjw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;margin-top:16px;}.css-1p3zmjw button,.css-1p3zmjw a{margin:0 12px;}@media (max-width: 700px){.css-1p3zmjw{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;}.css-1p3zmjw button,.css-1p3zmjw a{width:100%;margin:8px 0;}}</style><div class="css-1p3zmjw e1t1xt3a0"><style data-emotion="css 1u8jkqx">.css-1u8jkqx{display:grid;grid-template-columns:min-content auto;grid-column-gap:8px;}</style><button class="p-button p-button--primary p-button--inline p-button--weak p-button--default p-button--has-icon padding--base css-1u8jkqx" type="button" aria-disabled="false"><span class="icon p-icon icon--colored p-icon--colored" aria-hidden="true" role="presentation" style="height:16px;width:16px;min-width:16px;color:#3182f6"></span>아티클 공유하기</button></div></div></div></article><style data-emotion="css 1lsuzal">.css-1lsuzal{margin-top:100px;}.css-1lsuzal::before{content:'';position:absolute;width:100%;height:1px;left:0;border-bottom:1px solid #e5e8eb;}</style><div class="css-1lsuzal e132k2571"><style data-emotion="css 1ympfnp">.css-1ympfnp{display:inline-block;width:100%;font-size:20px;margin:34px 0 40px 0;}</style><span class="typography typography--h3 typography--bold color--grey800 css-1ympfnp e132k2570">이어지는 글</span><style data-emotion="css vivlm7">.css-vivlm7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;margin-bottom:40px;}.css-vivlm7:last-of-type{margin-bottom:0px;}.css-vivlm7:hover .egyklng4{color:#3182f6;}</style><div class="css-vivlm7 egyklng3"><style data-emotion="css bc0lqn">.css-bc0lqn{width:80px;height:80px;margin-right:20px;border-radius:12px;object-fit:cover;}@media (max-width: 700px){.css-bc0lqn{width:64px;height:64px;}}</style><img srcSet="https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w" class="css-bc0lqn egyklng2"/><style data-emotion="css 1fttcpj">.css-1fttcpj{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}</style><div class="css-1fttcpj egyklng1"><style data-emotion="css p4blj2">.css-p4blj2{font-size:24px;margin-bottom:4px;word-break:keep-all;line-height:1.4;overflow-wrap:break-word;-webkit-transition:color 0.3s ease;transition:color 0.3s ease;-webkit-line-clamp:2;display:block;}@media (max-width: 700px){.css-p4blj2{font-size:18px;-webkit-line-clamp:2;}}</style><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사</span><style data-emotion="css 1jxhn1e">.css-1jxhn1e{color:#8b95a1;}</style><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 04. 01</span></div></div><div class="css-vivlm7 egyklng3"><img srcSet="https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w" class="css-bc0lqn egyklng2"/><div class="css-1fttcpj egyklng1"><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">ESLint와 AST로 코드 퀄리티 높이기</span><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 03. 31</span></div></div></div></div></div><style data-emotion="css 1d2vuhc">.css-1d2vuhc{padding:60px 24px;word-break:keep-all;overflow-wrap:break-word;background:rgba(2,9,19,0.91);}@media (max-width: 700px){.css-1d2vuhc{padding-top:24px;}}</style><section class="css-1d2vuhc eqrolup4"><style data-emotion="css yf0lpd">.css-yf0lpd{display:grid;grid-template-columns:3fr 7fr;grid-column-gap:20px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;max-width:640px;margin:0 auto;content-visibility:auto;}@media (max-width: 700px){.css-yf0lpd{grid-template-rows:min-content auto;grid-template-columns:1fr;grid-row-gap:24px;}}</style><div class="css-yf0lpd eqrolup2"><style data-emotion="css 1d33yk5">.css-1d33yk5{width:100%;}@media (max-width: 700px){.css-1d33yk5{width:90px;}}</style><img src="https://static.toss.im/3d/website_code_blue_alpha.png" alt="" class="css-1d33yk5 eqrolup3"/><style data-emotion="css 1gb2pj4">.css-1gb2pj4>*:not(style)~*:not(style){margin-top:24px;}</style><style data-emotion="css 7xmgw5">.css-7xmgw5{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-7xmgw5>*:not(style)~*:not(style){margin-top:24px;}</style><div class="css-7xmgw5"><style data-emotion="css 1pbuvpm">.css-1pbuvpm>*:not(style)~*:not(style){margin-top:8px;}</style><style data-emotion="css nbpfuv">.css-nbpfuv{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-nbpfuv>*:not(style)~*:not(style){margin-top:8px;}</style><div class="css-nbpfuv"><style data-emotion="css 19gu4b8">.css-19gu4b8{margin:0;font-size:26px;line-height:1.4;color:#ffffff;}@media (max-width: 700px){.css-19gu4b8{font-size:20px;}}</style><h3 class="css-19gu4b8 eqrolup1">토스팀이 만드는 수많은 혁신의 순간들</h3><style data-emotion="css shfxsq">.css-shfxsq{font-size:17px;line-height:1.5;color:#e5e8eb;}@media (max-width: 700px){.css-shfxsq{font-size:16px;}}</style><div class="css-shfxsq eqrolup0">당신과 함께 만들고 싶습니다.<br/>지금, 토스팀에 합류하세요.</div></div><a class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s" aria-disabled="false" href="https://toss.im/career/jobs?gh_src=38b73b7a3us">채용 중인 공고 보기</a></div></div></section><footer class="p-footer p-footer--light"><div class="p-footer__inner"><div class="p-footer__site-group-list"><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스테크</div></li><li class="p-footer__site-group-item"><a href="mailto:techblog@toss.im">의견 보내기</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스</div></li><li class="p-footer__site-group-item"><a href="https://toss.im">홈페이지</a></li><li class="p-footer__site-group-item"><a href="https://team.toss.im">회사 소개</a></li><li class="p-footer__site-group-item"><a href="https://toss.im/career">채용</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">고객센터</div></li><li class="p-footer__site-group-item"><a href="tel:1599-4905">전화: 1599-4905 (24시간 연중무휴)</a></li><li class="p-footer__site-group-item"><a href="mailto:support.toss.im">이메일: support@toss.im</a></li><li class="p-footer__site-group-item"><a href="https://goto.kakao.com/@toss">카카오톡: @toss</a></li></ul></div><address class="p-footer__address"><strong class="p-footer__address__company-name">㈜비바리퍼블리카</strong>Copyright © Viva Republica, Inc. All Rights Reserved.</address><ul class="p-footer__term-wrapper"></ul><ul class="p-footer__social-list"><li class="p-footer__social-list-item"><a aria-label="Toss Facebook" target="_blank" href="https://www.facebook.com/toss.revolution"><img src="https://static.toss.im/assets/homepage/safety/icn-facebook.svg" alt="Toss Facebook"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss blog" target="_blank" href="https://blog.toss.im"><img src="https://static.toss.im/assets/homepage/safety/icn-blog.svg" alt="Toss blog"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Naver Post" target="_blank" href="https://post.naver.com/tossblog"><img src="https://static.toss.im/assets/homepage/safety/icn-naver.svg" alt="Toss Naver Post"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Twitter" target="_blank" href="https://twitter.com/toss__official"><img src="https://static.toss.im/assets/homepage/safety/icn-twitter.svg" alt="Toss Twitter"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Instagram" target="_blank" href="https://www.instagram.com/toss.im/"><img src="https://static.toss.im/assets/homepage/safety/icn-instagram.svg" alt="Toss Instagram"/></a></li></ul></div></footer><div id="tds-pc__portal-container"></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기","content":"\n\u003cp\u003e\u003cstrong\u003eREST Docs 테스트 코드량을 70% 줄여주는 DSL 개발기\u003c/strong\u003e\u003cbr\u003e\u003cem\u003e읽는 데 걸리는 시간: 6분\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eDSL\u003c/h2\u003e\n\n\n\n\u003cp\u003eDomain Specific Languages(DSL)은 코드의 내부 로직을 숨기고 재사용성을 올려줍니다. 어떤 경우는 비 개발자가 사용하도록 고안되는 경우도 있어서, 일반적인 프로그래밍 언어보다 훨씬 쉬운 사용성을 가집니다. 핵심은 해당 도메인을 아는 사람이면 누구나 쉽게 해당 도메인을 제어할 수 있도록 DSL을 제공하는것이 목적이며, 그렇기 때문에 프로그래밍 언어가 아닌 일반적인 언어에 가깝도록 호출 방식을 설계합니다. 때문에 DSL 호출 내부에서 어떤 로직이 작동하는지는 사용자가 알도록 할 필요가 없으며 훨씬 더 간결하고 빠르게 코드를 작성할 수 있습니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003eSpring REST Docs, 더 쉽고 간결하게 쓸 수 없을까\u003c/h4\u003e\n\n\n\n\u003cp\u003e토스페이먼츠에서는 API docs를 REST Docs를 사용해서 작성할 수 있도록 권장하고 있습니다. docs를 작성하는 행위 자체에서부터 API를 통합테스트할 수 있다는 점이 매력적이며, 인터페이스의 의도치 않은 변경을 감지할 수 있다는 장점이 있습니다. 문제는 독스를 작성할 때마다 테스트 코드를 작성해줘야 하기 때문에 Swagger 보다 더 번거롭게 작업하게 된다는 문제가 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e이 글에서는 DSL을 통해서 API 인터페이스의 안정성과 개발자의 생산성을 모두 가져갈 수 있는 방법을 소개합니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003eREST Docs DSL\u003c/h2\u003e\n\n\n\n\u003cp\u003e먼저 기존의 작성법(AS-IS)과 DSL을 이용한 작성법(TO-BE)을 비교해보겠습니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003eAS-IS.\u003c/h4\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"886\" src=\"https://wp.toss.tech/wp-content/uploads/2022/04/Untitled-1024x886.png\" alt=\"\" class=\"wp-image-220\" srcset=\"https://toss.tech/wp-content/uploads/2022/04/Untitled-1024x886.png 1024w, https://toss.tech/wp-content/uploads/2022/04/Untitled-300x260.png 300w, https://toss.tech/wp-content/uploads/2022/04/Untitled-768x665.png 768w, https://toss.tech/wp-content/uploads/2022/04/Untitled-1536x1329.png 1536w, https://toss.tech/wp-content/uploads/2022/04/Untitled-2048x1772.png 2048w, https://toss.tech/wp-content/uploads/2022/04/Untitled-1568x1357.png 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003ch4\u003eTO-BE.\u003c/h4\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"446\" src=\"https://wp.toss.tech/wp-content/uploads/2022/04/Untitled2-1024x446.png\" alt=\"\" class=\"wp-image-221\" srcset=\"https://toss.tech/wp-content/uploads/2022/04/Untitled2-1024x446.png 1024w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-300x131.png 300w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-768x334.png 768w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-1536x669.png 1536w, https://toss.tech/wp-content/uploads/2022/04/Untitled2-1568x683.png 1568w, https://toss.tech/wp-content/uploads/2022/04/Untitled2.png 1984w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e한 눈에 봐도 간결해보이지 않나요? AS-IS에서 볼 수 있듯, 기존의 작성법은 여러 문제가 있습니다.\u003c/p\u003e\n\n\n\n\u003col\u003e\u003cli\u003e\u003cstrong\u003e반복적인 코드 호출이 많음.\u003c/strong\u003e \u003cbr\u003e기존 작성법으로 작성할 때마다 생산성 저하를 느꼈습니다. API를 만드는 시간만큼이나 docs를 생성하는 시간이 걸린다니, 이것 참 비효율이지 않나요?\u003cbr\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e코드가 장황하여 읽히지 않음.\u003c/strong\u003e \u003cbr\u003e인터페이스에 변화가 생기면 REST Docs 테스트 코드를 수정해야 하는데, 어떤 코드를 수정해야 하는지 빠르게 찾기가 어려웠습니다. 즉 해당 코드가 무엇을 수행하는지 한번에 읽기가 힘들고, 이 코드 수행 결과가 어떤 docs를 만들어낼지 단번에 떠올리기 어렵다는 단점이 있었습니다.\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003cp\u003e첫 번째 단점은 기존의 다른 코드로부터 복붙으로 시간을 좀 줄여낼 수는 있었지만, 두 번째 단점은 참 신경 쓰였습니다. 저는 JSON과 같은 간결한 구조로부터 docs를 테스트하는 코드가 만들어지길 원했습니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003eKotlin으로 DSL 만들기\u003c/h2\u003e\n\n\n\n\u003cp\u003e다행히도 Kotlin은 여러 함수 선언 방식이 존재하여서, 이런 문제를 풀기에 매우 좋습니다. Kotlin의 테스트 코드 라이브러리인 Kotest와 MockK이 대표적인 사례라고 생각합니다.\u003c/p\u003e\n\n\n\n\u003ch3\u003einfix 함수\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://kotlinlang.org/docs/functions.html#infix-notation\"\u003eInfix Notation (kotlinlang.org)\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e잘 만들어진 DSL은 인간의 자연어를 사용하듯이 자연스럽게 쓰고 읽힐 수 있어야 한다고 생각합니다. Kotlin의 infix notation은 이 목표를 달성하기에 최적의 도구입니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"936\" height=\"206\" src=\"https://wp.toss.tech/wp-content/uploads/2022/04/3.png\" alt=\"\" class=\"wp-image-222\" srcset=\"https://toss.tech/wp-content/uploads/2022/04/3.png 936w, https://toss.tech/wp-content/uploads/2022/04/3-300x66.png 300w, https://toss.tech/wp-content/uploads/2022/04/3-768x169.png 768w\" sizes=\"(max-width: 936px) 100vw, 936px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e\"data.businessId\" type NUMBER\u003c/code\u003e는 \u003ccode\u003e\"data.businessId\".type(NUMBER)\u003c/code\u003e와 동일한 효과를 낳습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003clink rel='stylesheet' id='syntax-highlighting-code-block-css'  href='https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1' media='all' /\u003e\u003cstyle\u003e.wp-block-code {\n\tborder: 0;\n\tpadding: 0;\n}\n\n.wp-block-code \u003e div {\n\toverflow: auto;\n}\n\n.shcb-language {\n\tborder: 0;\n\tclip: rect(1px, 1px, 1px, 1px);\n\t-webkit-clip-path: inset(50%);\n\tclip-path: inset(50%);\n\theight: 1px;\n\tmargin: -1px;\n\toverflow: hidden;\n\tpadding: 0;\n\tposition: absolute;\n\twidth: 1px;\n\tword-wrap: normal;\n\tword-break: normal;\n}\n\n.hljs {\n\tbox-sizing: border-box;\n}\n\n.hljs.shcb-code-table {\n\tdisplay: table;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table \u003e .shcb-loc {\n\tcolor: inherit;\n\tdisplay: table-row;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table .shcb-loc \u003e span {\n\tdisplay: table-cell;\n}\n\n.wp-block-code code.hljs:not(.shcb-wrap-lines) {\n\twhite-space: pre;\n}\n\n.wp-block-code code.hljs.shcb-wrap-lines {\n\twhite-space: pre-wrap;\n}\n\n.hljs.shcb-line-numbers {\n\tborder-spacing: 0;\n\tcounter-reset: line;\n}\n\n.hljs.shcb-line-numbers \u003e .shcb-loc {\n\tcounter-increment: line;\n}\n\n.hljs.shcb-line-numbers .shcb-loc \u003e span {\n\tpadding-left: 0.75em;\n}\n\n.hljs.shcb-line-numbers .shcb-loc::before {\n\tborder-right: 1px solid #ddd;\n\tcontent: counter(line);\n\tdisplay: table-cell;\n\tpadding: 0 0.75em;\n\ttext-align: right;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n\twhite-space: nowrap;\n\twidth: 1%;\n}\n\u003c/style\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e String.\u003cspan class=\"hljs-title\"\u003etype\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(                    \u003cspan class=\"hljs-comment\"\u003e// (1)\u003c/span\u003e\n    docsFieldType: \u003cspan class=\"hljs-type\"\u003eDocsFieldType\u003c/span\u003e\n)\u003c/span\u003e\u003c/span\u003e: Field {                                \u003cspan class=\"hljs-comment\"\u003e// (2)\u003c/span\u003e\n    ...                                   \u003cspan class=\"hljs-comment\"\u003e// (3)\u003c/span\u003e\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-1\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cul\u003e\u003cli\u003e\u003cstrong\u003e(1):\u003c/strong\u003e\u003cul\u003e\u003cli\u003einfix notation으로 해당 함수를 선언해줍니다.\u003c/li\u003e\u003cli\u003etype이라는 함수는 String을 receiver로 받는 함수입니다.\u003c/li\u003e\u003cli\u003e파라미터는 docsFieldType 하나만 받습니다 (\u003ccode\u003eDocsFieldType\u003c/code\u003e는 아래에서 서술합니다.)\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e(2):\u003c/strong\u003e 원래 restdocs가 제공하던 FieldDescriptor를 유연하게 다루기 위해 Field라는 Wrapper 클래스를 정의합니다.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e(3):\u003c/strong\u003e 원래의 RestDocs를 만들던 동작을 수행합니다\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cp\u003einfix 함수를 사용할때는 제한사항이 있습니다.\u003c/p\u003e\n\n\n\n\u003cul\u003e\u003cli\u003e호출할때는 receiver와 parameter가 명시적으로 있어야 함 (this로 암시적인 전달 불가능)\u003c/li\u003e\u003cli\u003eparameter는 하나여야 함 (default value도 지정할 수 없음)\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cp\u003e그래야만 \u0026#8220;data\u0026#8221; type OBJECT 처럼 간결한 구조를 만들어 낼 수 있기 때문입니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003eDocsFieldType\u003c/h4\u003e\n\n\n\n\u003cp\u003eREST Docs에서는 응답, 요청 필드의 type을 JsonFieldType으로서 구분합니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e여기에 저는 자주 사용하는 format인 Date, DateTime을 쉽게 정의할 방법을 찾고 싶었고, enum class도 간단히 전달하여 어떤 필드가 사용될 수 있는지 docs에 쉽게 표기하고 싶었습니다. date, datetime, enum은 모두 JsonFieldType.STRING이지만 format과 sample이 다르게 표시될 필요가 있는 특이 케이스이기 때문입니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"446\" src=\"https://wp.toss.tech/wp-content/uploads/2022/04/4-1024x446.png\" alt=\"\" class=\"wp-image-223\" srcset=\"https://toss.tech/wp-content/uploads/2022/04/4-1024x446.png 1024w, https://toss.tech/wp-content/uploads/2022/04/4-300x131.png 300w, https://toss.tech/wp-content/uploads/2022/04/4-768x334.png 768w, https://toss.tech/wp-content/uploads/2022/04/4-1536x668.png 1536w, https://toss.tech/wp-content/uploads/2022/04/4.png 1540w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e이런 식으로 정의한다면 아래 예시와 같이 간단하게 \u003ccode\u003eField\u003c/code\u003e를 생성해내면서 \u003ccode\u003eDocsFieldType\u003c/code\u003e을 정의해낼 수 있습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-string\"\u003e\"data\"\u003c/span\u003e type OBJECT\n\u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e type NUMBER\n\u003cspan class=\"hljs-string\"\u003e\"createdAt\"\u003c/span\u003e type DATETIME\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-2\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch4\u003eDocsFieldType \u0026#8211; enum\u003c/h4\u003e\n\n\n\n\u003cp\u003e다만 enum을 정의하고 싶을때는 조금 디테일이 필요합니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-string\"\u003e\"companyType\"\u003c/span\u003e type STRING example CompanyType::\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-3\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e로도 선언할 수는 있지만 매번 example을 호출해주는 건 조금 귀찮습니다. 어차피 enum이 string이라는건 누구나 다 아는 사실인데 두 함수 호출을 나눠야 할까요?\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-string\"\u003e\"companyType\"\u003c/span\u003e type ENUM(CompanyType::\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-4\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e훨씬 간결해졌습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e다음과 같이 DocsFieldType을 확장한 sealedSubclass를 만든다면 위와 같은 dsl 작성이 가능합니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003edata\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eENUM\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-type\"\u003eT : Enum\u0026lt;T\u003c/span\u003e\u0026gt;\u0026gt;\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e enums: Collection\u0026lt;T\u0026gt;) : DocsFieldType(JsonFieldType.STRING) {\n  \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e(clazz: KClass\u0026lt;T\u0026gt;) : \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e(clazz.java.enumConstants.asList())   \u003cspan class=\"hljs-comment\"\u003e// (1)\u003c/span\u003e\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-5\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cul\u003e\u003cli\u003e(1): secondary constructor 덕분에 모든 enum값이 아니라 특정 조건에 맞는 enum 값을 collection으로 넘길수도 있습니다.\u003cul\u003e\u003cli\u003eex) 개인사업자에 해당하는 companyType만 해당 필드에 존재할 수 있을 때 \u003cbr\u003e\u003ccode\u003e\"individualCompanyType\" type ENUM(CompanyType.values().filter { it.isIndividual() })\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cp\u003e이로써 type infix 함수는 아래와 같이 완성할 수 있습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e String.\u003cspan class=\"hljs-title\"\u003etype\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(docsFieldType: \u003cspan class=\"hljs-type\"\u003eDocsFieldType\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e field = createField(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, docsFieldType.type)\n    \u003cspan class=\"hljs-keyword\"\u003ewhen\u003c/span\u003e (docsFieldType) {\n        \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e DATE -\u0026gt; field formattedAs RestDocsUtils.DATE_FORMAT\n        \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e DATETIME -\u0026gt; field formattedAs RestDocsUtils.DATETIME_FORMAT\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e -\u0026gt; {}\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e field\n}\n\n\u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;T : Enum\u0026lt;T\u0026gt;\u003c/span\u003e\u0026gt; String.\u003cspan class=\"hljs-title\"\u003etype\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(enumFieldType: \u003cspan class=\"hljs-type\"\u003eENUM\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-type\"\u003eT\u003c/span\u003e\u0026gt;)\u003c/span\u003e\u003c/span\u003e: Field {\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e field = createField(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, JsonFieldType.STRING, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e)\n    field.format = EnumFormattingUtils.enumFormat(enumFieldType.enums)\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e field\n}\n\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateField\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e, type: \u003cspan class=\"hljs-type\"\u003eJsonFieldType\u003c/span\u003e, optional: \u003cspan class=\"hljs-type\"\u003eBoolean\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e descriptor = PayloadDocumentation.fieldWithPath(value)\n        .type(type)\n        .attributes(RestDocsUtils.emptySample(), RestDocsUtils.emptyFormat(), RestDocsUtils.emptyDefaultValue())\n        .description(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (optional) descriptor.optional()\n\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e Field(descriptor)\n}\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-6\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch3\u003eField 클래스에서 DSL 확장하기\u003c/h3\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"1024\" height=\"109\" src=\"https://wp.toss.tech/wp-content/uploads/2022/04/5-1024x109.png\" alt=\"\" class=\"wp-image-224\" srcset=\"https://toss.tech/wp-content/uploads/2022/04/5-1024x109.png 1024w, https://toss.tech/wp-content/uploads/2022/04/5-300x32.png 300w, https://toss.tech/wp-content/uploads/2022/04/5-768x82.png 768w, https://toss.tech/wp-content/uploads/2022/04/5-1536x164.png 1536w, https://toss.tech/wp-content/uploads/2022/04/5-1568x168.png 1568w, https://toss.tech/wp-content/uploads/2022/04/5.png 1778w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e이제 좀 더 욕심을 내봅시다. 위 예시처럼 얼마든지 함수 호출을 chaining할 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e어떤가요? 괄호로 계속 호출하는 것보다 좀 더 직관적이지 않나요?\u003c/p\u003e\n\n\n\n\u003cp\u003etype이라는 infix function이 \u003ccode\u003eField\u003c/code\u003e를 반환할 수 있도록 했으니, \u003ccode\u003eField\u003c/code\u003e에서 더 많은 DSL을 호출하도록 확장할 수 있게 되었습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eField\u003c/span\u003e\u003c/span\u003e(\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e descriptor: FieldDescriptor,\n) {\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e isIgnored: \u003cspan class=\"hljs-built_in\"\u003eBoolean\u003c/span\u003e = descriptor.isIgnored\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e isOptional: \u003cspan class=\"hljs-built_in\"\u003eBoolean\u003c/span\u003e = descriptor.isOptional\n\n    \u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e: String\n        \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e() = descriptor.attributes.getOrDefault(RestDocsAttributeKeys.KEY_DEFAULT_VALUE, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e String\n        \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e(value) {\n            descriptor.attributes(RestDocsUtils.defaultValue(value))\n        }\n\n    \u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e format: String\n        \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e() = descriptor.attributes.getOrDefault(RestDocsAttributeKeys.KEY_FORMAT, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e String\n        \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e(value) {\n            descriptor.attributes(RestDocsUtils.customFormat(value))\n        }\n\n    \u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sample: String\n        \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e() = descriptor.attributes.getOrDefault(RestDocsAttributeKeys.KEY_SAMPLE, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e String\n        \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e(value) {\n            descriptor.attributes(RestDocsUtils.customSample(value))\n        }\n\n  \t\u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emeans\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e description(value)\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eattributes\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(block: \u003cspan class=\"hljs-type\"\u003eField\u003c/span\u003e.() -\u0026gt; \u003cspan class=\"hljs-type\"\u003eUnit\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n        block()\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ewithDefaultValue\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.\u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e = value\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eformattedAs\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.format = value\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eexample\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sample = value\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisOptional\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eBoolean\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (value) descriptor.optional()\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eopen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einfix\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisIgnored\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eBoolean\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Field {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (value) descriptor.ignored()\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n    }\n}\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-7\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e이렇게 얼마든지 코드를 확장해나갈 수 있을뿐더러, 해당 프로젝트에서 사용하는 REST Docs snippet의 attribute를 코드 상으로 좀 더 명확하게 정의할 수 있게 되었습니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e마무리\u003c/h2\u003e\n\n\n\n\u003cp\u003e이 글은 REST Docs의 반복적인 코드를 제거하고, docs의 생성이라는 본래의 목적을 달성하고자 기존 MockMvc 테스트코드 작성법에서 벗어나, REST Docs DSL을 만드는 방식으로 문제를 해결하고자 했습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e우리가 흔히 쓰는 gradle configuration 작성 방식인 build.gradle.kts 또한 org.gradle.kotlin.dsl에서 그 선언 방식을 찾아볼 수 있고, MockK이나 Kotest에서도 다양한 방식으로 Kotlin의 장점을 최대한 끌어낸 모습을 확인할 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cul\u003e\u003cli\u003ebuild.gradle.kts (\u003ca href=\"https://github.com/gradle/kotlin-dsl-samples\"\u003ehttps://github.com/gradle/kotlin-dsl-samples\u003c/a\u003e)\u003c/li\u003e\u003cli\u003eMockK의 every(\u003ca href=\"https://mockk.io/#dsl-examples\"\u003ehttps://mockk.io/#dsl-examples\u003c/a\u003e),\u003c/li\u003e\u003cli\u003eKotest의 여러 Testing Styles(\u003ca href=\"https://kotest.io/docs/framework/testing-styles.html\"\u003ehttps://kotest.io/docs/framework/testing-styles.html\u003c/a\u003e)\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cp\u003e혹시나 여러분도 반복적인 작업을 일일히 복붙으로 하고 있다면 여러분의 팀만을 위한 DSL을 만들어보는 건 어떨까요?\u003c/p\u003e\n\n\n\n\u003cp style=\"line-height:4\"\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e이 REST Docs DSL은 토스페이먼츠 *\u003cem\u003e엔지니어링 데이\u003c/em\u003e에 장태영(Server Developer, taeyoung.jang@tosspayments.com)님과 함께 만들었습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e*토스페이먼츠에서는 매주 목요일에 엔지니어링 데이를 진행하고 있어요. 이 시간에는 평소 업무에 병목이 되는 문제들을 해결하거나, 인프라를 개선하는 등의 작업을 진행합니다.\u003c/p\u003e\n","date":"2022-04-11T05:24:00","excerpt":"\u003cp\u003e토스페이먼츠에서는 API docs를 REST Docs를 사용해서 작성할 수 있도록 권장하고 있습니다. 이 글에서는 DSL을 통해서 반복적인 REST Docs 테스트 코드 작성을 줄일 수 있는 방법을 알아봅니다.\u003c/p\u003e\n","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs-300x150.png 300w, https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs-768x384.png 768w, https://toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs.png 1200w"}},"metadata":{"ogBackground":"https://static.toss.im/assets/tech-blog/og-image:/techblog-08-rest-docs-og.png","ogImageTitle":"Kotlin으로\r\nDSL 만들기","ogGenerateImage":null,"recruitTitle":"재미있게 읽으셨나요?","recruitUrl":null,"form1Url":"https://8cv5m2yf13x.typeform.com/tossengineering#no=219\u0026title=Kotlin으로_DSL_만들기\u0026reaction=good","form2Url":"https://8cv5m2yf13x.typeform.com/tossengineering#no=219\u0026title=Kotlin으로_DSL_만들기\u0026reaction=bad","formDescription":"좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.","form1Label":"😍","form2Label":"🤔","recruitDescription":null},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}},{"node":{"id":"dGVybTox","name":"Uncategorized"}}]},"author":{"node":{"id":"dXNlcjoxMw==","firstName":"규주","lastName":"한","description":"토스페이먼츠에서 서버 개발을 하고 있습니다. 코드에서나 업무에서나 반복적인 일을 제거하는데 관심이 많습니다.","avatar":{"url":"https://toss.tech/wp-content/uploads/2022/04/E01JAGTHP8R-U01JGK1JWJX-867cb0c757f7-512-312x312.png"},"role":{"role":"Server Developer"}}}},"relatedArticles":[{"title":"무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사","slug":"how-to-work-health-check-in-spring-boot-actuaotr","date":"2023-04-01T15:38:57","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}},{"node":{"id":"dGVybTox","name":"Uncategorized"}}]}},{"title":"ESLint와 AST로 코드 퀄리티 높이기","slug":"improving-code-quality-via-eslint-and-ast","date":"2023-03-31T15:47:53","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}}]}}]},"__N_SSP":true},"page":"/article/[slug]","query":{"slug":"kotlin-dsl-restdocs"},"buildId":"QqBxegmptuUDYc8oCREsD","assetPrefix":"https://static.toss.im/frontend/toss-tech","runtimeConfig":{"ENV":"live","NODE_ENV":"production","PORT":"3000","ASSET_PREFIX":"https://static.toss.im/frontend/toss-tech","SERVICE":"toss-tech","SENTRY":{"DSN":"https://5eff657ed6ef486fb8af2dc5f9508abd@sentry.io/1242586","PUBLIC_KEY":"5eff657ed6ef486fb8af2dc5f9508abd","RELEASE":"toss-tech_1.0.103","SERVICE":"toss-tech","SERVICE_VERSION":"1.0.103"},"RENDER_TYPE":"ssr"},"isFallback":false,"gssp":true,"customServer":true,"scriptLoader":[]}</script></body></html>