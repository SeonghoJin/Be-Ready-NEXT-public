<!DOCTYPE html><html><head><link rel="stylesheet" href="https://static.toss.im/tds-pc/3.232.0/main.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/rss+xml" href="/rss.xml"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/atom+xml" href="/atom.xml"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/main.css"/><link rel="stylesheet" type="text/css" href="//static.toss.im/tps/others.css"/><link rel="stylesheet" href="https://static.toss.im/tossface-font/tossface.css"/><link rel="alternate" title="토스 기술 블로그, 토스테크 글 목록" type="application/activitystream+json" href="/feed.json"/><meta charSet="UTF-8"/><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover"/><meta name="author" content="Viva Republica"/><link rel="preconnect" href="https://static.toss.im"/><link rel="shortcut icon" href="https://static.toss.im/tds/favicon/favicon.ico"/><link rel="icon" type="image/png" sizes="16x16" href="https://static.toss.im/tds/favicon/favicon-16x16.png"/><link rel="icon" type="image/png" sizes="32x32" href="https://static.toss.im/tds/favicon/favicon-32x32.png"/><link rel="icon" type="image/png" sizes="48x48" href="https://static.toss.im/tds/favicon/favicon-48x48.png"/><link rel="icon" type="image/png" sizes="196x196" href="https://static.toss.im/tds/favicon/favicon-196x196.png"/><link rel="apple-touch-icon" sizes="57x57" href="https://static.toss.im/tds/favicon/apple-touch-icon-57x57.png"/><link rel="apple-touch-icon" sizes="72x72" href="https://static.toss.im/tds/favicon/apple-touch-icon-72x72.png"/><link rel="apple-touch-icon" sizes="114x114" href="https://static.toss.im/tds/favicon/apple-touch-icon-114x114.png"/><link rel="apple-touch-icon" sizes="120x120" href="https://static.toss.im/tds/favicon/apple-touch-icon-120x120.png"/><link rel="apple-touch-icon" sizes="144x144" href="https://static.toss.im/tds/favicon/apple-touch-icon-144x144.png"/><link rel="apple-touch-icon" sizes="152x152" href="https://static.toss.im/tds/favicon/apple-touch-icon-152x152.png"/><meta name="msapplication-TileImage" content="https://static.toss.im/tds/favicon/mstile-144x144.png"/><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-PQ5NV18TH1"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'G-PQ5NV18TH1');</script><script>(function(h,o,t,j,a,r){
    h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
    h._hjSettings={hjid:2399367,hjsv:6};
    a=o.getElementsByTagName('head')[0];
    r=o.createElement('script');r.async=1;
    r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
    a.appendChild(r);
})(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');</script><title>에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)</title><meta name="twitter:creator" content="Viva Republica"/><meta name="twitter:site" content="@Toss_service"/><meta name="twitter:card" content="summary_large_image"/><meta property="og:title" content="에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)"/><meta name="twitter:title" content="에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)"/><meta property="og:description" content="Kotlin의 Result로 MSA에서 에러가 전파되지 않는 안전한 환경을 만드는 방법을 알아봅니다.
"/><meta name="twitter:description" content="Kotlin의 Result로 MSA에서 에러가 전파되지 않는 안전한 환경을 만드는 방법을 알아봅니다.
"/><meta property="og:image" content="https://static.toss.im/assets/tech-blog/og image/thumnail/error.png?v=2"/><meta name="twitter:image" content="https://static.toss.im/assets/tech-blog/og image/thumnail/error.png?v=2"/><meta name="next-head-count" content="36"/><meta name="next-font-preconnect"/><link rel="preload" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" as="style"/><link rel="stylesheet" href="https://static.toss.im/frontend/toss-tech/_next/static/css/6486c46747f65f89.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/polyfills-5cd94c89d3acac5f.js"></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/webpack-a37367524f3d9e47.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/framework-5201cf011975c339.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/main-4ffd67ad72332dfe.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/_app-02461bb4136bedab.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/821-c2f4db054c6f6b42.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/935-149f2da2961c2b08.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/chunks/pages/article/%5Bslug%5D-bf5a24035d1301de.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_buildManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_ssgManifest.js" defer=""></script><script src="https://static.toss.im/frontend/toss-tech/_next/static/QqBxegmptuUDYc8oCREsD/_middlewareManifest.js" defer=""></script></head><body><div id="__next"><style data-emotion="css-global ubpbb5">html,body{padding:0;margin:0;font-family:'Toss Product Sans';}button{font-family:'Toss Product Sans';}p{margin:0;}</style><style data-emotion="css kcwxxw">.css-kcwxxw{position:-webkit-sticky;position:sticky;top:0;height:59px;}</style><nav class="p-navbar p-navbar--bottom-border css-kcwxxw"><div class="p-container p-container--default"><div class="p-container__inner p-navbar__inner-container"><div class="p-navbar__logo-container"><a class="p-navbar__logo-icon" href="/tech"><span class="icon p-icon" aria-hidden="true" role="presentation" style="height:auto;width:auto;min-width:24px"></span></a></div><div class="p-navbar__right-on-mobile"></div><div class="p-navbar__content" aria-expanded="false" aria-hidden="true"><ul class="p-navbar__menu"></ul><ul class="p-navbar__menu"><li class="p-navbar__item"><a>디자인</a></li><li class="p-navbar__item"><a>개발</a></li><li class="p-navbar__item p-navbar__button-item"><button class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s p-navbar__button" type="button" aria-disabled="false">채용 바로가기</button></li></ul></div></div></div></nav><style data-emotion="css 1nquki8">.css-1nquki8{max-width:700px;margin-bottom:80px;}.css-1nquki8 .has-extra-large-font-size{font-size:20px;}.css-1nquki8 .has-large-font-size{font-size:18px;}.css-1nquki8 .has-small-font-size{font-size:14px;}.css-1nquki8 .has-extra-small-font-size{font-size:12px;}@media (max-width: 700px){.css-1nquki8{margin-bottom:64px;}}</style><div class="p-container p-container--default css-1nquki8"><div class="p-container__inner"><style data-emotion="css gtmad4">.css-gtmad4>*:not(style)~*:not(style){margin-top:54px;}@media (max-width: 700px){.css-gtmad4>*:not(style)~*:not(style){margin-top:48px;}}</style><article class="css-gtmad4"><style data-emotion="css 1095auh">.css-1095auh>*:not(style)~*:not(style){margin-top:20px;}</style><header class="css-1095auh"><style data-emotion="css iffq4o">.css-iffq4o{width:100%;margin-top:36px;border-radius:12px;}</style><img srcSet="https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling-300x150.png 300w, https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling-768x384.png 768w, https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling.png 1200w" alt="에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)" class="css-iffq4o e132k2574"/><style data-emotion="css 117sh4z">.css-117sh4z{margin-top:36px;margin-bottom:0;font-size:48px;font-weight:700;line-height:1.25;color:#333d4b;word-break:keep-all;overflow-wrap:break-word;}@media (max-width: 700px){.css-117sh4z{margin-top:28px;font-size:32px;}}</style><h1 class="css-117sh4z e132k2573">에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)</h1><style data-emotion="css s5xdrg">.css-s5xdrg{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}</style><section class="css-s5xdrg e2c667z4"><style data-emotion="css 1hdebld">.css-1hdebld{grid-area:image;width:48px;height:48px;border-radius:156px;margin-right:14px;}</style><img src="https://toss.tech/wp-content/uploads/2022/04/E01JAGTHP8R-U01JGK1JWJX-867cb0c757f7-512-312x312.png" alt="" class="css-1hdebld e2c667z3"/><div><style data-emotion="css 14d9k6d">.css-14d9k6d{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;grid-area:outline;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;padding-top:8px;font-size:17px;margin-bottom:2px;}@media (max-width: 700px){.css-14d9k6d>*+*{margin-top:4px;margin-left:0;}}</style><div class="css-14d9k6d e2c667z2"><style data-emotion="css 9krnkp">.css-9krnkp{grid-area:name;margin:0;font-size:17px;font-weight:600;color:#4e5968;white-space:nowrap;}</style><h3 class="css-9krnkp e2c667z1">한규주</h3><h3 class="css-9krnkp e2c667z1">ㆍ<!-- -->Server Developer</h3></div><style data-emotion="css 154r2lc">.css-154r2lc{font-size:14px;line-height:1.5;color:#8b95a1;}</style><div class="css-154r2lc e2c667z0">2022. 5. 14</div></div></section></header><style data-emotion="css 1k1kkv6">.css-1k1kkv6{font-size:18px;line-height:1.7;color:var(--grey700);font-size:18px;word-break:keep-all;overflow-wrap:break-word;counter-reset:p-post-ol 0;}.css-1k1kkv6 h2{margin:2.2em 0 0.6em 0;font-size:25px;font-weight:600;line-height:1.4;color:var(--grey900);}.css-1k1kkv6 h3{margin:2.2em 0 0.6em 0;font-size:22px;font-weight:600;line-height:1.6;color:var(--grey900);}.css-1k1kkv6 h4{margin:2.2em 0 0.3em 0;font-size:19px;font-weight:600;line-height:1.6;color:var(--grey700);}.css-1k1kkv6 p{margin:1em 0;}.css-1k1kkv6 p code,.css-1k1kkv6 li code{font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:3px;}.css-1k1kkv6 a{color:var(--blue700);}.css-1k1kkv6 pre{margin:2em -24px;}@media (max-width: 700px){.css-1k1kkv6 pre{margin:2em 0;}}.css-1k1kkv6 pre code{display:block;padding:16px 24px;overflow-x:auto;font-family:Consolas,Menlo,Monaco,source-code-pro,Courier New,monospace;font-size:0.9em;line-height:1.5;word-wrap:normal;white-space:pre;background-color:var(--greyOpacity100);border:1px solid var(--greyOpacity200);border-radius:12px;}.css-1k1kkv6 figure{margin:2em 0;overflow:hidden;border-radius:12px;width:100%;}.css-1k1kkv6 figure.aligncenter{text-align:center;}.css-1k1kkv6 ol,.css-1k1kkv6 ul{margin:0 0 16px;list-style:none;}.css-1k1kkv6 ol li,.css-1k1kkv6 ul li{position:relative;margin-bottom:8px;}.css-1k1kkv6 ol li:before,.css-1k1kkv6 ul li:before{position:absolute;left:0;}.css-1k1kkv6 ol li ol,.css-1k1kkv6 ul li ol{padding-left:0;margin:8px 0 0 -16px;}.css-1k1kkv6 ol li ul,.css-1k1kkv6 ul li ul{padding-left:0;margin-top:8px;}.css-1k1kkv6 ol li p,.css-1k1kkv6 ul li p{margin:0;}.css-1k1kkv6 ol{padding-left:16px;counter-reset:p-post-ol;}.css-1k1kkv6 ol>li{padding-left:32px;counter-increment:p-post-ol;}.css-1k1kkv6 ol>li:before{font-weight:700;font-weight:var(--font-weight-bold);content:counter(p-post-ol) '.';}.css-1k1kkv6 ul{padding-left:16px;}.css-1k1kkv6 ul>li{padding-left:24px;}.css-1k1kkv6 ul>li:before{width:16px;text-align:center;content:'•';}.css-1k1kkv6 figcaption{font-size:0.9em;color:var(--grey600);}.css-1k1kkv6 .wp-block-pullquote{margin:0;}.css-1k1kkv6 blockquote{padding:32px;background:var(--greyOpacity100);border-radius:12px;text-align:left;margin:16px 0 16px 0;}.css-1k1kkv6 blockquote p{color:#333d4b;font-weight:600;margin:0;}.css-1k1kkv6 blockquote cite{font-style:normal;}@media (max-width: 700px){.css-1k1kkv6 blockquote{padding:24px;}}.css-1k1kkv6 .wp-block-embed-youtube iframe{width:100%;border-radius:12px;}.css-1k1kkv6 ol{counter-reset:none;}.css-1k1kkv6 hr{border-top:1px solid #e5e8eb;border-right-style:none;border-left-style:none;border-bottom-style:none;margin:2.5rem 0;}.css-1k1kkv6 figure{display:table;text-align:center;}@media (max-width: 700px){.css-1k1kkv6 figure{width:100%;}}.css-1k1kkv6 figure img,.css-1k1kkv6 figure video{max-width:100%;height:auto;border:1px solid rgba(2,32,71,0.05);border-radius:12px;}.css-1k1kkv6 figure.alignright{float:right;margin:0 0 8px 24px;}@media (max-width: 700px){.css-1k1kkv6 figure.alignright{float:none;margin:0;}}.css-1k1kkv6 figcaption{display:table-caption;text-align:center;white-space:pre-wrap;caption-side:bottom;}.css-1k1kkv6 p:empty::before{content:'';}</style><div class="css-1k1kkv6 e132k2572"><div>
<h2><strong>TL;DR</strong></h2>



<ol><li><strong><code>Result</code>를 이해한다면, MSA 환경에서 에러가 전파되지 않도록 막을 수 있습니다.</strong></li><li><strong><code>runCatching</code>과 <code>Result</code>를 사용하면 에러 핸들링을 클라이언트에게 위임할 수 있습니다.</strong></li></ol>



<h3>예제: 로그인 요청을 전달하는 서비스 흐름에서 에러 처리하기</h3>



<p>아래와 같은 서비스 호출 흐름이 있다고 가정해보겠습니다.</p>



<figure class="wp-block-image size-large"><div data-rmiz-wrap="visible"><img loading="lazy" width="706" height="454" src="https://wp.toss.tech/wp-content/uploads/2022/05/image.png" alt="" class="wp-image-271" srcSet="https://toss.tech/wp-content/uploads/2022/05/image.png 706w, https://toss.tech/wp-content/uploads/2022/05/image-300x193.png 300w" sizes="(max-width: 706px) 100vw, 706px" style="max-width:100%;max-height:100%"/><button aria-label="Zoom image" data-rmiz-btn-open="true"></button></div></figure>



<p>Server A 입장에서는 Server B에서 발생하는 에러 처리를 해야하는 고민에 빠집니다.</p>



<p>API를 호출하는 코드에서 API의 에러 응답에 따른 비즈니스 로직을 다르게 가져가고 싶은 경우가 있습니다. 예를 들어 위 사례에서 비밀번호가 틀리거나 이메일 주소가 틀린 경우 이 에러를 캐치해서 다른 메세지를 던지고 싶을 수 있고, 어떤 코드에서는 그 에러를 무시하고 다른 로직을 수행하고 싶을 수 있습니다. </p>



<p></p>



<p>에러 처리를 API Client 단에서 하지 않고 다른 클래스에 위임을 하고 싶은 이런 경우에는 어떤 방법을 사용할 수 있을지 아래 코드 예시로 알아보겠습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><link rel="stylesheet" id="syntax-highlighting-code-block-css" href="https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1" media="all"/><style>.wp-block-code {
	border: 0;
	padding: 0;
}

.wp-block-code > div {
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}
</style><div><code class="hljs language-kotlin"><span class="hljs-comment">// API client</span>
<span class="hljs-meta">@FeignClient</span>
<span class="hljs-keyword">internal</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">LoginApi</span> </span>{
  <span class="hljs-meta">@PostMapping</span>
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(
    <span class="hljs-meta">@RequestBody</span> request: <span class="hljs-type">LoginRequestDto</span>
  )</span></span>: OtherServiceResponse&lt;LoginResponseDto&gt;
}

<span class="hljs-meta">@Component</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginApiClient</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">constructor</span></span>(
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> loginApi: LoginApi
) {
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(request: <span class="hljs-type">LoginRequestDto</span>)</span></span>: LoginResult {
    <span class="hljs-keyword">return</span> loginApi.login(request).result.toResult()
  }
}

<span class="hljs-meta">@Service</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginService</span></span>(
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> loginApiClient: LoginApiClient
) {
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(id: <span class="hljs-type">String</span>, pw: <span class="hljs-type">String</span>)</span></span>: LoginResult {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> {
      loginApiClient.login(LoginRequestDto(id, pw))
    } <span class="hljs-keyword">catch</span> {
      <span class="hljs-comment">// 에러 핸들링</span>
    }
  }
}
</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>이 경우에 아래와 같은 두 케이스를 해결하고 싶어집니다.</p>



<ol><li>이 API를 사용하는 쪽(ex. LoginService)에서 에러 핸들링을 강제하고 싶습니다.</li><li>API 호출 로직마다 에러 핸들링을 다른 방식으로 가져가게 하고 싶습니다.<ul><li>LoginService가 아닌 다른 호출 로직에서는 에러를 다르게 처리하고 싶을 수 있습니다.</li></ul></li></ol>



<p>위 고민을 해결할 방법이 있습니다. 바로 <code>Result</code>입니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-meta">@Component</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginApiClient</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">constructor</span></span>(
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> loginApi: LoginApi
) {
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(request: <span class="hljs-type">LoginRequestDto</span>)</span></span>: Result&lt;LoginResult&gt; {
    <span class="hljs-keyword">return</span> runCatching { 
      loginApi.login(request).result.toResult()
    }
  }
}

<span class="hljs-meta">@Service</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginService</span></span>(
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> loginApiClient: LoginApiClient
) {
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(id: <span class="hljs-type">String</span>, pw: <span class="hljs-type">String</span>)</span></span>: LoginResult {
    <span class="hljs-keyword">return</span> loginApiClient.login(LoginRequestDto(id, pw))
      .onFailure {
        <span class="hljs-comment">// 에러 핸들링</span>
      }
  }
}</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p></p>



<h3>코틀린의 runCatching</h3>



<blockquote class="wp-block-quote"><p><span>💡</span><span style="font-size:inherit;font-weight:inherit;line-height:inherit;color:inherit"> 이미 runCatching을 잘 사용하고 있다면 넘겨도 좋습니다.</span></p></blockquote>



<p>위 코드를 이해하기에 앞서서 <code>runCatching</code>을 알아둘 필요가 있습니다. 코틀린은 물론 자바의 <code>try ... catch</code>를 동일하게 지원하지만 이와는 조금 다른 방법으로 에러 핸들링을 할 수도 있습니다.</p>



<h4>예제</h4>



<p>아래 요구사항이 있다고 가정합시다.</p>



<ul><li><code>LoginApiClient</code> 호출 시 <code>LoginException</code>이 발생했는데,<ul><li><code>errorCode</code>가 <code>INVALID_PASSWORD</code> 인 경우 예외를 발생시키지 않고 <code>null</code>을 반환한다.</li></ul></li><li>그 외 모든 에러 상황에서는 예외를 발생시킨다.</li></ul>



<h4>try … catch를 사용했을때</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">try</span> {
  loginApiClient.login(request) 	
} <span class="hljs-keyword">catch</span> (e: LoginException) {
  <span class="hljs-keyword">if</span> (e.errorCode == <span class="hljs-string">&quot;INVALID_PASSWORD&quot;</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">throw</span> e
  }
}
</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Java에서 위와 같이 작성하는 코드를 runCatching을 사용하면 아래처럼 표현할 수 있습니다.</p>



<p><strong>runCatching을 사용했을 때</strong></p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">return</span> runCatching {
  loginApiClient.login(request)
}.onFailure { e -&gt; 
  <span class="hljs-keyword">if</span> (e.errorCode != <span class="hljs-string">&quot;INVALID_PASSWORD&quot;</span>) <span class="hljs-keyword">throw</span> e
}.getOrNull()</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>kotlin.runCatching</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">@InlineOnly
@SinceKotlin(<span class="hljs-string">&quot;1.3&quot;</span>)
<span class="hljs-keyword">public</span> inline fun &lt;R&gt; runCatching(block: () -&gt; R): Result&lt;R&gt; {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> {
    Result.success(block())
  } <span class="hljs-keyword">catch</span> (e: Throwable) {
    Result.failure(e)
  }
}</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p><code>try..catch</code> 로직을 그대로 사용하지만 <code>Result</code>로 감싸서 반환하는 것을 알 수 있습니다.</p>



<ul><li>에러가 발생하지 않았을 때에는 <code>Result.success</code> 반환</li><li>에러가 발생했을 때에는 <code>Result.failure</code> 반환</li></ul>



<p></p>



<h3>Result가 뭔가요?</h3>



<p>Result가 무엇인지 알아보기 위해서 Kotlin 1.3 표준 라이브러리의 코드를 살펴봅시다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-meta">@SinceKotlin(<span class="hljs-meta-string">&quot;1.3&quot;</span>)</span>
<span class="hljs-meta">@JvmInline</span>
<span class="hljs-keyword">public</span> value <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-type">out T</span>&gt; <span class="hljs-meta">@PublishedApi</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">constructor</span></span>(
  <span class="hljs-meta">@PublishedApi</span>
  <span class="hljs-keyword">internal</span> <span class="hljs-keyword">val</span> value: Any?
) : Serializable {

  <span class="hljs-keyword">public</span> <span class="hljs-keyword">val</span> isSuccess: <span class="hljs-built_in">Boolean</span> <span class="hljs-keyword">get</span>() = value !<span class="hljs-keyword">is</span> Failure

  <span class="hljs-keyword">public</span> <span class="hljs-keyword">val</span> isFailure: <span class="hljs-built_in">Boolean</span> <span class="hljs-keyword">get</span>() = value <span class="hljs-keyword">is</span> Failure
		
  <span class="hljs-comment">/* ... */</span>
		
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> {
    <span class="hljs-meta">@Suppress(<span class="hljs-meta-string">&quot;INAPPLICABLE_JVM_NAME&quot;</span>)</span>
    <span class="hljs-meta">@InlineOnly</span>
    <span class="hljs-meta">@JvmName(<span class="hljs-meta-string">&quot;success&quot;</span>)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">success</span><span class="hljs-params">(value: <span class="hljs-type">T</span>)</span></span>: Result&lt;T&gt; =
      Result(value)

    <span class="hljs-meta">@Suppress(<span class="hljs-meta-string">&quot;INAPPLICABLE_JVM_NAME&quot;</span>)</span>
    <span class="hljs-meta">@InlineOnly</span>
    <span class="hljs-meta">@JvmName(<span class="hljs-meta-string">&quot;failure&quot;</span>)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">failure</span><span class="hljs-params">(exception: <span class="hljs-type">Throwable</span>)</span></span>: Result&lt;T&gt; =
      Result(createFailure(exception))
  }

  <span class="hljs-keyword">internal</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Failure</span></span>(
    <span class="hljs-meta">@JvmField</span>
    <span class="hljs-keyword">val</span> exception: Throwable
  ) : Serializable {
    <span class="hljs-comment">/* ... */</span>
  }
}
</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>즉, <code>Result</code>의 <code>value</code>는</p>



<ul><li>성공일 경우 <code>T</code>를 타입으로 하는 값을 가지게 되고</li><li>실패일 경우는 <code>Failure</code>를 wrapper class로 하는 <code>exception</code>을 값으로 가지게 됩니다.</li></ul>



<p><code>Result</code>가 제공하는 함수들은 다음과 같습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">getOrThrow</span><span class="hljs-params">()</span></span>: T

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T : R&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">getOrElse</span><span class="hljs-params">(
  onFailure: (<span class="hljs-type">exception</span>: <span class="hljs-type">Throwable</span>) -&gt; <span class="hljs-type">R</span>
)</span></span>: R

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T : R&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">getOrDefault</span><span class="hljs-params">(defaultValue: <span class="hljs-type">R</span>)</span></span>: R

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">fold</span><span class="hljs-params">(
  onSuccess: (<span class="hljs-type">value</span>: <span class="hljs-type">T</span>) -&gt; <span class="hljs-type">R</span>,
  onFailure: (<span class="hljs-type">exception</span>: <span class="hljs-type">Throwable</span>) -&gt; <span class="hljs-type">R</span>
)</span></span>: R

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">map</span><span class="hljs-params">(transform: (<span class="hljs-type">value</span>: <span class="hljs-type">T</span>) -&gt; <span class="hljs-type">R</span>)</span></span>: Result&lt;R&gt;

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">mapCatching</span><span class="hljs-params">(transform: (<span class="hljs-type">value</span>: <span class="hljs-type">T</span>) -&gt; <span class="hljs-type">R</span>)</span></span>: Result&lt;R&gt;

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T : R&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">recover</span><span class="hljs-params">(transform: (<span class="hljs-type">exception</span>: <span class="hljs-type">Throwable</span>) -&gt; <span class="hljs-type">R</span>)</span></span>: Result&lt;R&gt;

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">onFailure</span><span class="hljs-params">(action: (<span class="hljs-type">exception</span>: <span class="hljs-type">Throwable</span>) -&gt; <span class="hljs-type">Unit</span>)</span></span>: Result&lt;T&gt;

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> Result<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">onSuccess</span><span class="hljs-params">(action: (<span class="hljs-type">value</span>: <span class="hljs-type">T</span>) -&gt; <span class="hljs-type">Unit</span>)</span></span>: Result&lt;T&gt;</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p></p>



<h3>Result 사용 예시</h3>



<p><code>runCatching</code>은 <code>Result&lt;T&gt;</code>를 반환하게 되는데, <code>Result</code>가 제공하는 함수를 이용해서 다양하게 활용할 수 있습니다.</p>



<h4>에러를 무시하고 null 반환</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">val</span> response = runCatching {
  login()
}.getOrNull()</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<h4>기본값 반환</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">val</span> response = runCatching {
  login()
}.getOrDefault(emptyList())</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<h4>에러 발생 시 다른 동작 수행</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">val</span> response = runCatching {
  login() 
}.getOrElse { ex -&gt;
  logger.warn(ex) { <span class="hljs-string">&quot;에러 발생&quot;</span> }

  <span class="hljs-comment">// 에러를 던지고 싶다면</span>
  <span class="hljs-keyword">throw</span> ex
}</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<h4>에러가 발생한 경우에만 해당 에러 객체 반환</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">val</span> exception = runCatching {
  login() 
}.exceptionOrNull()

<span class="hljs-comment">// 위에서 받은 에러로 로직 수행</span>
<span class="hljs-keyword">when</span> (exception) {
  <span class="hljs-comment">/* ... */</span>
}</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>에러가 발생하는지 아닌지만 확인하고 싶을 때에도 유용할 수 있습니다.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript">val isValidCredential = runCatching { tryLogin() }.exceptionOrNull() != <span class="hljs-literal">null</span></code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>성공/에러 시 각각 특정 동작 수행 후 에러 던지기</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-keyword">val</span> response = runCatching {
  login() 
}.onSuccess { 
  logger.info(<span class="hljs-string">&quot;성공!&quot;</span>)
}.onFailure {
  logger.info(<span class="hljs-string">&quot;실패!&quot;</span>)
}.getOrThrow()</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<h4>runCatching으로 try .. finally 구현하기</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin">runCatching {
  request()
}.also {
  doSomething()
}.getOrThrow()
</code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p></p>



<p></p>



<h2>Result를 사용해서 예외 처리를 다른 클래스에 위임하기</h2>



<p><code>runCatching</code>을 사용하면 <code>Result</code>가 제공하는 다양한 함수의 편의에 기댈 수 있다는 것을 배웠습니다.</p>



<p><code>Result</code>에 대한 처리를 즉시 하지 않고 함수의 반환 값으로 반환하게 된다면, <code>Result</code>에 대한 핸들링을 다른 클래스에 위임할 수도 있습니다.</p>



<h4>LoginApiClient</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-meta">@Component</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginApiClient</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">constructor</span></span>(
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> loginApi: LoginApi
) {
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(request: <span class="hljs-type">LoginRequestDto</span>)</span></span>: Result&lt;LoginResult&gt; {
    <span class="hljs-keyword">return</span> runCatching { 
      loginApi.login(request).result.toResult()
    }
  }
}
</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>Result를 반환하여 다른 클래스가 에러 핸들링을 하도록 위임합니다.</p>



<h4>LoginService</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-meta">@Service</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginService</span></span>(
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> loginApiClient: LoginApiClient
) {
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">login</span><span class="hljs-params">(id: <span class="hljs-type">String</span>, pw: <span class="hljs-type">String</span>)</span></span>: LoginResult? {
    <span class="hljs-keyword">return</span> loginApiClient.login(LoginRequestDto(id, pw))
      .getOrNull()
  }
}
</code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>에러가 발생한 경우 에러를 무시하고 기본값으로 null을 반환합니다.</p>



<p>하지만 아래처럼 다른 컴포넌트에서는 에러를 핸들링하고 싶을 수도 있습니다.</p>



<h4>PasswordChangeService</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="Kotlin" data-shcb-language-slug="kotlin"><div><code class="hljs language-kotlin"><span class="hljs-meta">@Component</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PasswordChangeService</span></span>(
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> loginApiClient: LoginApiClient,
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> errorStatusWriter: ErrorStatusWriter,
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> passwordChanger: PasswordChanger
) {
  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">change</span><span class="hljs-params">()</span></span> {
    loginApiClient.login(request)
      .onFailure { exception -&gt;
        errorStatusWriter.write(exception)    <span class="hljs-comment">// (1)</span>
      }.onSuccess { loginResult -&gt;
        passwordChanger.change(loginResult)   <span class="hljs-comment">// (2)</span>
      }.getOrThrow()                          <span class="hljs-comment">// (3)</span>
  }
}</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Kotlin</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">kotlin</span><span class="shcb-language__paren">)</span></small></pre>


<p>[1] 에러가 발생한 경우 에러를 기록합니다.</p>



<p>[2] 성공한 경우 해당 값을 받아서 다른 컴포넌트를 호출합니다.</p>



<p>→ [1], [2]번 두 케이스는 배타적이고 동시에 일어날 수 없습니다.</p>



<p>[3] 그리고 에러인 경우 예외를 발생시킵니다.</p>



<h2>결론</h2>



<p>정리하자면 <code>Result</code>(runCatching)는 다음의 용도에서 사용할 수 있습니다.</p>



<ul><li>외부 서비스에 의존하는 로직이라 예외 발생 가능성이 빈번한 컴포넌트</li><li>해당 컴포넌트에서 에러가 발생할 수 있다는 것을 클라이언트에게 알려주고 싶을 때, 에러 핸들링을 다른 컴포넌트에 강제하고 위임하고 싶을 때</li><li>try … catch를 쓰고 싶지 않을 때</li></ul>
</div></div><style data-emotion="css auig7l">.css-auig7l{margin-top:96px;}</style><style data-emotion="css x7fajo">.css-x7fajo{margin-top:96px;}.css-x7fajo>*:not(style)~*:not(style){margin-left:24px;}</style><style data-emotion="css 6rfvv8">.css-6rfvv8{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;margin-top:96px;}.css-6rfvv8>*:not(style)~*:not(style){margin-left:24px;}</style><div class="css-6rfvv8"><style data-emotion="css 1n0u3h">.css-1n0u3h{background-color:#f9fafb;width:100%;height:auto;border-radius:12px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:48px;}@media (max-width: 700px){.css-1n0u3h{padding:32px;}}</style><div class="css-1n0u3h e1t1xt3a7"><style data-emotion="css 6cc9f0">.css-6cc9f0{font-size:24px;font-weight:700;margin-bottom:16px;color:#4e5968;}</style><h2 class="css-6cc9f0 e1t1xt3a6">재미있게 읽으셨나요?</h2><style data-emotion="css 1wmgpcn">.css-1wmgpcn{font-size:16px;line-height:1.5;font-weight:600;color:#6b7684;margin-bottom:4px;}</style><p class="css-1wmgpcn e1t1xt3a5">좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><style data-emotion="css 4qu8li">.css-4qu8li{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-top:16px;}</style><div class="css-4qu8li e1t1xt3a3"><style data-emotion="css 1fmr5ax">.css-1fmr5ax{display:block;font-family:'tossface';font-size:40px;cursor:pointer;margin:0 12px;-webkit-transition:0.15s ease-in-out all;transition:0.15s ease-in-out all;}.css-1fmr5ax a{-webkit-text-decoration:none;text-decoration:none;}.css-1fmr5ax:hover{-webkit-transform:scale(1.2);-moz-transform:scale(1.2);-ms-transform:scale(1.2);transform:scale(1.2);}</style><div class="css-1fmr5ax e1t1xt3a1">😍</div><div class="css-1fmr5ax e1t1xt3a1">🤔</div></div><style data-emotion="css 1p3zmjw">.css-1p3zmjw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;margin-top:16px;}.css-1p3zmjw button,.css-1p3zmjw a{margin:0 12px;}@media (max-width: 700px){.css-1p3zmjw{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;}.css-1p3zmjw button,.css-1p3zmjw a{width:100%;margin:8px 0;}}</style><div class="css-1p3zmjw e1t1xt3a0"><style data-emotion="css 1u8jkqx">.css-1u8jkqx{display:grid;grid-template-columns:min-content auto;grid-column-gap:8px;}</style><button class="p-button p-button--primary p-button--inline p-button--weak p-button--default p-button--has-icon padding--base css-1u8jkqx" type="button" aria-disabled="false"><span class="icon p-icon icon--colored p-icon--colored" aria-hidden="true" role="presentation" style="height:16px;width:16px;min-width:16px;color:#3182f6"></span>아티클 공유하기</button></div></div></div></article><style data-emotion="css 1lsuzal">.css-1lsuzal{margin-top:100px;}.css-1lsuzal::before{content:'';position:absolute;width:100%;height:1px;left:0;border-bottom:1px solid #e5e8eb;}</style><div class="css-1lsuzal e132k2571"><style data-emotion="css 1ympfnp">.css-1ympfnp{display:inline-block;width:100%;font-size:20px;margin:34px 0 40px 0;}</style><span class="typography typography--h3 typography--bold color--grey800 css-1ympfnp e132k2570">이어지는 글</span><style data-emotion="css vivlm7">.css-vivlm7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;margin-bottom:40px;}.css-vivlm7:last-of-type{margin-bottom:0px;}.css-vivlm7:hover .egyklng4{color:#3182f6;}</style><div class="css-vivlm7 egyklng3"><style data-emotion="css bc0lqn">.css-bc0lqn{width:80px;height:80px;margin-right:20px;border-radius:12px;object-fit:cover;}@media (max-width: 700px){.css-bc0lqn{width:64px;height:64px;}}</style><img srcSet="https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w" class="css-bc0lqn egyklng2"/><style data-emotion="css 1fttcpj">.css-1fttcpj{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}</style><div class="css-1fttcpj egyklng1"><style data-emotion="css p4blj2">.css-p4blj2{font-size:24px;margin-bottom:4px;word-break:keep-all;line-height:1.4;overflow-wrap:break-word;-webkit-transition:color 0.3s ease;transition:color 0.3s ease;-webkit-line-clamp:2;display:block;}@media (max-width: 700px){.css-p4blj2{font-size:18px;-webkit-line-clamp:2;}}</style><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사</span><style data-emotion="css 1jxhn1e">.css-1jxhn1e{color:#8b95a1;}</style><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 04. 01</span></div></div><div class="css-vivlm7 egyklng3"><img srcSet="https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w" class="css-bc0lqn egyklng2"/><div class="css-1fttcpj egyklng1"><span class="typography typography--h4 typography--bold color--grey800 css-p4blj2 egyklng4">ESLint와 AST로 코드 퀄리티 높이기</span><span class="typography typography--p typography--regular color--grey700 css-1jxhn1e egyklng0">2023. 03. 31</span></div></div></div></div></div><style data-emotion="css 1d2vuhc">.css-1d2vuhc{padding:60px 24px;word-break:keep-all;overflow-wrap:break-word;background:rgba(2,9,19,0.91);}@media (max-width: 700px){.css-1d2vuhc{padding-top:24px;}}</style><section class="css-1d2vuhc eqrolup4"><style data-emotion="css yf0lpd">.css-yf0lpd{display:grid;grid-template-columns:3fr 7fr;grid-column-gap:20px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;max-width:640px;margin:0 auto;content-visibility:auto;}@media (max-width: 700px){.css-yf0lpd{grid-template-rows:min-content auto;grid-template-columns:1fr;grid-row-gap:24px;}}</style><div class="css-yf0lpd eqrolup2"><style data-emotion="css 1d33yk5">.css-1d33yk5{width:100%;}@media (max-width: 700px){.css-1d33yk5{width:90px;}}</style><img src="https://static.toss.im/3d/website_code_blue_alpha.png" alt="" class="css-1d33yk5 eqrolup3"/><style data-emotion="css 1gb2pj4">.css-1gb2pj4>*:not(style)~*:not(style){margin-top:24px;}</style><style data-emotion="css 7xmgw5">.css-7xmgw5{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-7xmgw5>*:not(style)~*:not(style){margin-top:24px;}</style><div class="css-7xmgw5"><style data-emotion="css 1pbuvpm">.css-1pbuvpm>*:not(style)~*:not(style){margin-top:8px;}</style><style data-emotion="css nbpfuv">.css-nbpfuv{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start;}.css-nbpfuv>*:not(style)~*:not(style){margin-top:8px;}</style><div class="css-nbpfuv"><style data-emotion="css 19gu4b8">.css-19gu4b8{margin:0;font-size:26px;line-height:1.4;color:#ffffff;}@media (max-width: 700px){.css-19gu4b8{font-size:20px;}}</style><h3 class="css-19gu4b8 eqrolup1">토스팀이 만드는 수많은 혁신의 순간들</h3><style data-emotion="css shfxsq">.css-shfxsq{font-size:17px;line-height:1.5;color:#e5e8eb;}@media (max-width: 700px){.css-shfxsq{font-size:16px;}}</style><div class="css-shfxsq eqrolup0">당신과 함께 만들고 싶습니다.<br/>지금, 토스팀에 합류하세요.</div></div><a class="p-button p-button--primary p-button--inline p-button--fill p-button--small padding--s" aria-disabled="false" href="https://toss.im/career/jobs?gh_src=38b73b7a3us">채용 중인 공고 보기</a></div></div></section><footer class="p-footer p-footer--light"><div class="p-footer__inner"><div class="p-footer__site-group-list"><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스테크</div></li><li class="p-footer__site-group-item"><a href="mailto:techblog@toss.im">의견 보내기</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">토스</div></li><li class="p-footer__site-group-item"><a href="https://toss.im">홈페이지</a></li><li class="p-footer__site-group-item"><a href="https://team.toss.im">회사 소개</a></li><li class="p-footer__site-group-item"><a href="https://toss.im/career">채용</a></li></ul><ul class="p-footer__site-group"><li><div class="p-footer__site-group-title">고객센터</div></li><li class="p-footer__site-group-item"><a href="tel:1599-4905">전화: 1599-4905 (24시간 연중무휴)</a></li><li class="p-footer__site-group-item"><a href="mailto:support.toss.im">이메일: support@toss.im</a></li><li class="p-footer__site-group-item"><a href="https://goto.kakao.com/@toss">카카오톡: @toss</a></li></ul></div><address class="p-footer__address"><strong class="p-footer__address__company-name">㈜비바리퍼블리카</strong>Copyright © Viva Republica, Inc. All Rights Reserved.</address><ul class="p-footer__term-wrapper"></ul><ul class="p-footer__social-list"><li class="p-footer__social-list-item"><a aria-label="Toss Facebook" target="_blank" href="https://www.facebook.com/toss.revolution"><img src="https://static.toss.im/assets/homepage/safety/icn-facebook.svg" alt="Toss Facebook"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss blog" target="_blank" href="https://blog.toss.im"><img src="https://static.toss.im/assets/homepage/safety/icn-blog.svg" alt="Toss blog"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Naver Post" target="_blank" href="https://post.naver.com/tossblog"><img src="https://static.toss.im/assets/homepage/safety/icn-naver.svg" alt="Toss Naver Post"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Twitter" target="_blank" href="https://twitter.com/toss__official"><img src="https://static.toss.im/assets/homepage/safety/icn-twitter.svg" alt="Toss Twitter"/></a></li><li class="p-footer__social-list-item"><a aria-label="Toss Instagram" target="_blank" href="https://www.instagram.com/toss.im/"><img src="https://static.toss.im/assets/homepage/safety/icn-instagram.svg" alt="Toss Instagram"/></a></li></ul></div></footer><div id="tds-pc__portal-container"></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)","content":"\n\u003ch2\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003col\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eResult\u003c/code\u003e를 이해한다면, MSA 환경에서 에러가 전파되지 않도록 막을 수 있습니다.\u003c/strong\u003e\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erunCatching\u003c/code\u003e과 \u003ccode\u003eResult\u003c/code\u003e를 사용하면 에러 핸들링을 클라이언트에게 위임할 수 있습니다.\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003ch3\u003e예제: 로그인 요청을 전달하는 서비스 흐름에서 에러 처리하기\u003c/h3\u003e\n\n\n\n\u003cp\u003e아래와 같은 서비스 호출 흐름이 있다고 가정해보겠습니다.\u003c/p\u003e\n\n\n\n\u003cfigure class=\"wp-block-image size-large\"\u003e\u003cimg loading=\"lazy\" width=\"706\" height=\"454\" src=\"https://wp.toss.tech/wp-content/uploads/2022/05/image.png\" alt=\"\" class=\"wp-image-271\" srcset=\"https://toss.tech/wp-content/uploads/2022/05/image.png 706w, https://toss.tech/wp-content/uploads/2022/05/image-300x193.png 300w\" sizes=\"(max-width: 706px) 100vw, 706px\" /\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eServer A 입장에서는 Server B에서 발생하는 에러 처리를 해야하는 고민에 빠집니다.\u003c/p\u003e\n\n\n\n\u003cp\u003eAPI를 호출하는 코드에서 API의 에러 응답에 따른 비즈니스 로직을 다르게 가져가고 싶은 경우가 있습니다. 예를 들어 위 사례에서 비밀번호가 틀리거나 이메일 주소가 틀린 경우 이 에러를 캐치해서 다른 메세지를 던지고 싶을 수 있고, 어떤 코드에서는 그 에러를 무시하고 다른 로직을 수행하고 싶을 수 있습니다. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e에러 처리를 API Client 단에서 하지 않고 다른 클래스에 위임을 하고 싶은 이런 경우에는 어떤 방법을 사용할 수 있을지 아래 코드 예시로 알아보겠습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003clink rel='stylesheet' id='syntax-highlighting-code-block-css'  href='https://toss.tech/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.3.1' media='all' /\u003e\u003cstyle\u003e.wp-block-code {\n\tborder: 0;\n\tpadding: 0;\n}\n\n.wp-block-code \u003e div {\n\toverflow: auto;\n}\n\n.shcb-language {\n\tborder: 0;\n\tclip: rect(1px, 1px, 1px, 1px);\n\t-webkit-clip-path: inset(50%);\n\tclip-path: inset(50%);\n\theight: 1px;\n\tmargin: -1px;\n\toverflow: hidden;\n\tpadding: 0;\n\tposition: absolute;\n\twidth: 1px;\n\tword-wrap: normal;\n\tword-break: normal;\n}\n\n.hljs {\n\tbox-sizing: border-box;\n}\n\n.hljs.shcb-code-table {\n\tdisplay: table;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table \u003e .shcb-loc {\n\tcolor: inherit;\n\tdisplay: table-row;\n\twidth: 100%;\n}\n\n.hljs.shcb-code-table .shcb-loc \u003e span {\n\tdisplay: table-cell;\n}\n\n.wp-block-code code.hljs:not(.shcb-wrap-lines) {\n\twhite-space: pre;\n}\n\n.wp-block-code code.hljs.shcb-wrap-lines {\n\twhite-space: pre-wrap;\n}\n\n.hljs.shcb-line-numbers {\n\tborder-spacing: 0;\n\tcounter-reset: line;\n}\n\n.hljs.shcb-line-numbers \u003e .shcb-loc {\n\tcounter-increment: line;\n}\n\n.hljs.shcb-line-numbers .shcb-loc \u003e span {\n\tpadding-left: 0.75em;\n}\n\n.hljs.shcb-line-numbers .shcb-loc::before {\n\tborder-right: 1px solid #ddd;\n\tcontent: counter(line);\n\tdisplay: table-cell;\n\tpadding: 0 0.75em;\n\ttext-align: right;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n\twhite-space: nowrap;\n\twidth: 1%;\n}\n\u003c/style\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-comment\"\u003e// API client\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e@FeignClient\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003einternal\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginApi\u003c/span\u003e \u003c/span\u003e{\n  \u003cspan class=\"hljs-meta\"\u003e@PostMapping\u003c/span\u003e\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogin\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\n    \u003cspan class=\"hljs-meta\"\u003e@RequestBody\u003c/span\u003e request: \u003cspan class=\"hljs-type\"\u003eLoginRequestDto\u003c/span\u003e\n  )\u003c/span\u003e\u003c/span\u003e: OtherServiceResponse\u0026lt;LoginResponseDto\u0026gt;\n}\n\n\u003cspan class=\"hljs-meta\"\u003e@Component\u003c/span\u003e\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginApiClient\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einternal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e loginApi: LoginApi\n) {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogin\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(request: \u003cspan class=\"hljs-type\"\u003eLoginRequestDto\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: LoginResult {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e loginApi.login(request).result.toResult()\n  }\n}\n\n\u003cspan class=\"hljs-meta\"\u003e@Service\u003c/span\u003e\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginService\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e loginApiClient: LoginApiClient\n) {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogin\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(id: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e, pw: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: LoginResult {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n      loginApiClient.login(LoginRequestDto(id, pw))\n    } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e {\n      \u003cspan class=\"hljs-comment\"\u003e// 에러 핸들링\u003c/span\u003e\n    }\n  }\n}\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-1\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e이 경우에 아래와 같은 두 케이스를 해결하고 싶어집니다.\u003c/p\u003e\n\n\n\n\u003col\u003e\u003cli\u003e이 API를 사용하는 쪽(ex. LoginService)에서 에러 핸들링을 강제하고 싶습니다.\u003c/li\u003e\u003cli\u003eAPI 호출 로직마다 에러 핸들링을 다른 방식으로 가져가게 하고 싶습니다.\u003cul\u003e\u003cli\u003eLoginService가 아닌 다른 호출 로직에서는 에러를 다르게 처리하고 싶을 수 있습니다.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003cp\u003e위 고민을 해결할 방법이 있습니다. 바로 \u003ccode\u003eResult\u003c/code\u003e입니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-meta\"\u003e@Component\u003c/span\u003e\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginApiClient\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einternal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e loginApi: LoginApi\n) {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogin\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(request: \u003cspan class=\"hljs-type\"\u003eLoginRequestDto\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;LoginResult\u0026gt; {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e runCatching { \n      loginApi.login(request).result.toResult()\n    }\n  }\n}\n\n\u003cspan class=\"hljs-meta\"\u003e@Service\u003c/span\u003e\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginService\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e loginApiClient: LoginApiClient\n) {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogin\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(id: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e, pw: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: LoginResult {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e loginApiClient.login(LoginRequestDto(id, pw))\n      .onFailure {\n        \u003cspan class=\"hljs-comment\"\u003e// 에러 핸들링\u003c/span\u003e\n      }\n  }\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-2\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e\u003c/p\u003e\n\n\n\n\u003ch3\u003e코틀린의 runCatching\u003c/h3\u003e\n\n\n\n\u003cblockquote class=\"wp-block-quote\"\u003e\u003cp\u003e💡 이미 runCatching을 잘 사용하고 있다면 넘겨도 좋습니다.\u003c/p\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e위 코드를 이해하기에 앞서서 \u003ccode\u003erunCatching\u003c/code\u003e을 알아둘 필요가 있습니다. 코틀린은 물론 자바의 \u003ccode\u003etry ... catch\u003c/code\u003e를 동일하게 지원하지만 이와는 조금 다른 방법으로 에러 핸들링을 할 수도 있습니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003e예제\u003c/h4\u003e\n\n\n\n\u003cp\u003e아래 요구사항이 있다고 가정합시다.\u003c/p\u003e\n\n\n\n\u003cul\u003e\u003cli\u003e\u003ccode\u003eLoginApiClient\u003c/code\u003e 호출 시 \u003ccode\u003eLoginException\u003c/code\u003e이 발생했는데,\u003cul\u003e\u003cli\u003e\u003ccode\u003eerrorCode\u003c/code\u003e가 \u003ccode\u003eINVALID_PASSWORD\u003c/code\u003e 인 경우 예외를 발생시키지 않고 \u003ccode\u003enull\u003c/code\u003e을 반환한다.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e그 외 모든 에러 상황에서는 예외를 발생시킨다.\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003ch4\u003etry \u0026#8230; catch를 사용했을때\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n  loginApiClient.login(request) \t\n} \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (e: LoginException) {\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (e.errorCode == \u003cspan class=\"hljs-string\"\u003e\"INVALID_PASSWORD\"\u003c/span\u003e) {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n    \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e e\n  }\n}\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-3\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eJavaScript\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ejavascript\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003eJava에서 위와 같이 작성하는 코드를 runCatching을 사용하면 아래처럼 표현할 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003erunCatching을 사용했을 때\u003c/strong\u003e\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e runCatching {\n  loginApiClient.login(request)\n}.onFailure { e -\u0026gt; \n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (e.errorCode != \u003cspan class=\"hljs-string\"\u003e\"INVALID_PASSWORD\"\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e e\n}.getOrNull()\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-4\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eJavaScript\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ejavascript\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch4\u003ekotlin.runCatching\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-php\"\u003e@InlineOnly\n@SinceKotlin(\u003cspan class=\"hljs-string\"\u003e\"1.3\"\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e inline fun \u0026lt;R\u0026gt; runCatching(block: () -\u0026gt; R): Result\u0026lt;R\u0026gt; {\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n    Result.success(block())\n  } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (e: Throwable) {\n    Result.failure(e)\n  }\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-5\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003ePHP\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ephp\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e\u003ccode\u003etry..catch\u003c/code\u003e 로직을 그대로 사용하지만 \u003ccode\u003eResult\u003c/code\u003e로 감싸서 반환하는 것을 알 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cul\u003e\u003cli\u003e에러가 발생하지 않았을 때에는 \u003ccode\u003eResult.success\u003c/code\u003e 반환\u003c/li\u003e\u003cli\u003e에러가 발생했을 때에는 \u003ccode\u003eResult.failure\u003c/code\u003e 반환\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003c/p\u003e\n\n\n\n\u003ch3\u003eResult가 뭔가요?\u003c/h3\u003e\n\n\n\n\u003cp\u003eResult가 무엇인지 알아보기 위해서 Kotlin 1.3 표준 라이브러리의 코드를 살펴봅시다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-meta\"\u003e@SinceKotlin(\u003cspan class=\"hljs-meta-string\"\u003e\"1.3\"\u003c/span\u003e)\u003c/span\u003e\n\u003cspan class=\"hljs-meta\"\u003e@JvmInline\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e value \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eResult\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-type\"\u003eout T\u003c/span\u003e\u0026gt; \u003cspan class=\"hljs-meta\"\u003e@PublishedApi\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einternal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-meta\"\u003e@PublishedApi\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003einternal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e value: Any?\n) : Serializable {\n\n  \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e isSuccess: \u003cspan class=\"hljs-built_in\"\u003eBoolean\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e() = value !\u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e Failure\n\n  \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e isFailure: \u003cspan class=\"hljs-built_in\"\u003eBoolean\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e() = value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e Failure\n\t\t\n  \u003cspan class=\"hljs-comment\"\u003e/* ... */\u003c/span\u003e\n\t\t\n  \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecompanion\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eobject\u003c/span\u003e {\n    \u003cspan class=\"hljs-meta\"\u003e@Suppress(\u003cspan class=\"hljs-meta-string\"\u003e\"INAPPLICABLE_JVM_NAME\"\u003c/span\u003e)\u003c/span\u003e\n    \u003cspan class=\"hljs-meta\"\u003e@InlineOnly\u003c/span\u003e\n    \u003cspan class=\"hljs-meta\"\u003e@JvmName(\u003cspan class=\"hljs-meta-string\"\u003e\"success\"\u003c/span\u003e)\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esuccess\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(value: \u003cspan class=\"hljs-type\"\u003eT\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;T\u0026gt; =\n      Result(value)\n\n    \u003cspan class=\"hljs-meta\"\u003e@Suppress(\u003cspan class=\"hljs-meta-string\"\u003e\"INAPPLICABLE_JVM_NAME\"\u003c/span\u003e)\u003c/span\u003e\n    \u003cspan class=\"hljs-meta\"\u003e@InlineOnly\u003c/span\u003e\n    \u003cspan class=\"hljs-meta\"\u003e@JvmName(\u003cspan class=\"hljs-meta-string\"\u003e\"failure\"\u003c/span\u003e)\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(exception: \u003cspan class=\"hljs-type\"\u003eThrowable\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;T\u0026gt; =\n      Result(createFailure(exception))\n  }\n\n  \u003cspan class=\"hljs-keyword\"\u003einternal\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFailure\u003c/span\u003e\u003c/span\u003e(\n    \u003cspan class=\"hljs-meta\"\u003e@JvmField\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e exception: Throwable\n  ) : Serializable {\n    \u003cspan class=\"hljs-comment\"\u003e/* ... */\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-6\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e즉, \u003ccode\u003eResult\u003c/code\u003e의 \u003ccode\u003evalue\u003c/code\u003e는\u003c/p\u003e\n\n\n\n\u003cul\u003e\u003cli\u003e성공일 경우 \u003ccode\u003eT\u003c/code\u003e를 타입으로 하는 값을 가지게 되고\u003c/li\u003e\u003cli\u003e실패일 경우는 \u003ccode\u003eFailure\u003c/code\u003e를 wrapper class로 하는 \u003ccode\u003eexception\u003c/code\u003e을 값으로 가지게 됩니다.\u003c/li\u003e\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003eResult\u003c/code\u003e가 제공하는 함수들은 다음과 같습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003egetOrThrow\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e: T\n\n\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;R, T : R\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003egetOrElse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\n  onFailure: (\u003cspan class=\"hljs-type\"\u003eexception\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eThrowable\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eR\u003c/span\u003e\n)\u003c/span\u003e\u003c/span\u003e: R\n\n\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;R, T : R\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003egetOrDefault\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(defaultValue: \u003cspan class=\"hljs-type\"\u003eR\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: R\n\n\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;R, T\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003efold\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\n  onSuccess: (\u003cspan class=\"hljs-type\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eT\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eR\u003c/span\u003e,\n  onFailure: (\u003cspan class=\"hljs-type\"\u003eexception\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eThrowable\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eR\u003c/span\u003e\n)\u003c/span\u003e\u003c/span\u003e: R\n\n\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;R, T\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003emap\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(transform: (\u003cspan class=\"hljs-type\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eT\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eR\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;R\u0026gt;\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;R, T\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003emapCatching\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(transform: (\u003cspan class=\"hljs-type\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eT\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eR\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;R\u0026gt;\n\n\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;R, T : R\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003erecover\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(transform: (\u003cspan class=\"hljs-type\"\u003eexception\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eThrowable\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eR\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;R\u0026gt;\n\n\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(action: (\u003cspan class=\"hljs-type\"\u003eexception\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eThrowable\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eUnit\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;T\u0026gt;\n\n\u003cspan class=\"hljs-keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e Result\u003cspan class=\"hljs-type\"\u003e\u0026lt;T\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eonSuccess\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(action: (\u003cspan class=\"hljs-type\"\u003evalue\u003c/span\u003e: \u003cspan class=\"hljs-type\"\u003eT\u003c/span\u003e) -\u0026gt; \u003cspan class=\"hljs-type\"\u003eUnit\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-7\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e\u003c/p\u003e\n\n\n\n\u003ch3\u003eResult 사용 예시\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003erunCatching\u003c/code\u003e은 \u003ccode\u003eResult\u0026lt;T\u0026gt;\u003c/code\u003e를 반환하게 되는데, \u003ccode\u003eResult\u003c/code\u003e가 제공하는 함수를 이용해서 다양하게 활용할 수 있습니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003e에러를 무시하고 null 반환\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e response = runCatching {\n  login()\n}.getOrNull()\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-8\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch4\u003e기본값 반환\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e response = runCatching {\n  login()\n}.getOrDefault(emptyList())\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-9\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch4\u003e에러 발생 시 다른 동작 수행\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e response = runCatching {\n  login() \n}.getOrElse { ex -\u0026gt;\n  logger.warn(ex) { \u003cspan class=\"hljs-string\"\u003e\"에러 발생\"\u003c/span\u003e }\n\n  \u003cspan class=\"hljs-comment\"\u003e// 에러를 던지고 싶다면\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e ex\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-10\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch4\u003e에러가 발생한 경우에만 해당 에러 객체 반환\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e exception = runCatching {\n  login() \n}.exceptionOrNull()\n\n\u003cspan class=\"hljs-comment\"\u003e// 위에서 받은 에러로 로직 수행\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003ewhen\u003c/span\u003e (exception) {\n  \u003cspan class=\"hljs-comment\"\u003e/* ... */\u003c/span\u003e\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-11\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e에러가 발생하는지 아닌지만 확인하고 싶을 때에도 유용할 수 있습니다.\u003c/p\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-javascript\"\u003eval isValidCredential = runCatching { tryLogin() }.exceptionOrNull() != \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-12\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eJavaScript\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ejavascript\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch4\u003e성공/에러 시 각각 특정 동작 수행 후 에러 던지기\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e response = runCatching {\n  login() \n}.onSuccess { \n  logger.info(\u003cspan class=\"hljs-string\"\u003e\"성공!\"\u003c/span\u003e)\n}.onFailure {\n  logger.info(\u003cspan class=\"hljs-string\"\u003e\"실패!\"\u003c/span\u003e)\n}.getOrThrow()\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-13\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003ch4\u003erunCatching으로 try .. finally 구현하기\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003erunCatching {\n  request()\n}.also {\n  doSomething()\n}.getOrThrow()\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-14\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eResult를 사용해서 예외 처리를 다른 클래스에 위임하기\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003erunCatching\u003c/code\u003e을 사용하면 \u003ccode\u003eResult\u003c/code\u003e가 제공하는 다양한 함수의 편의에 기댈 수 있다는 것을 배웠습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003eResult\u003c/code\u003e에 대한 처리를 즉시 하지 않고 함수의 반환 값으로 반환하게 된다면, \u003ccode\u003eResult\u003c/code\u003e에 대한 핸들링을 다른 클래스에 위임할 수도 있습니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003eLoginApiClient\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-meta\"\u003e@Component\u003c/span\u003e\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginApiClient\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einternal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econstructor\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e loginApi: LoginApi\n) {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogin\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(request: \u003cspan class=\"hljs-type\"\u003eLoginRequestDto\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: Result\u0026lt;LoginResult\u0026gt; {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e runCatching { \n      loginApi.login(request).result.toResult()\n    }\n  }\n}\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-15\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003eResult를 반환하여 다른 클래스가 에러 핸들링을 하도록 위임합니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003eLoginService\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-meta\"\u003e@Service\u003c/span\u003e\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginService\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e loginApiClient: LoginApiClient\n) {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogin\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(id: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e, pw: \u003cspan class=\"hljs-type\"\u003eString\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e: LoginResult? {\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e loginApiClient.login(LoginRequestDto(id, pw))\n      .getOrNull()\n  }\n}\n\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-16\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e에러가 발생한 경우 에러를 무시하고 기본값으로 null을 반환합니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e하지만 아래처럼 다른 컴포넌트에서는 에러를 핸들링하고 싶을 수도 있습니다.\u003c/p\u003e\n\n\n\n\u003ch4\u003ePasswordChangeService\u003c/h4\u003e\n\n\n\u003cpre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"Kotlin\" data-shcb-language-slug=\"kotlin\"\u003e\u003cdiv\u003e\u003ccode class=\"hljs language-kotlin\"\u003e\u003cspan class=\"hljs-meta\"\u003e@Component\u003c/span\u003e\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePasswordChangeService\u003c/span\u003e\u003c/span\u003e(\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e loginApiClient: LoginApiClient,\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e errorStatusWriter: ErrorStatusWriter,\n  \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eval\u003c/span\u003e passwordChanger: PasswordChanger\n) {\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efun\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003echange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e {\n    loginApiClient.login(request)\n      .onFailure { exception -\u0026gt;\n        errorStatusWriter.write(exception)    \u003cspan class=\"hljs-comment\"\u003e// (1)\u003c/span\u003e\n      }.onSuccess { loginResult -\u0026gt;\n        passwordChanger.change(loginResult)   \u003cspan class=\"hljs-comment\"\u003e// (2)\u003c/span\u003e\n      }.getOrThrow()                          \u003cspan class=\"hljs-comment\"\u003e// (3)\u003c/span\u003e\n  }\n}\u003c/code\u003e\u003c/div\u003e\u003csmall class=\"shcb-language\" id=\"shcb-language-17\"\u003e\u003cspan class=\"shcb-language__label\"\u003eCode language:\u003c/span\u003e \u003cspan class=\"shcb-language__name\"\u003eKotlin\u003c/span\u003e \u003cspan class=\"shcb-language__paren\"\u003e(\u003c/span\u003e\u003cspan class=\"shcb-language__slug\"\u003ekotlin\u003c/span\u003e\u003cspan class=\"shcb-language__paren\"\u003e)\u003c/span\u003e\u003c/small\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e[1] 에러가 발생한 경우 에러를 기록합니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e[2] 성공한 경우 해당 값을 받아서 다른 컴포넌트를 호출합니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e→ [1], [2]번 두 케이스는 배타적이고 동시에 일어날 수 없습니다.\u003c/p\u003e\n\n\n\n\u003cp\u003e[3] 그리고 에러인 경우 예외를 발생시킵니다.\u003c/p\u003e\n\n\n\n\u003ch2\u003e결론\u003c/h2\u003e\n\n\n\n\u003cp\u003e정리하자면 \u003ccode\u003eResult\u003c/code\u003e(runCatching)는 다음의 용도에서 사용할 수 있습니다.\u003c/p\u003e\n\n\n\n\u003cul\u003e\u003cli\u003e외부 서비스에 의존하는 로직이라 예외 발생 가능성이 빈번한 컴포넌트\u003c/li\u003e\u003cli\u003e해당 컴포넌트에서 에러가 발생할 수 있다는 것을 클라이언트에게 알려주고 싶을 때, 에러 핸들링을 다른 컴포넌트에 강제하고 위임하고 싶을 때\u003c/li\u003e\u003cli\u003etry \u0026#8230; catch를 쓰고 싶지 않을 때\u003c/li\u003e\u003c/ul\u003e\n","date":"2022-05-14T23:38:16","excerpt":"\u003cp\u003eKotlin의 Result로 MSA에서 에러가 전파되지 않는 안전한 환경을 만드는 방법을 알아봅니다.\u003c/p\u003e\n","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling-300x150.png 300w, https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling-768x384.png 768w, https://toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling.png 1200w"}},"metadata":{"ogBackground":"https://static.toss.im/assets/tech-blog/og image/thumnail/error.png","ogImageTitle":"에러 핸들링\r\n다른 클래스에게\r\n위임하기","ogGenerateImage":null,"recruitTitle":"재미있게 읽으셨나요?","recruitUrl":null,"form1Url":"https://8cv5m2yf13x.typeform.com/tossengineering#no=270\u0026title=에러_핸들링을_다른_클래스에게_위임하기\u0026reaction=good","form2Url":"https://8cv5m2yf13x.typeform.com/tossengineering#no=270\u0026title=에러_핸들링을_다른_클래스에게_위임하기\u0026reaction=bad","formDescription":"좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.","form1Label":"😍","form2Label":"🤔","recruitDescription":null},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}},{"node":{"id":"dGVybTox","name":"Uncategorized"}}]},"author":{"node":{"id":"dXNlcjoxMw==","firstName":"규주","lastName":"한","description":"토스페이먼츠에서 서버 개발을 하고 있습니다. 코드에서나 업무에서나 반복적인 일을 제거하는데 관심이 많습니다.","avatar":{"url":"https://toss.tech/wp-content/uploads/2022/04/E01JAGTHP8R-U01JGK1JWJX-867cb0c757f7-512-312x312.png"},"role":{"role":"Server Developer"}}}},"relatedArticles":[{"title":"무지성으로 사용한 헬스 체크가 불러일으킬 수 있는 참사","slug":"how-to-work-health-check-in-spring-boot-actuaotr","date":"2023-04-01T15:38:57","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/04/00009-889461687-300x300.png 300w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687-150x150.png 150w, https://toss.tech/wp-content/uploads/2023/04/00009-889461687.png 512w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}},{"node":{"id":"dGVybTox","name":"Uncategorized"}}]}},{"title":"ESLint와 AST로 코드 퀄리티 높이기","slug":"improving-code-quality-via-eslint-and-ast","date":"2023-03-31T15:47:53","featuredImage":{"node":{"srcSet":"https://toss.tech/wp-content/uploads/2023/03/center-300x150.png 300w, https://toss.tech/wp-content/uploads/2023/03/center-1024x512.png 1024w, https://toss.tech/wp-content/uploads/2023/03/center-768x384.png 768w, https://toss.tech/wp-content/uploads/2023/03/center.png 1200w"}},"categories":{"edges":[{"node":{"id":"dGVybToy","name":"tech"}}]}}]},"__N_SSP":true},"page":"/article/[slug]","query":{"slug":"kotlin-result"},"buildId":"QqBxegmptuUDYc8oCREsD","assetPrefix":"https://static.toss.im/frontend/toss-tech","runtimeConfig":{"ENV":"live","NODE_ENV":"production","PORT":"3000","ASSET_PREFIX":"https://static.toss.im/frontend/toss-tech","SERVICE":"toss-tech","SENTRY":{"DSN":"https://5eff657ed6ef486fb8af2dc5f9508abd@sentry.io/1242586","PUBLIC_KEY":"5eff657ed6ef486fb8af2dc5f9508abd","RELEASE":"toss-tech_1.0.103","SERVICE":"toss-tech","SERVICE_VERSION":"1.0.103"},"RENDER_TYPE":"ssr"},"isFallback":false,"gssp":true,"customServer":true,"scriptLoader":[]}</script></body></html>